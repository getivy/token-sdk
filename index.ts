/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never }
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never

export interface paths {
  '/account-balance': {
    /**
     * Get account balances
     * @description The `GET /account-balance` endpoint retrieves the balances for multiple bank accounts.
     */
    get: operations['GatewayService.GetBalances']
  }
  '/accounts': {
    /**
     * Get accounts
     * @description The `GET /accounts` endpoint retrieves information for all bank accounts.
     */
    get: operations['GatewayService.GetAccounts']
  }
  '/accounts/{accountId}': {
    /**
     * Get account information
     * @description The `GET /accounts/{accountId}` endpoint retrieves the information for a specific bank account.
     */
    get: operations['GatewayService.GetAccount']
  }
  '/accounts/{accountId}/balance': {
    /**
     * Get an account balance
     * @description The `GET /accounts/{accountId}/balance` endpoint retrieves the balance for a given bank account.
     */
    get: operations['GatewayService.GetBalance']
  }
  '/accounts/{accountId}/funds-confirmation': {
    /**
     * Confirm available funds
     * @description The `PUT /accounts/{accountId}/funds-confirmation` endpoint confirms that sufficient funds are available in the account.
     */
    put: operations['GatewayService.ConfirmFunds']
  }
  '/accounts/{accountId}/transactions': {
    /**
     * Get account transactions
     * @description The `GET /accounts/{accountId}/transactions` endpoint retrieves information for all transactions in a given account.
     */
    get: operations['GatewayService.GetTransactions']
  }
  '/accounts/{accountId}/transaction/{transactionId}': {
    /**
     * Get transaction information
     * @description The `GET /accounts/{accountId}/transaction/{transactionId}` endpoint retrieves information for a specific transaction in a given account.
     */
    get: operations['GatewayService.GetTransaction']
  }
  '/banks': {
    /**
     * Get banks v1
     * @description The `GET /banks` endpoint retrieves a list of Token.io-integrated banks matching the parameters specified.
     */
    get: operations['GatewayService.GetBanks']
  }
  '/bank/countries': {
    /**
     * Get bank countries
     * @description The `GET /banks/countries` endpoint retrieves the list of countries that have Token.io-integrated banks which match the parameters specified.
     */
    get: operations['GatewayService.GetBanksCountries']
  }
  '/member/sub-tpps': {
    /**
     * Get sub-TPPs
     * @description The `GET /member/sub-tpps` endpoint retrieves a list of all sub-TPPs for a reseller.
     */
    get: operations['GatewayService.RetrieveSubTpps']
    /**
     * Create a sub-TPP
     * @description The `POST /member/sub-tpps` endpoint creates a new sub-TPP for a reseller.
     */
    post: operations['GatewayService.CreateSubTpp']
  }
  '/member/sub-tpps/{subTppId}': {
    /**
     * Get sub-TPP information
     * @description The `GET /member/sub-tpps/{subTppId}` endpoint retrieves the details of the specified sub-TPP for a reseller.
     */
    get: operations['GatewayService.RetrieveSubTpp']
    /**
     * Delete a sub-TPP
     * @description The `DELETE /member/sub-tpps/{subTppId}` endpoint deletes an existing sub-TPP for a reseller.
     */
    delete: operations['GatewayService.DeleteSubTpp']
  }
  '/member/sub-tpps/{subTppId}/children': {
    /**
     * Get sub-TPP children
     * @description The `GET /member/sub-tpps/{subTppId}/children` endpoint retrieves the sub-TPP children for given sub-TPP.
     */
    get: operations['GatewayService.RetrieveSubTppChildren']
  }
  '/reports/banks/status': {
    /**
     * Get bank statuses
     * @description The `GET /reports/banks/status` endpoint returns the current AIS and PIS service status along with server status for all banks.
     */
    get: operations['GatewayService.GetBanksStatus']
  }
  '/reports/banks/{bankId}/status': {
    /**
     * Get a bank status
     * @description The `GET /reports/banks/{bankId}/status` endpoint returns the current AIS and PIS service status for a specific bank.
     */
    get: operations['GatewayService.GetBankStatus']
  }
  '/token-requests': {
    /**
     * Initiate a token request
     * @description The `POST /token-requests` endpoint persists the required information used by AIS requests and PIS requests using the API and the Token.io Web App.
     */
    post: operations['GatewayService.StoreTokenRequest']
  }
  '/token-requests/{tokenRequestId}/result': {
    /**
     * Get a token request
     * @description The `GET /token-requests/{tokenRequestId}/result` endpoint checks whether a token request result is available. This endpoint will return a `PENDING` status while the result is not available. The status will become `PROCESSED` once the result is available. If the request is rejected by the bank, the status will become `REJECTED`. The status will become `EXPIRED` if the request is not processed or rejected before the token request expiration.
     */
    get: operations['GatewayService.GetTokenRequestResultWithStatus']
  }
  '/callback/initiation': {
    /**
     * Initiate a callback
     * @description The `POST /callback/initiation` endpoint processes a bank authorization callback notification. If you're responsible for handling callbacks, the bank will callback to your `callbackUrl` provided in the payment initiation, after the user finishes authentication at the bank. Send the query of the bank's callback url to Token.io via the `POST /callback/initiation` endpoint to process the payment.
     */
    post: operations['GatewayService.OnBankAuthCallback']
  }
  '/tokens': {
    /**
     * Get tokens
     * @description The `GET /tokens` endpoint retrieves a list of all tokens for the authenticated member.
     */
    get: operations['GatewayService.GetTokens']
  }
  '/tokens/{tokenId}': {
    /**
     * Get a token
     * @description The `GET /tokens/{tokenId}` endpoint retrieves information about a specific token for the authenticated member.
     */
    get: operations['GatewayService.GetToken']
  }
  '/tokens/{tokenId}/cancel': {
    /**
     * Cancel a token
     * @description The `PUT /tokens/{tokenId}/cancel` endpoint cancels a given token.
     */
    put: operations['GatewayService.CancelToken']
  }
  '/transfers': {
    /**
     * Get transfers
     * @description The `GET /transfers` endpoint retrieves information for all transfers.
     */
    get: operations['GatewayService.GetTransfers']
    /**
     * Redeem a transfer token
     * @description The `POST /transfers` endpoint creates a request to move money between accounts. This is only required for banks that support 2-step payments.
     */
    post: operations['GatewayService.CreateTransfer']
  }
  '/token-requests/{tokenRequestId}/authorization': {
    /**
     * Initiate bank authorization
     * @description The `POST /token-requests/{tokenRequestId}/authorization` endpoint initiates the bank authorization process with a given bank id and token request id.
     */
    post: operations['GatewayService.InitiateBankAuthorization']
  }
  '/transfers/{transferId}': {
    /**
     * Get a transfer
     * @description The `GET /transfers/{transferId}` endpoint retrieves information about a specific transfer in a given account.
     */
    get: operations['GatewayService.GetTransfer']
  }
  '/webhook/config': {
    /**
     * Get webhook config
     * @description The `GET /webhook/config` endpoint retrieves the webhook configuration.
     */
    get: operations['GatewayService.GetWebhookConfig']
    /**
     * Set webhook config
     * @description The `PUT /webhook/config` endpoint sets the webhook configuration.
     */
    put: operations['GatewayService.SetWebhookConfig']
    /**
     * Delete webhook config
     * @description The `GET /webhook/config` endpoint deletes the webhook configuration.
     */
    delete: operations['GatewayService.DeleteWebhookConfig']
  }
  '/vrp-consents': {
    /**
     * Get VRP consents
     * @description The `GET /vrp-consents` endpoint retrieves all VRP consents created by the calling member.
     */
    get: operations['GetVrpConsents']
    /**
     * Create a VRP consent
     * @description The `POST /vrp-consents` endpoint creates a new VRP consent.
     */
    post: operations['CreateVrpConsent']
  }
  '/vrp-consents/{id}': {
    /**
     * Get a VRP consent
     * @description The `GET /vrp-consents/{id}` endpoint retrieves the details for an individual VRP consent.
     */
    get: operations['GetVrpConsent']
    /**
     * Revoke a VRP consent
     * @description The `DELETE /vrp-consents/{id}` endpoint revokes an individual VRP consent.
     */
    delete: operations['RevokeVrpConsent']
  }
  '/vrp-consents/{id}/payments': {
    /**
     * Get payments under a VRP consent
     * @description The `GET /vrp-consents/{id}/payments` endpoint retrieves the payments under a given VRP consent.
     */
    get: operations['GetVrpConsentPayments']
  }
  '/vrps': {
    /**
     * Initiate a VRP payment
     * @description The `POST /vrps` initiates a new VRP payment.
     */
    post: operations['CreateVrp']
  }
  '/vrps/{id}': {
    /**
     * Get a VRP payment
     * @description The `GET /vrps/{id}` endpoint retrieves the details for an individual VRP payment.
     */
    get: operations['GetVrp']
  }
  '/refunds': {
    /**
     * Get refunds
     * @description The `GET /refunds` endpoint retrieves a complete or filtered list of refunds.
     */
    get: operations['GetRefunds']
    /**
     * Initiate a refund
     * @description The `POST /refunds` endpoint initiates a refund. After the refund is settled, the refund status of the original transfer will be updated. <br/> The debtor field can be optional if you're using the debtor in registration. The creditor field can be optional if the information is available in the original payment.
     */
    post: operations['InitiateRefund']
  }
  '/refunds/{id}': {
    /**
     * Get a refund
     * @description The `GET /refunds/{id}` endpoint retrieves a given refund.
     */
    get: operations['GetRefund']
  }
  '/transfers/{id}/refunds': {
    /**
     * Get all refunds by transfer
     * @description The `GET /transfers/{id}/refunds` endpoint retrieves all refunds associated with a given transfer.
     */
    get: operations['GetTransferRefunds']
  }
  '/payouts': {
    /**
     * Get payouts
     * @description The `GET /payouts` endpoint retrieves a complete or filtered list of payouts.
     */
    get: operations['GetPayouts']
    /**
     * Initiate a payout
     * @description The `POST /payouts` endpoint initiates a payout.
     */
    post: operations['InitiatePayout']
  }
  '/payouts/{id}': {
    /**
     * Get a payout
     * @description The `GET /payouts/{id}` endpoint retrieves a given payout.
     */
    get: operations['GetPayout']
  }
  '/secrets/upload/key-and-certificate': {
    /**
     * Upload a private key and certificate
     * @description The `POST /secrets/upload/key-and-certificate` endpoint uploads a private key and certificate.
     */
    post: operations['UploadKeyAndCertificate']
  }
  '/v2/banks': {
    /**
     * Get banks v2
     * @description The `GET /v2/banks` endpoint retrieves a list of Token.io-integrated banks matching the parameters specified.
     */
    get: operations['GetBanksv2']
  }
  '/v2/payments': {
    /**
     * Get payments
     * @description The `GET /v2/payments` endpoint provides you with a list of payments and their details.
     */
    get: operations['GetPayments']
    /**
     * Initiate a payment
     * @description The `POST /v2/payments` endpoint enables you to initiate a payment with a bank.<br/><br/>Once the payment has been initiated, the end user needs to authenticate themselves with their bank.<br/><br/><b>Check payment status:</b><br/><ol><li>If the status in the initiation response is `INITIATION_PENDING_REDIRECT_AUTH`, redirect the user to the redirect url found in the authentication payload of the payment, to authenticate at the bank.</li><br/><li>If the status in the initiation response is `INITIATION_PENDING_EMBEDDED_AUTH`, collect the requested data listed in the authentication payload of the payment and use the `POST /v2/payments/{paymentId}/embedded-auth` endpoint to provide the requested field values.</li><br/><li>If the status in the initiation response is `INITIATION_PENDING`, Token.io needs more time to process this request with the bank. In the case of a successful scenario, the status will be updated to `INITIATION_PENDING_REDIRECT_AUTH`, `INITIATION_PENDING_EMBEDDED_AUTH` or `INITIATION_PENDING_DECOUPLED_AUTH` when the authentication details are ready. The update can be checked by the `GET /v2/payments/{paymentId}` endpoint or received via a webhook (see <a href="https://developer.token.io/token_rest_api_doc/content/e-rest/api-basics.htm#Webhook" target="_blank">Webhooks</a>).</li><br/><li>If the status is `INITIATION_PENDING_DECOUPLED_AUTH`, the bank has requested a decoupled authentication from the user and Token.io is awaiting the result. No further action is required.</li><br/><li>If the status is `PENDING_MORE_INFO` and you're not using Token.io's Web App, you need to populate the required information and make the payment initiation call again. Information about the missing data can be found in the `statusReasonInformation` field. If you're using Token.io's Web App, the required data will be collected from the user. You'll need to redirect the user to the Web App url constructed with the returned payment `id`.</li></ol>
     */
    post: operations['InitiatePayment']
  }
  '/v2/payments/{paymentId}/embedded-auth': {
    /**
     * Provide information for embedded authentication
     * @description The `/v2/payments/{paymentId}/embedded-auth` endpoint provides you with the requested information when the payment status is `INITIATION_PENDING_EMBEDDED_AUTH`. The requested information can be found in the authentication field of the payment. <br/> <br/> It's possible that some banks might request the user's input multiple times. In this case you might need to call this endpoint again for a new field set.
     */
    post: operations['ProvideEmbeddedFields']
  }
  '/v2/payments/{paymentId}': {
    /**
     * Get a payment
     * @description The `GET /v2/payments/{paymentId}` endpoint provides you with details of an individual payment and checks the payment status for the next step, if any.
     */
    get: operations['GetPayment']
  }
  '/virtual-accounts': {
    /**
     * Get virtual accounts
     * @description The `GET /virtual-accounts` endpoint retrieves information for all virtual accounts.
     */
    get: operations['GatewayService.GetVirtualAccounts']
    /**
     * Create a virtual account
     * @description The `POST /virtual-accounts` endpoint creates a virtual account.
     */
    post: operations['GatewayService.CreateVirtualAccount']
  }
  '/virtual-accounts/{accountId}': {
    /**
     * Get a virtual account
     * @description The `GET /virtual-accounts/{accountId}` endpoint the information for a specific virtual account.
     */
    get: operations['GatewayService.GetVirtualAccountById']
  }
  '/virtual-accounts/{accountId}/transactions': {
    /**
     * Get virtual account transactions
     * @description The `GET /virtual-accounts/{accountId}/transactions` endpoint retrieves information for a specific transaction in a given virtual account.
     */
    get: operations['GatewayService.GetVirtualAccountTransactions']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Contains information about the requested bank account. */
    Account: {
      accountDetails?: components['schemas']['AccountDetails']
      accountFeatures?: components['schemas']['AccountFeatures']
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example goldbank
       */
      bankId?: string
      /**
       * @description The system-generated, unique identifier for this account.
       * @example a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
       */
      id?: string
      /**
       * Format: boolean
       * @description All services are locked out for this account if `isLocked` = true.
       * @default false
       * @example false
       */
      isLocked?: boolean
      /**
       * @description The unique name of this account.
       * @example John A Smith
       */
      name?: string
    }
    /** @description Contains the details needed to identify, correlate and validate the bank account. */
    AccountDetails: {
      /**
       * @description The name of the account holder/owner.
       * @example John Arthur Smith
       */
      accountHolderName?: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the SWIFT Address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs are often called SWIFT Codes and can be either 8 or 11 characters long."
       * @example BOFIIE2D
       */
      bic?: string
      /**
       * @description The type of `accountIdentifier` being used, <i>e.g.</i>, bban, gbDomestic, iban, msisdn, pan or token.
       * @example iban
       */
      identifier?: string
      /** @description The account numbers and other strings that identify this as a unique bank account. */
      accountIdentifiers?: components['schemas']['AccountIdentifier'][]
      /** @description Additional fields returned by the bank in response to your particular request. The presence and type of metadata are dependent on the bank and generally comprise additional information about the account or the transaction pertinent to your specific use case. You define how this information is used when included in the bank's response. */
      metadata?: components['schemas']['AccountDetailsMetadataEntry'][]
      /** @description Specific information regarding the bank required by the respective Open Banking API standard adopted (CMA9, NextGenPSD2, PolishAPI, or STET). */
      providerAccountDetails?: components['schemas']['ProviderAccountDetails'][]
      /**
       * @description Specifies the bank-defined status of the account (open, closed, active, inactive, <i>etc</i>.)
       * @example Active
       */
      status?: string
      /** @description Specifies the type of account. */
      type?: components['schemas']['AccountDetailsAccountType'][]
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
    }
    /**
     * @description Specifies the type of account.
     * @default INVALID
     * @example SAVINGS
     * @enum {string}
     */
    AccountDetailsAccountType: 'INVALID' | 'OTHER' | 'CHECKING' | 'SAVINGS' | 'LOAN' | 'CARD'
    /** @description Additional fields returned by the bank in response to your particular request. The presence and type of metadata are dependent on the bank and generally comprise additional information about the account or the transaction pertinent to your specific use case. You define how this information is used when included in the bank's response. */
    AccountDetailsMetadataEntry: {
      [key: string]: string | undefined
    }
    /** @description Open Banking features supported for this account. */
    AccountFeatures: {
      /**
       * Format: boolean
       * @description An account available for AIS operations.
       * @default false
       * @example false
       */
      supportsInformation?: boolean
      /**
       * Format: boolean
       * @description An account that can receive money transfers.
       * @default false
       * @example false
       */
      supportsReceivePayment?: boolean
      /**
       * Format: boolean
       * @description An account that can send money transfers.
       * @default false
       * @example false
       */
      supportsSendPayment?: boolean
    }
    /** @description Account numbers and other strings that identify this as a unique bank account. */
    AccountIdentifier: OneOf<
      [
        {
          bankgiro?: components['schemas']['AccountIdentifierBankgiro']
        },
        {
          bban?: components['schemas']['AccountIdentifierBban']
        },
        {
          gbDomestic?: components['schemas']['AccountIdentifierGbDomestic']
        },
        {
          iban?: components['schemas']['AccountIdentifierIban']
        },
        {
          msisdn?: components['schemas']['AccountIdentifierMsisdn']
        },
        {
          pan?: components['schemas']['AccountIdentifierPan']
        },
        {
          plusgiro?: components['schemas']['AccountIdentifierPlusgiro']
        },
        {
          token?: components['schemas']['AccountIdentifierToken']
        }
      ]
    >
    /** @description The identifier for domestic bank accounts in Sweden. */
    AccountIdentifierBankgiro: {
      /**
       * @description The unique identifier for the bank account in Sweden (known in Swedish as Bankgironummer); it consists of 7 or 8 digits; the clearing code is not used.
       * @example 56781234
       */
      bankgiroNumber?: string
    }
    AccountIdentifierBban: {
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban?: string
      /**
       * @description The bank clearing number or BC number is a number used for the identification of financial institutions in Switzerland and Liechtenstein. Bank clearing numbers are connected to the Swiss Interbank Clearing and the EuroSIC system.
       * @example 87654321
       */
      clearingNumber?: string
    }
    /** @description A domestic bank account in the UK. */
    AccountIdentifierGbDomestic: {
      /**
       * @description The unique identifier for the bank account in the UK.
       * @example 12345678
       */
      accountNumber?: string
      /**
       * @description The number assigned to a branch of a bank, typically containing six digits in the "##-##-##" format and most commonly used in the UK and Ireland.
       * @example 12-34-56
       */
      sortCode?: string
    }
    /** @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. */
    AccountIdentifierIban: {
      /**
       * @description The International Bank Account Number. This consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
    }
    /** @description The Mobile Station International Subscriber Director Number (MSISDN) is the user's mobile phone number, used as a unique identifier to enable routing of voice and SMS traffic to and from a specific subscription/device on a wireless/mobile network. */
    AccountIdentifierMsisdn: {
      /**
       * @description The MSISDN is composed of the country code and the national destination code. Ensure you remove the + sign and any 0 before the mobile number.
       * @example 447949123456
       */
      msisdn?: string
    }
    /** @description The Primary Account Number (PAN). The card identifier found on payment cards, such as credit cards and debit cards, as well as stored-value cards, gift cards and other similar card, sometimes referred to as a bank card number. */
    AccountIdentifierPan: {
      /**
       * @description The 14, 15, or 16 digit number generated as a unique identifier for a primary account.
       * @example 4658552288550023
       */
      pan?: string
    }
    /** @description The domestic transaction clearing system in Sweden. The credit transfer function, which is part of <a href="https://www.nordea.com" target="blank">Nordea</a>, and used for mediating payments between accounts held by companies and individuals. */
    AccountIdentifierPlusgiro: {
      /**
       * @description The account number (minimum 2 and maximum 8 digits) for a PlusGiro account. The clearing code is not used.
       * @example 987654
       */
      plusgiroNumber?: string
    }
    /** @description The primary account number; the card identifier found on payment cards, such as credit cards and debit cards, as well as stored-value cards, gift cards and other similar card, sometimes referred to as a bank card number. */
    AccountIdentifierToken: {
      /**
       * @description The bank account identifier for a linked account used by Token.io's Bank Integration Account Linking Service.
       * @example a:b6037206ca7311ed:afa1
       */
      accountId?: string
      /**
       * @description The Token.io-generated member id for the user/account holder.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      memberId?: string
    }
    /** @description Contains information about each refund initiation record in the list. */
    RefundInfo: {
      account?: components['schemas']['AccountIdentifier']
      /**
       * @description Name of the account.
       * @example John A Smith
       */
      name?: string
    }
    /** @description The complete postal address of a party. */
    AddressInfo: {
      /**
       * @description Name of the city as given in postal addresses of the building/area.
       * @example Berlin
       */
      city?: string
      /**
       * @description A special kind of house number. This relates to a settlement instead of a street. Conscription numbers are in use in some parts of Europe, sometimes together with street-related house numbers, which are also called orientation numbers.
       * @example 2831
       */
      conscriptionNumber?: string
      /**
       * @description A nation with its own government, occupying a particular territory containing the address.
       * @example Germany
       */
      country?: string
      /**
       * @description A defined district within the city or country containing the address.
       * @example Friedrichshain
       */
      district?: string
      /**
       * @description House numbers (range or list) of flats behind a door.
       * @example 21A - 21C
       */
      flats?: string
      /**
       * @description This is used for a full-text, often multi-line address if you find the structured address fields unsuitable for denoting the address of this particular location. Typically such strings cannot be parsed by software.
       * @example Fifth house on the left after the village oak, Smalltown, Smallcountry
       */
      full?: string
      /**
       * @description A small settlement. In different jurisdictions and geographies, a hamlet may be the size of a town, village, or parish, or may be considered to be a smaller settlement or subdivision or satellite entity to a larger settlement.
       * @example Botzowviertel
       */
      hamlet?: string
      /**
       * @description The name of a house. Sometimes used in countries like England instead of (or in addition to) a house number.
       * @example Grossen Blauen Haus
       */
      houseName?: string
      /**
       * @description The house number (may contain letters, dashes, or other characters). This identifies a single building with multiple addresses.
       * @example 123
       */
      houseNumber?: string
      /**
       * @description The part of an address which refers to the name of some territorial zone (like an island or square) instead of a street. It should not be included together with `street`.
       * @example Arnswalder Platz
       */
      place?: string
      /**
       * @description An identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
       * @example 10243
       */
      postCode?: string
      /**
       * @description For Canada, uppercase two-letter postal abbreviations, <i>e.g.</i>, BC, AB, ON, QC.
       * @example BC
       */
      province?: string
      /**
       * @description For the US, uppercase two-letter postal abbreviations, <i>e.g.</i>, AK, CA, HI, NY, TX, WY.
       * @example CA
       */
      state?: string
      /**
       * @description the name of the respective street in which the dwelling or business is located or where mail is received.
       * @example Hans-Otto-Strasse
       */
      street?: string
      /**
       * @description A smaller, readily identifiable part of a district.
       * @example Friedrichshain Nord
       */
      subdistrict?: string
      /**
       * @description Suburbs and localities are the names of geographic subdivisions of urban areas in Australia.
       * @example Altona Meadows Suburb
       */
      suburb?: string
    }
    /** @description Alternate or additional member identification information. */
    Alias: {
      /**
       * @description Identifies a member created under the realm of a specific bank.
       * @example m:vHZUAMFt6s64vn6aDyMiwBYbPDN:5zKtXEAq
       */
      realmId?: string
      type?: components['schemas']['Type']
      /**
       * @description The alias string representing the type.
       * @example e-sales@token.io
       */
      value?: string
    }
    /**
     * @description The types of alias available.
     * @default INVALID
     * @example EMAIL
     * @enum {string}
     */
    Type: 'INVALID' | 'UNKNOWN' | 'EMAIL' | 'PHONE' | 'DOMAIN' | 'BANK' | 'CUSTOM' | 'EIDAS'
    /**
     * @description Specifies the API standard adopted by the bank.
     * @default Invalid_Standard
     * @example UK_Open_Banking_Standard
     * @enum {string}
     */
    OpenBankingStandard:
      | 'Invalid_Standard'
      | 'UK_Open_Banking_Standard'
      | 'Starling_Bank_API'
      | 'PolishApi'
      | 'STET_PSD2_API'
      | 'Citi_Handlowy_PSD2_API'
      | 'NextGenPsd2'
      | 'Slovak_Banking_API_Standard'
      | 'Czech_Open_Banking_Standard'
      | 'American_Express_PSD2_API'
      | 'Budapest_Bank_API'
    /** @description Contains the page information for response content. */
    Paging: {
      /**
       * Format: int32
       * @description The index of the current page.
       * @example 15
       */
      page?: number
      /**
       * Format: int32
       * @description The number of records per page.
       * @example 80
       */
      pageCount?: number
      /**
       * Format: int32
       * @description The number of total pages.
       * @example 32
       */
      perPage?: number
      /**
       * Format: int32
       * @description The number of total records.
       * @example 2500
       */
      totalCount?: number
    }
    /** @description Contains bank-dependent formatting constraints indicating allowable characters, if any. */
    FieldFormatInformation: {
      /**
       * @description The regex specifying allowed characters. See <a href=\"https://regexr.com/3cr6f\" target=\"_blank\">https://regexr.com/3cr6f</a>https://regexr.com/3cr6f for more details.
       * @example ^[A-Za-z0-9?:()./,'+\-\s]*$
       */
      constraint?: string
      /**
       * @description The name of the field in the Token.io `requestpayload` with bank-imposed formatting constraints.
       * @example description
       */
      name?: string
      /**
       * @description The `object.field` path indicating the constrained field's position in the Token.io `requestPayload`.
       * @example credentials.credentials1
       */
      path?: string
    }
    /** @description Contains the fields required by the bank, which the TPP must populate in the token request, where applicable. */
    MandatoryFields: {
      access?: components['schemas']['MandatoryFieldsAccess']
      standingOrder?: components['schemas']['MandatoryFieldsStandingOrder']
      transfer?: components['schemas']['MandatoryFieldsTransfer']
    }
    /** @description Specifies the mandatory fields for an access token request. */
    MandatoryFieldsAccess: {
      domestic?: components['schemas']['MandatoryFieldsAccessDomestic']
      international?: components['schemas']['MandatoryFieldsAccessInternational']
    }
    /** @description Specifies the mandatory fields for an access request. */
    MandatoryFieldsAccessDomestic: {
      /**
       * @description The full path to the field within the domestic access request.
       * @example [
       *   "access_body.instructions.access_destinations.customer_data.legal_names",
       *   "access_body.instructions.source.bic",
       *   "access_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the domestic access request.
       * @example access_body.instructions.metadata.provider_access_metadata.polish_api_access_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the domestic access request.
       * @example access_body.instructions.metadata.provider_access_metadata.stet_access_metadata.beneficiary.creditor_agent
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for an international access request. */
    MandatoryFieldsAccessInternational: {
      /**
       * @description The full path to the field within the international access request.
       * @example [
       *   "access_body.instructions.access_destinations.customer_data.legal_names",
       *   "access_body.instructions.source.bic",
       *   "access_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the access request.
       * @example access_body.instructions.metadata.provider_access_metadata.polish_api_access_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the access request.
       * @example access_body.instructions.metadata.provider_access_metadata.stet_access_metadata.beneficiary.creditor_agent
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for a domestic transfer. */
    MandatoryFieldsTransferDomestic: {
      /**
       * @description The full path to the field within the domestic transfer.
       * @example [
       *   "transfer_body.instructions.transfer_destinations.customer_data.legal_names",
       *   "transfer_body.instructions.source.bic",
       *   "transfer_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the domestic transfer.
       * @example transfer_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the domestic transfer.
       * @example transfer_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for an international transfer. */
    MandatoryFieldsTransferInternational: {
      /**
       * @description The full path to the field within the international transfer.
       * @example [
       *   "transfer_body.instructions.transfer_destinations.customer_data.legal_names",
       *   "transfer_body.instructions.source.bic",
       *   "transfer_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the international transfer.
       * @example transfer_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the international transfer.
       * @example transfer_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for a domestic standing order. */
    MandatoryFieldsStandingOrderDomestic: {
      /**
       * @description The full path to the field within the domestic standing order.
       * @example [
       *   "standing_order_body.instructions.transfer_destinations.customer_data.legal_names",
       *   "standing_order_body.instructions.source.bic",
       *   "standing_order_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the domestic standing order.
       * @example standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the domestic standing order.
       * @example standing_order_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for an international standing order. */
    MandatoryFieldsStandingOrderInternational: {
      /**
       * @description The full path to the field within the international standing order.
       * @example [
       *   "standing_order_body.instructions.transfer_destinations.customer_data.legal_names",
       *   "standing_order_body.instructions.source.bic",
       *   "standing_order_body.instructions.source.account_identifier"
       * ]
       */
      fields?: string[]
      /**
       * @description Lists other Polish API fields which must be included in the international token request.
       * @example standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
       */
      PolishApiFields?: string[]
      /**
       * @description Lists other STET API fields which must be included in the international token request.
       * @example standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
       */
      StetFields?: string[]
    }
    /** @description Specifies the mandatory fields for a standing order token request. */
    MandatoryFieldsStandingOrder: {
      domestic?: components['schemas']['MandatoryFieldsStandingOrderDomestic']
      international?: components['schemas']['MandatoryFieldsStandingOrderInternational']
    }
    /** @description Specifies the mandatory fields for a transfer token request. */
    MandatoryFieldsTransfer: {
      domestic?: components['schemas']['MandatoryFieldsTransferDomestic']
      international?: components['schemas']['MandatoryFieldsTransferInternational']
    }
    /** @description Contains optional provider blob objects supporting the transfer/transaction. */
    Attachment: {
      /**
       * @description The unique numeric value that references blob data.
       * @example 7124783462147
       */
      blobId?: string
      /**
       * @description The name of the attachment. This can contain any combination of characters.
       * @example 3Etyewchj27
       */
      name?: string
      /**
       * @description Specifies the type of attachment, <i>e.g.</i>, image, audio, multimedia, or binary executable code.
       * @example Image
       */
      type?: string
    }
    /** @description The balance currency and value. */
    Money: {
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
      /**
       * @description The transaction amount with up to four digits after the decimal point.
       * @example 10.23
       */
      value: string
    }
    /** @description The balance currency and value. */
    MoneyRequest: {
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      /**
       * @description The transaction amount with up to four digits after the decimal point.
       * @example 10.23
       */
      value?: string
    }
    /** @description Contains information used in embedded authentication flows. */
    CredentialField: {
      /**
       * @description The description of the credentials.
       * @example User authentication
       */
      description?: string
      /**
       * @description The display name for the credentials.
       * @example Client ID
       */
      displayName?: string
      /**
       * @description The Flicker code displayed to the user.
       * @example FLICKERCODE
       */
      flickerCode?: string
      /**
       * @description Specifies the identifier to be used when passing the value for this credential.
       * @example clientId
       */
      id?: string
      /**
       * @description A Base64 representation of an image displayed to the user.
       * @example YWJAeXoyWhAeXohteQ
       */
      image?: string
      /**
       * @description A list of options for the user to select from. For example, it can be an SCA method choice (SMS message, phone call <i>etc</i>.), or confirm/decline options for a confirmation page. The customer sends one of the values back to Token.io with the corresponding id.
       * @example [
       *   "SMS",
       *   "Phone call"
       * ]
       */
      options?: string[]
      type?: components['schemas']['CredentialFieldType']
    }
    /**
     * @description Specifies the type of credential.
     * @default INVALID
     * @example PASSWORD
     * @enum {string}
     */
    CredentialFieldType:
      | 'INVALID'
      | 'FIELD'
      | 'PASSWORD'
      | 'PSU_MESSAGE'
      | 'IMAGE'
      | 'FLICKER'
      | 'DECOUPLED'
      | 'CONFIRMATION'
    /** @description Specific information regarding the bank required by the respective Open Banking API standard adopted (CMA9, NextGenPSD2, PolishAPI, or STET). */
    ProviderAccountDetails: {
      cma9AccountDetails?: components['schemas']['Cma9AccountDetails']
      nextGenPsd2AccountDetails?: components['schemas']['NextGenPsd2AccountDetails']
      polishApiAccountDetails?: components['schemas']['PolishApiAccountDetails']
      stetAccountDetails?: components['schemas']['StetAccountDetails']
    }
    /** @description Specific information regarding the bank required by the respective Open Banking API standard adopted. */
    ProviderTransactionDetails: {
      budapestApiTransactionDetails?: components['schemas']['BudapestApiTransactionDetails']
      cma9ApiTransactionDetails?: components['schemas']['Cma9ApiTransactionDetails']
      czechApiTransactionDetails?: components['schemas']['CzechApiTransactionDetails']
      nextGenPsd2TransactionDetails?: components['schemas']['NextGenPsd2TransactionDetails']
      polishApiTransactionDetails?: components['schemas']['PolishApiTransactionDetails']
      slovakApiTransactionDetails?: components['schemas']['SlovakApiTransactionDetails']
      stetTransactionDetails?: components['schemas']['StetTransactionDetails']
    }
    /** @description Information about the transfer. */
    ProviderTransferDetails: {
      /**
       * @description A provider-specific reference id generated upon TPP submission.
       * @example uXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu
       */
      id?: string
      /**
       * @description The status of user authentication.
       * @default INVALID
       * @example AUTHENTICATED
       * @enum {string}
       */
      status?: 'INVALID' | 'AUTHENTICATED' | 'AUTHENTICATION_FAILED'
    }
    /** @description The transfer metadata required under the Open Banking API standard adopted by the bank. */
    ProviderTransferMetadata: OneOf<
      [
        {
          cma9TransferMetadata?: components['schemas']['Cma9TransferMetadata']
        },
        {
          nextGenPsd2TransferMetadata?: components['schemas']['NextGenPsd2TransferMetadata']
        },
        {
          polishApiTransferMetadata?: components['schemas']['PolishApiTransferMetadata']
        },
        {
          stetTransferMetadata?: components['schemas']['StetTransferMetadata']
        }
      ]
    >
    /**
     * @description This status indicates whether the SCA process succeeded or failed.
     * @default INVALID
     * @example AUTHENTICATED
     * @enum {string}
     */
    ScaStatus: 'INVALID' | 'AUTHENTICATED' | 'AUTHENTICATION_FAILED' | 'DECLINED_BY_PSU'
    /** @description The unique provider account identifier required under the Budapest Bank API standards. */
    BudapestApiAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
    }
    /** @description Provider transaction details required under the Budapest Bank API standards. */
    BudapestApiTransactionDetails: {
      creditorAccount?: components['schemas']['BudapestApiAccountReference']
      /**
       * @description The name of the creditor/payee.
       * @example ACME Company
       */
      creditorName?: string
      debtorAccount?: components['schemas']['BudapestApiAccountReference']
    }
    /** @description Card instrument details required under the <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/432800080/CMA+SQM+API+Specification+-+v1.0.1" target="_blank">CMA9 API standard</a>. */
    Cma9CardInstrument: {
      /** @example a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC */
      accountIdentification?: string
      authorizationType?: string
      cardSchemeName?: string
      name?: string
    }
    /** @description Provider account details required under the <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/432800080/CMA+SQM+API+Specification+-+v1.0.1" target="_blank">CMA9 API standard</a>. */
    Cma9AccountDetails: {
      accountType?: components['schemas']['Cma9AccountDetailsAccountType']
      accountSubtype?: components['schemas']['Cma9AccountDetailsAccountSubtype']
      address?: components['schemas']['Cma9AccountDetailsAddress'][]
      /**
       * @description A description of the account type.
       * @example Personal
       */
      description?: string
      /**
       * @description The electronic mail address associated with the account.
       * @example john.smith@email.com
       */
      emailAddress?: string
      /**
       * @description The mobile phone number associated with the account.
       * @example 07999 123456
       */
      mobile?: string
      /**
       * @description Name of the account, as assigned by the account servicing institution. The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
       * @example John Smith
       */
      name?: string
      /**
       * @description The unique and immutable identifier used to identify the TPP resource; this identifier has no meaning to the account owner.
       * @example 68973542
       */
      partyId?: string
      /**
       * @description The number assigned by an agent to identify its customer.
       * @example 24354657
       */
      partyNumber?: string
      partyType?: components['schemas']['Cma9AccountDetailsPartyType']
      /**
       * @description The collection of information that identifies a phone number, as defined by the telecom service.
       * @example 020 123 4567
       */
      phone?: string
    }
    /**
     * @description This specifies the sub type of the account.
     * @default INVALID_ACCOUNT_SUBTYPE
     * @example CURRENT_ACCOUNT
     * @enum {string}
     */
    Cma9AccountDetailsAccountSubtype:
      | 'INVALID_ACCOUNT_SUBTYPE'
      | 'CHARGE_CARD'
      | 'CREDIT_CARD'
      | 'CURRENT_ACCOUNT'
      | 'EMONEY'
      | 'LOAN'
      | 'MORTGAGE'
      | 'PREPAID_CARD'
      | 'SAVINGS'
    /**
     * @description Specifies the type of account.
     * @default INVALID_ACCOUNT_TYPE
     * @example PERSONAL_ACCOUNT
     * @enum {string}
     */
    Cma9AccountDetailsAccountType: 'INVALID_ACCOUNT_TYPE' | 'BUSINESS_ACCOUNT' | 'PERSONAL_ACCOUNT'
    /**
     * @description Specifies the type of address.
     * @default INVALID_ADDRESS_TYPE
     * @example BUSINESS
     * @enum {string}
     */
    Cma9AccountDetailsAddressType:
      | 'INVALID_ADDRESS_TYPE'
      | 'BUSINESS'
      | 'CORRESPONDENCE'
      | 'DELIVERYTO'
      | 'MAILTO'
      | 'POBOX'
      | 'POSTAL'
      | 'RESIDENTIAL'
      | 'STATEMENT'
    /** @description The complete postal address of a party. */
    Cma9AccountDetailsAddress: {
      address?: components['schemas']['AddressInfo']
      addressType?: components['schemas']['Cma9AccountDetailsAddressType']
    }
    /**
     * @description The party type, in a coded form.
     * @default INVALID_PARTY_TYPE
     * @example JOINT
     * @enum {string}
     */
    Cma9AccountDetailsPartyType: 'INVALID_PARTY_TYPE' | 'DELEGATE' | 'JOINT' | 'SOLE'
    /** @description Provider transaction details required under the <a href=https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1 target="_blank">CMA9 API standard</a>. */
    Cma9ApiTransactionDetails: {
      creditorAccount?: components['schemas']['Cma9CreditorAccount']
      creditorAgent?: components['schemas']['Cma9CreditorAgent']
      debtorAccount?: components['schemas']['Cma9DebtorAccount']
      debtorAgent?: components['schemas']['Cma9DebtorAgent']
      merchantDetails?: components['schemas']['Cma9MerchantDetails']
    }
    /** @description Transfer metadata required under the <a href=https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1 target="_blank">CMA9 API standard</a>. */
    Cma9TransferMetadata: {
      /** @description A short reference field to share an invoice or receipt number for your records; this reference is important to the debtor (this could be an internal reference id against the transaction) but it Is NOT the reference information that will be primarily populated on the statement of the creditor (beneficiary). */
      endToEndIdentification?: string
      /** @description The TPP-generated, unique transaction id passed to the bank (mandatory) but does not have to go any further in the payment flow. The expectation is that this is unique indefinitely across all time periods by including a date or date time element to the field, or by inserting a unique id. */
      instructionIdentification?: string
      risk?: components['schemas']['Cma9Risk']
    }
    /** @description Specifies the payee's account with the creditor. */
    Cma9CreditorAccount: {
      /** @description The payee's creditor account id or number. */
      accountIdentification?: string
      /** @description The name of the payee listed for the creditor account. */
      creditorName?: string
      /**
       * @description The creditor-defined recurring payment scheme name.
       * @example Purchase instalment plan
       */
      schemeName?: string
      /** @description Secondary identification required for the transaction. */
      secondaryIdentification?: string
    }
    /** @description The unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme. */
    Cma9CreditorAgent: {
      creditorAgentAddress?: components['schemas']['Cma9DeliveryAddress']
      /**
       * @description The name of financial institution servicing an account for the creditor.
       * @example Creditor bank
       */
      creditorAgentName?: string
      /**
       * @description The unique identifier for financial institution servicing an account for the creditor.
       * @example 98765432
       */
      identification?: string
      /**
       * @description The creditor-defined recurring payment scheme name.
       * @example Purchase instalment plan
       */
      schemeName?: Record<string, never>
    }
    /** @description The source account information for the payment, the payer's bank account. */
    Cma9DebtorAccount: {
      /** @description The payer's debtor account id or number. */
      accountIdentification?: string
      cardInstrument?: components['schemas']['Cma9CardInstrument']
      /** @description The name of the payee listed for the creditor account. */
      debtorName?: string
      /**
       * @description The creditor-defined recurring payment scheme name.
       * @example Purchase instalment plan
       */
      schemeName?: string
      /** @description Additional identification required. */
      secondaryIdentification?: string
    }
    /** @description The unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme. */
    Cma9DebtorAgent: {
      debtorAgentAddress?: components['schemas']['Cma9DeliveryAddress']
      /**
       * @description The name of financial institution servicing an account for the debtor.
       * @example Debtor bank.
       */
      debtorAgentName?: string
      /** @description The unique identifier for financial institution servicing an account for the debtor. */
      identification?: string
      /**
       * @description The creditor-defined recurring payment scheme name.
       * @example Purchase instalment plan
       */
      schemeName?: string
    }
    /** @description Specifies the recipient's delivery address details. */
    Cma9DeliveryAddress: {
      /**
       * @description Specifies the delivery address using multiple lines, as necessary.
       * @example [
       *   "Flat 2, The Red Lodge, 1 High Street"
       * ]
       */
      addressLine?: string[]
      /**
       * @description Specifies the type of address.
       * @default INVALID_ADDRESS_TYPE
       * @example BUSINESS
       * @enum {string}
       */
      addressType?:
        | 'INVALID_ADDRESS_TYPE'
        | 'BUSINESS'
        | 'CORRESPONDENCE'
        | 'DELIVERYTO'
        | 'MAILTO'
        | 'POBOX'
        | 'POSTAL'
        | 'RESIDENTIAL'
        | 'STATEMENT'
      /**
       * @description The building number within the delivery address.
       * @example 1
       */
      buildingNumber?: string
      /**
       * @description A nation with its own government, occupying a particular territory containing the address.
       * @example UK
       */
      country?: string
      /**
       * @description Identifies a subdivision of a country; for instance, a state, region, or county.
       * @example [
       *   "North Yorkshire"
       * ]
       */
      countrySubDivision?: string[]
      /**
       * @description This <a href="https://openbankinguk.github.io/read-write-api-site3/v3.1.6/resources-and-data-models/pisp/international-payment-consents.html" target="_blank">OBIE specification</a> maps to house number.
       * @example 1
       */
      department?: string
      /**
       * @description An identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
       * @example YO62 5JB
       */
      postCode?: string
      /**
       * @description The name of the respective street or thoroughfare in which the dwelling or business is located or where mail is received.
       * @example High Street
       */
      streetName?: string
      /**
       * @description This <a href="https://openbankinguk.github.io/read-write-api-site3/v3.1.6/resources-and-data-models/pisp/international-payment-consents.html" target="_blank">OBIE specification</a> maps to flats.
       * @example Flat 2
       */
      subDepartment?: string
      /**
       * @description The name of a built-up area with defined boundaries and a local government.
       * @example York
       */
      townName?: string
    }
    Cma9MerchantDetails: {
      /**
       * @description The category code conforming to <a href="https://www.iso.org/standard/33365.html" target="_blank">ISO 18245</a>, relating to the type of services or goods provided by the merchant. A list of codes can be purchased <a href="https://www.iso.org/standard/79450.html" target="_blank">here</a>."
       * @example 5699-V
       */
      merchantCategoryCode?: string
      /**
       * @description The name of the merchant.
       * @example Merchants R US
       */
      merchantName?: string
    }
    /**
     * @description Specifies the context of the payment.
     * @default INVALID_PAYMENT_CONTEXT_CODE
     * @example ECOMMERCE_GOODS
     * @enum {string}
     */
    Cma9PaymentContextCode:
      | 'INVALID_PAYMENT_CONTEXT_CODE'
      | 'BILL_PAYMENT'
      | 'ECOMMERCE_GOODS'
      | 'ECOMMERCE_SERVICES'
      | 'OTHER'
      | 'PARTY_TO_PARTY'
    /** @description Specifies additional details for the risk scoring of payments. */
    Cma9Risk: {
      deliveryAddress?: components['schemas']['Cma9DeliveryAddress']
      /**
       * @description The category code conforming to <a href="https://www.iso.org/standard/33365.html" target="_blank">ISO 18245</a>, relating to the type of services or goods provided by the merchant. A list of codes can be purchased <a href="https://www.iso.org/standard/79450.html" target="_blank">here</a>.
       * @example 5699-V
       */
      merchantCategoryCode?: string
      /**
       * @description The unique customer identifier of the user with the merchant.
       * @example 0000789123
       */
      merchantCustomerIdentification?: string
      paymentContextCode?: components['schemas']['Cma9PaymentContextCode']
    }
    /** @description The unique provider account identifier required under the Czech Standard for Open Banking. */
    CzechApiAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban?: string
    }
    /** @description Provider transaction details required under the <a href="https://cbaonline.cz/upload/838-czech-standard-for-open-banking-v3-0.pdf" target="_blank">Czech Standard for Open Banking</a>. */
    CzechApiTransactionDetails: {
      creditorAccount?: components['schemas']['CzechApiAccountReference']
      /** @description The name of the creditor/payee. */
      creditorName?: string
      debtorAccount?: components['schemas']['CzechApiAccountReference']
      /** @description The name of the debtor/payer. */
      debtorName?: string
    }
    /** @description The unique provider account identifier required under the <a href="https://www.berlin-group.org/nextgenpsd2-downloads" target="_blank">NextGenPSD2 standard</a>. */
    NextGenPsd2AccountReference: {
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length; 10 to 30 characters comprising the bank code (including the account number) and a checksum key. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
      /** @description The masked primary account number; tokenised identification for data protection. */
      maskedPan?: string
      /**
       * @description The Mobile Station International Subscriber Director Number (MSISDN) is the user's mobile phone number, used as a unique identifier to enable routing of voice and SMS traffic to and from a specific subscription/device on a wireless/mobile network. It's composed of the country code and the national destination code. Ensure you remove the + sign and any 0 before the mobile number.
       * @example 447949123456
       */
      msisdn?: string
      /**
       * @description The primary account number. The card identifier found on payment cards, such as credit cards and debit cards, as well as stored-value cards, gift cards and other similar card, sometimes referred to as a bank card number.
       * @example 4658552288550023
       */
      pan?: string
    }
    /** @description Provider account details required under the <a href="https://www.berlin-group.org/nextgenpsd2-downloads" target="_blank">NextGenPSD2 standard</a>. */
    NextGenPsd2AccountDetails: {
      /** @description The `ExternalCashAccountType1Code` from the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> code. */
      cashAccountType?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      /** @description The details provided by the bank regarding characteristics of the account or characteristics of the relevant card. */
      details?: string
      /** @description In the case of a set of pending card transactions, the relevant cash account the card is set up on; this is the same as the `resourceId` of the relevant cash account. */
      linkedAccounts?: string
      /** @description The bank-defined product name for this account; the proprietary definition. */
      product?: string
      /**
       * @description Specifies the usage of the account (PRIV = private personal account, ORGA = professional account).
       * @example PRIV
       */
      usage?: string
    }
    /** @description Provider transaction details required under the <a href="https://www.berlin-group.org/nextgenpsd2-downloads" target="_blank">NextGenPSD2 standard</a>. */
    NextGenPsd2TransactionDetails: {
      /**
       * @description Additional bank-provided information about the transaction.
       * @example Additional bank information
       */
      additionalInformation?: string
      domain?: components['schemas']['BankTransactionCodeDomain']
      /**
       * @description The identifier for the electronic check, where applicable.
       * @example 4vn6aDyMiwBYbP
       */
      checkId?: string
      creditorAccount?: components['schemas']['NextGenPsd2AccountReference']
      /**
       * @description The creditor/payee identifier provided by the bank.
       * @example 4vn6aDyMiwBYbP
       */
      creditorId?: string
      /**
       * @description The name of the creditor/payee.
       * @example ACME Company
       */
      creditorName?: string
      /** @description The currency exchange rate. */
      currencyExchange?: components['schemas']['NextGenPsd2ReportExchangeRate'][]
      debtorAccount?: components['schemas']['NextGenPsd2AccountReference']
      /**
       * @description The name of the debtor/payer.
       * @example John Smith
       */
      debtorName?: string
      /**
       * @description A short reference field to share an invoice or receipt number for your records; this reference is important to the debtor (could be an internal reference ID against the transaction) but it Is NOT the reference information that will be primarily populated on the statement of the creditor (beneficiary).
       * @example 6aDyMiwB
       */
      endToEndId?: string
      /**
       * @description The identification of the transaction referencing delta function on an application level; same id used within camt.05x messages.
       * @example 72REftaRoiaDYRDU
       */
      entryReference?: string
      /**
       * @description The identifier for mandates; <i>e.g.</i>, a SEPA Mandate id.
       * @example DE452399865089
       */
      mandateId?: string
      /**
       * @description The <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> external purpose code. Purpose Codes are four letter codes which are carried across the payment chain, providing information to all users in the payments chain to indicate the reason a payment is being made. Purpose Codes are one of the policy areas of Enhanced Data that can deliver the benefits of the ISO 20022 payment messaging standard.
       * @example CBLK
       */
      purposeCode?: string
      /**
       * @description Structured remittance information; a reference issued by the seller used to establish a link between the payment of an invoice and the invoice instance.
       * @example REf:taRoiaDY34DU
       */
      remittanceInformationStructured?: string
      /**
       * @description The ultimate party to which the transfer is due.
       * @example ACME GmbH
       */
      ultimateCreditor?: string
      /**
       * @description The ultimate party that owes that owes money to the (ultimate) creditor.
       * @example John Smith
       */
      ultimateDebtor?: string
      /**
       * @description The date, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format, when funds are posted to an account and available for immediate use.
       * @example 2022-03-27T17:00:00.000Z
       */
      valueDate?: string
    }
    /** @description The transfer metadata required under the <a href="https://www.berlin-group.org/nextgenpsd2-downloads" target="_blank">NextGenPSD2 standard</a>. */
    NextGenPsd2TransferMetadata: {
      /** @description A unique and unambiguous identifier for a financial institution, as assigned under an internationally recognised or proprietary identification scheme. */
      creditorAgent?: string
      /** @description The name of the financial institution servicing an account for the creditor. */
      creditorAgentName?: string
      /** @description The unique identifier assigned by the initiating party to unambiguously identify the transaction; this identification is passed on, unchanged, throughout the entire end-to-end chain. */
      endToEndIdentification?: string
      /** @description The information supplied to enable matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system. */
      remittanceInformationStructured?: string
    }
    /** @description The currency exchange rate. */
    NextGenPsd2ReportExchangeRate: {
      /** @description Identifies the forward or spot exchange contract. */
      contractIdentification?: string
      /** @description The rate of exchange between the `sourceCurrencyand` the `targetCurrency`. */
      exchangeRate?: string
      /**
       * @description The date of the FX quote, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-04-05T17:00:00.000Z
       */
      quotationDate?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      sourceCurrency?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      targetCurrency?: string
      /**
       * @description The price of one currency expressed in terms of another currency.
       * @example 1.4 to 1.
       */
      unitCurrency?: string
    }
    /**
     * @description Specifies the type of account holder.
     * @default INVALID_ACCOUNT_HOLDER_TYPE
     * @example INDIVIDUAL
     * @enum {string}
     */
    PolishApiAccountHolderType: 'INVALID_ACCOUNT_HOLDER_TYPE' | 'INDIVIDUAL' | 'CORPORATION'
    /** @description The bank-provided information concerning the relationship between the user and an account. */
    PolishApiAccountPsuRelation: {
      /**
       * Format: int32
       * @description The total value, expressed as a percentage, specifying the user's share of the funds on the account or its liability in the case of credit products; applies to the Owner, Borrower, Guarantor relationship.
       */
      stake?: number
      typeOfProxy?: components['schemas']['PolishApiTypeOfProxy']
      typeOfRelation?: components['schemas']['PolishApiTypeOfRelation']
    }
    /** @description Specifies information about the bank itself. */
    PolishApiBank: {
      /**
       * @description The physical/mailing address of the bank.
       * @example 45, Torunska, Gdansk
       */
      address?: string[]
      /**
       * @description The standard format for business identifier codes (BIC), used to identify banks and financial institutions globally.
       * @example HBUKGB7F261
       */
      bicOrSwift?: string
      /**
       * @description The bank code for foreign transfers.
       * @example BKAFEWFK564
       */
      code?: string
      /**
       * @description The <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case.
       * @example PL
       */
      countryCode?: string
      /**
       * @description The official name of the bank corresponding to its SWIFT/BIC code.
       * @example Polska Bank
       */
      name?: string
    }
    /** @description Specifies information about the bank itself. */
    PolishApiBankAccountInfo: {
      /** @description The physical/mailing address of the bank. */
      address?: string[]
      /**
       * @description The official name of the bank corresponding to its SWIFT/BIC code.
       * @example Polska Bank
       */
      name?: string
    }
    /** @description The currency conversion rate information. */
    PolishApiCurrencyRate: {
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code for the convert-from currency.
       * @example EUR
       */
      fromCurrency?: string
      /**
       * Format: double
       * @description The currency exchange rate.
       */
      rate?: number
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code for the convert-to currency.
       * @example EUR
       */
      toCurrency?: string
    }
    /**
     * @description The urgency classification for delivery.
     * @default INVALID_DELIVERY_MODE
     * @example STANDARD_D2
     * @enum {string}
     */
    PolishApiDeliveryMode:
      | 'INVALID_DELIVERY_MODE'
      | 'STANDARD_D2'
      | 'STANDARD_D1'
      | 'URGENT_D1'
      | 'EXPRESS_D0'
    /** @description Doing Business As (DBA) and/or other names and addresses of the company. */
    PolishApiNameAddress: {
      /** @description The bank-defined name and postal address. */
      value?: string[]
    }
    /** @description Information about the tax payer. */
    PolishApiPayer: {
      /**
       * @description The payer's tax id.
       * @example 444433332211
       */
      payerId?: string
      /**
       * @description The type of tax payer id.
       * @default N
       * @example R
       * @enum {string}
       */
      payerIdType?: 'N' | 'P' | 'R' | '1' | '2' | '3'
    }
    /** @description The provider account details required under the <a href="https://polishapi.org/en/dokumentacja-standardu/" target="_blank">Polish API standard</a>. */
    PolishApiAccountDetails: {
      accountHolderType?: components['schemas']['PolishApiAccountHolderType']
      /** @description Specifies the account owner name. */
      accountNameClient?: string
      auxData?: components['schemas']['PolishApiAccountDetailsAuxDataEntry']
      bank?: components['schemas']['PolishApiBankAccountInfo']
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      nameAddress?: components['schemas']['PolishApiNameAddress']
      /** @description The bank-provided information concerning the relationship between the user and an account. */
      psuRelations?: components['schemas']['PolishApiAccountPsuRelation'][]
    }
    /** @description The bank-defined auxiliary data associated with the account. */
    PolishApiAccountDetailsAuxDataEntry: {
      [key: string]: string | undefined
    }
    /** @description The provider transaction details required under the <a href="https://polishapi.org/en/dokumentacja-standardu/" target="_blank">Polish API standard</a>. */
    PolishApiTransactionDetails: {
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code for the account's currency.
       * @example EUR
       */
      accountBaseCurrency?: string
      auxData?: components['schemas']['PolishApiTransactionDetails.AuxDataEntry']
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code for the transaction's currency.
       * @example EUR
       */
      baseCurrency?: string
      cardInfo?: components['schemas']['PolishApiTransactionInfoCard']
      /** @description The transaction currency valuation date. */
      currencyDate?: string
      /**
       * @description The date the bank hold expires, in < <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-11-12T17:00:00.000Z
       */
      holdExpirationDate?: string
      initiator?: components['schemas']['PolishApiNameAddress']
      /**
       * @description The code for each transaction or operation performed by card.
       * @example 5699-V
       */
      mcc?: string
      /** @description The account balance after the transaction. */
      postTransactionBalance?: string
      recipient?: components['schemas']['PolishApiSenderRecipient']
      /**
       * @description The date, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format, when the transaction was rejected.
       * @example 2022-10-23T17:00:00.000Z
       */
      rejectionDate?: string
      /** @description The reason the transaction was rejected. */
      rejectionReason?: string
      sender?: components['schemas']['PolishApiSenderRecipient']
      taxInfo?: components['schemas']['PolishApiTransactionInfoTax']
      /**
       * @description The name of the third-party provider.
       * @example Mario's Pizzas
       */
      tppName?: string
      /**
       * @description The TPP's unique transaction Identifier.
       * @example esaWvvr4l32iaDRqvrekkfwe212vsfvkcddEaVFaVR:4DVLaMVWER4VC6b
       */
      tppTransactionId?: string
      /**
       * @description The date of the transaction operation, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-11-30T17:00:00.000Z
       */
      tradeDate?: string
      transactionRate?: components['schemas']['PolishApiCurrencyRate'][]
      /**
       * @description The type of transaction.
       * @default CREDIT
       * @example CREDIT
       * @enum {string}
       */
      transactionType?: 'CREDIT' | 'DEBIT'
      /** @description The unique identifier of the payment instrument used to execute the transaction/payment instrument id. */
      usedPaymentInstrumentId?: string
      zusInfo?: components['schemas']['PolishApiTransactionInfoZus']
    }
    /** @description The bank-defined auxiliary data associated with the account. */
    'PolishApiTransactionDetails.AuxDataEntry': {
      [key: string]: string | undefined
    }
    /** @description Transfer metadata required under the <a href="https://polishapi.org/en/dokumentacja-standardu/" target="blank">Polish API standard</a>. */
    PolishApiTransferMetadata: {
      deliveryMode?: components['schemas']['PolishApiDeliveryMode']
      /**
       * Format: boolean
       * @description Indicates whether payment should be held until confirmation of delivery.
       * @default false
       * @example false
       */
      hold?: boolean
    }
    /** @description Information about the recipient. */
    PolishApiSenderRecipient: {
      /** @description The virtual account number of the recipient/virtual account name. */
      accountMassPayment?: string
      /**
       * @description The recipient's account number.
       * @example 87654321
       */
      accountNumber?: string
      bank?: components['schemas']['PolishApiBank']
      nameAddress?: components['schemas']['PolishApiNameAddress']
    }
    /** @description The information associated with payer social security; <i>i.e.</i>, Polish Security Institution (ZUS). */
    PolishApiSocialSecurityPayer: {
      /** @description The payer's additional identification number. */
      additionalPayerId?: string
      /** @description The type of additional payer id. */
      additionalPayerIdType?: string
      /**
       * @description The payer's tax identification number.
       * @example 444433332211
       */
      nip?: string
    }
    /** @description The information about the card used in/for the transaction. */
    PolishApiTransactionInfoCard: {
      /**
       * @description The name of the cardholder.
       * @example Piotr Brama
       */
      cardHolder?: string
      /**
       * @description The card account number.
       * @example 5687243201834817
       */
      cardNumber?: string
    }
    /** @description The data for a tax transfer to the Tax Office or Customs Chamber. */
    PolishApiTransactionInfoTax: {
      /**
       * @description The data for a tax transfer to the Tax Office or Customs Chamber.
       * @example 49DtA9CoF9qYzh77FA9nVrCn2jia:5zKtXEAq
       */
      formCode?: string
      /**
       * @description The identifier of the liability from which the tax is due; <i>e.g.</i>, decision, executive title, resolution.
       * @example DECISION
       */
      obligationId?: string
      payerInfo?: components['schemas']['PolishApiPayer']
      /**
       * @description The tax period number.
       * @example 11
       */
      periodId?: string
      /**
       * @description The tax period type.
       * @example Month
       */
      periodType?: string
      /**
       * Format: int32
       * @description The tax year (YYYY).
       * @example 2022
       */
      year?: number
    }
    /** @description Data information for transfers to <a href="https://www.zus.pl" target="_blank">ZUS</a>. */
    PolishApiTransactionInfoZus: {
      /** @description The declaration number/contribution identifier. */
      contributionId?: string
      /** @description The declaration period/contribution period in MMYYYY format. */
      contributionPeriod?: string
      /** @description The contribution type. */
      contributionType?: string
      /** @description The execution title number/obligation identifier or number. */
      obligationId?: string
      payerInfo?: components['schemas']['PolishApiSocialSecurityPayer']
      /** @description The payment type identifier. */
      paymentTypeId?: string
    }
    /**
     * @description The type of user's power of attorney for the payment account; required when the relationship type is an account representative.
     * @default INVALID_TYPE_OF_PROXY
     * @example GENERAL
     * @enum {string}
     */
    PolishApiTypeOfProxy: 'INVALID_TYPE_OF_PROXY' | 'GENERAL' | 'SPECIAL' | 'ADMINISTRATOR' | 'USER'
    /**
     * @description The type of relation between the user and the account.
     * @default INVALID_TYPE_OF_RELATION
     * @example OWNER
     * @enum {string}
     */
    PolishApiTypeOfRelation:
      | 'INVALID_TYPE_OF_RELATION'
      | 'OWNER'
      | 'BORROWER'
      | 'GUARANTOR'
      | 'PROXY_OWNER'
      | 'BENEFICIARY'
      | 'TRUSTEE'
    /** @description Information about the payee/creditor's account. */
    slovakApiCreditorAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban?: string
    }
    /** @description Information about the payer/debtor's account. */
    slovakApiDebtorAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban?: string
    }
    /** @description Provider transaction details required under the <a href="https://www.sbaonline.sk/projekt/slovak-banking-api-standard/" target="_blank">Slovak Banking API Standard</a>. */
    SlovakApiTransactionDetails: {
      creditorAccount?: components['schemas']['slovakApiCreditorAccountReference']
      /** @description The name of creditor/payee. */
      creditorName?: string
      debtorAccount?: components['schemas']['slovakApiDebtorAccountReference']
      /** @description The name of the debtor/payer. */
      debtorName?: string
    }
    /** @description Bank-defined account identifiers. */
    StetAccountIdentification: {
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      other?: components['schemas']['StetGenericIdentification']
    }
    /** @description Information about the payee/creditor's account. */
    StetCreditorAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
    }
    /** @description Information about the payer/debtor's account. */
    StetDebtorAccountReference: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
    }
    /** @description The creditor or payee receiving the transfer. */
    StetBeneficiary: {
      creditor?: components['schemas']['StetPartyIdentification']
      creditorAccount?: components['schemas']['StetAccountIdentification']
      creditorAgent?: components['schemas']['StetFinancialInstitutionIdentification']
      /** @description The unique identification of an account, a person, or an organisation assigned by an issuer. */
      id?: string
    }
    /** @description Identifies a member within a clearing system; to be used for certain international credit transfers in order to identify the beneficiary bank. */
    StetClearingSystemMemberIdentification: {
      /** @description The specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed. */
      clearingSystemId?: string
      /**
       * @description Identification of a member of a clearing system.
       * @example m:49DtA9CoF9qYzh77FA9nVrCn2jia:5zKtXEAq
       */
      memberId?: string
    }
    /** @description The unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme. */
    StetFinancialInstitutionIdentification: {
      /** @description The code allocated to a financial institution by the <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a> Registration Authority as described in <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a> "Banking - Banking telecommunication messages - Business identification code (BIC)". */
      bicFi?: string
      clearingSystemMemberId?: components['schemas']['StetClearingSystemMemberIdentification']
      /**
       * @description The name by which the party is known and which is usually used to identify that party.
       * @example Credit Bureau
       */
      name?: string
      postalAddress?: components['schemas']['StetPostalAddressCreditor']
    }
    /** @description Bank-defined account information. */
    StetGenericIdentification: {
      /** @description The alias of the account. */
      identification?: string
      /** @description The entity that assigned the identification; country code or any organisation name or identifier that can be recognized by both parties. */
      issuer?: string
      /** @description The name of the identification scheme. Possible values for the scheme name, partially based on <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> external code list, are (a) BANK (BankPartyIdentification): Unique and unambiguous assignment made by a specific bank or similar financial institution to identify a relationship as defined between the bank and its client; (b) COID (CountryIdentificationCode) : Country authority given organisation identification; <i>e.g.</i>, corporate registration number; (c) SREN (SIREN): 9-digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation in France; (d) SRET (SIRET): 14-digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation unit in France; consists of the SIREN number, followed by a five digit classification number, to identify the local geographical unit of that entity; (e) NIDN (NationalIdentityNumber): assigned by an authority to identify the national identity number of a person. Other values are also permitted, for instance: - OAUT (OAUTH2): OAUTH2 access token that is owned by the Payment Initiation Service Provider (PISP) being also an Account Information Service Provider (AISP) and that can be used in order to identify the user - CPAN (CardPan): Card PAN. */
      schemeName?: string
    }
    /** @description The <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> information about the party; this can be either a person or an organisation. */
    StetPartyIdentification: {
      /**
       * @description The name by which the party is known and which is usually used to identify that party.
       * @example John Smith
       */
      name?: string
      organisationId?: components['schemas']['StetGenericIdentification']
      postalAddress?: components['schemas']['StetPostalAddress']
      privateId?: components['schemas']['StetGenericIdentification']
    }
    /** @description A set of elements used to further specify the type of transaction. */
    StetPaymentTypeInformation: {
      /**
       * @description Specifies the high level purpose of the instruction based on a set of pre-defined categories; used by the initiating party to provide information concerning the processing of the payment and is likely to trigger special processing by any of the agents involved in the payment chain. Available values: <ul><li>CASH — a general cash management instruction</li><li>CORT — the transaction is related to settlement of a trade, <i>e.g.</i>, FX or securities</li><li>DVPM — pre-advises the account servicer of a forthcoming deliver-against-payment instruction</li></ul>
       * @default CASH
       * @example DVPM
       * @enum {string}
       */
      categoryPurpose?: 'CASH' | 'CORT' | 'DVPM'
      /**
       * @description Indicates the urgency or order of importance the instructing party would like to apply to processing; can be ignored for SCTInst (SEPA Instant).
       * @example SAMEDAY
       */
      instructionPriority?: string
      /**
       * @description Used to specify a local instrument, local clearing option and/or further qualify the service or service level. For example, INST is used to ask for SEPA instant Payment (SCTInst). For International payments, this field may be valued with one of the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> external codes to specify which payment instrument should be used by the creditor's bank.
       * @example INST
       */
      localInstrument?: string
      /**
       * @description Only SEPA is allowed.
       * @example SEPA
       */
      serviceLevel?: string
    }
    /** @description Contains the mailing address of the creditor. */
    StetPostalAddress: {
      /** @description Up to 4 lines that capture the mailing address. */
      addressLine?: string[]
      /**
       * @description A nation with its own government, occupying a particular territory containing the address.
       * @example La France
       */
      country?: string
    }
    /** @description Contains the mailing address of the creditor. */
    StetPostalAddressCreditor: {
      /** @description Up to 4 lines that capture the mailing address. */
      addressLine?: string[]
      /**
       * @description A nation with its own government, occupying a particular territory containing the address.
       * @example La France
       */
      country?: string
    }
    /** @description Contains the list of needed regulatory reporting codes for international payments. */
    StetRegulatoryReportingCodes: {
      /** @description Regulatory and statutory codes provided by the NCA. */
      regulatoryReportingCode?: string[]
    }
    /** @description The provider account details required under the <a href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API standard</a>. */
    StetAccountDetails: {
      accountId?: components['schemas']['StetAccountIdentification']
      /** @description Specifies the type of account. */
      cashAccountType?: string
      /** @description The bank-defined characteristics of the account or characteristics of the card. */
      details?: string
      /** @description The relevant cash account that the card is set up on. */
      linkedAccount?: string
      /**
       * @description The bank-defined product name for this account; the proprietary definition.
       * @example Green Savings Account
       */
      product?: string
      /**
       * @description The relationship between the user and the account; <i>e.g.</i>, Account Holder, Co-account Holder, Attorney.
       * @example Account Holder
       */
      psuStatus?: string
      /**
       * @description Specifies the usage of the account (PRIV = private personal account, ORGA = professional account).
       * @example PRIV
       */
      usage?: string
    }
    /** @description The provider account details required under the <a href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API standard</a>. */
    StetTransactionDetails: {
      creditorAccount?: components['schemas']['StetCreditorAccountReference']
      /** @description The name of creditor/payee. */
      creditorName?: string
      debtorAccount?: components['schemas']['StetDebtorAccountReference']
      /** @description The name of the debtor/payer. */
      debtorName?: string
      /** @description The technical incremental identification of the transaction for reconciliation by the TPP. */
      entryReference?: string
      /** @description <ul><li>For card transaction - date of the commercial transaction</li><li>for credit transfer - acquiring date of the transaction</li><li>for direct debit - receiving date of the transaction</li></ul> */
      transactionDate?: string
      /**
       * @description The value date of the transaction on the account.
       * @example 2023-08-11
       */
      valueDate?: string
    }
    /** @description Transfer metadata required under the <a href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API standard</a>. */
    StetTransferMetadata: {
      beneficiary?: components['schemas']['StetBeneficiary']
      debtorAgent?: components['schemas']['StetFinancialInstitutionIdentification']
      /** @description The unique identification assigned by the initiating party to unambiguously identify the transaction, which is passed on, unchanged, throughout the entire end-to-end chain. */
      endToEndId?: string
      /** @description The execution date-shifting rule when a recurring payment date falls on a weekend or bank holiday; payment is then executed either the "preceding" or "following" working day in accordance with bank policy. */
      executionRule?: string
      paymentTypeInformation?: components['schemas']['StetPaymentTypeInformation']
      regulatoryReportingCodes?: components['schemas']['StetRegulatoryReportingCodes']
    }
    /** @description Contains information about the signing party. */
    Signature: {
      /**
       * @description The id of the public key used to verify the signature.
       * @example CqSTHPvWY_dgVh-f
       */
      keyId?: string
      /**
       * @description The Token.io member id of the signing member.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      memberId?: string
      /**
       * @description The Base64url-encoded ciphertext signature.
       * @example ODRWmM0xMRM7CKmK3bNl4e2Kb2btavTbZssCsrHsu8yopoKxBzouBrD9q5-E63tgdV1DpB7i31vwNDKywA0CAE
       */
      signature?: string
    }
    /** @description Contains the request payload for a token representing account information access permissions. */
    AccessBody: {
      resources?: components['schemas']['AccessBodyResource'][]
      /**
       * Format: int32
       * @description The number of transaction history days.
       * @example 4
       */
      transactionHistoryDays?: number
    }
    /** @description The body case seeking access to one or more resources for a single account. */
    AccessBodyResource: {
      account?: components['schemas']['AccessBodyResourceAccount']
      balance?: components['schemas']['AccessBodyResourceAccountBalance']
      fundsConfirmation?: components['schemas']['AccessBodyResourceFundsConfirmation']
      standingOrders?: components['schemas']['AccessBodyResourceAccountStandingOrders']
      transactions?: components['schemas']['AccessBodyResourceAccountTransactions']
      transferDestinations?: components['schemas']['AccessBodyResourceTransferDestinations']
    }
    /** @description Specifies the account and resource for which access is being requested. */
    AccessBodyResourceAccount: {
      /**
       * @description The account number and associated information that identify a unique bank account.
       * @example a:b6037206ca7311ed:afa1
       */
      accountId?: string
    }
    AccessBodyResourceAccountBalance: {
      /**
       * @description The account number and associated information that identify a unique bank account.
       * @example 5291.27
       */
      accountId?: string
    }
    AccessBodyResourceAccountStandingOrders: {
      /**
       * @description The unique identifier for the bank account.
       * @example a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
       */
      accountId?: string
    }
    AccessBodyResourceAccountTransactions: {
      /** @description The unique identifier for the bank account. */
      accountId?: string
    }
    AccessBodyResourceFundsConfirmation: {
      /**
       * @description The unique identifier for the bank account.
       * @example a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
       */
      accountId?: string
    }
    AccessBodyResourceTransferDestinations: {
      /**
       * @description The unique identifier for the bank account.
       * @example a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
       */
      accountId?: string
    }
    /** @description Specifies another party for whom the token was created 'on behalf of'. */
    ActingAs: {
      /**
       * @description The name of the recipient shown to the user; required when specifying `actingAs`, optional otherwise.
       * @example The Great Baking Co.
       */
      displayName?: string
      /**
       * @description The TPP's discretionary reference identification of the recipient, not visible to Token.io; can be used by a "gateway" business member to (uniquely) define a merchant that is acting through it. The uniqueness of `refId` should be handled by the gateway member; typically a reseller requiring separate reports for each participating merchant it is representing. This value should not exceed 18 characters in length.
       * @example 9htio4a1sp2akdr1aa
       */
      refId?: string
      /**
       * @description The domain or email address of the recipient shown to the user along with the `displayName`.
       * @example jane.doe@company.com
       */
      secondaryName?: string
    }
    /** @description Contains the external authorization details provided by the bank. */
    ExternalAuthorizationDetails: {
      /**
       * @description Content displayed from this URL prompts the user for permission to initiate the standing order.
       * @example https://your-standing-order-credentials.com
       */
      authorizationUrl?: string
    }
    /**
     * PIS - Standing Orders
     * @description Contains the request payload for a token representing a standing order/recurring payment.
     */
    StandingOrderBody: {
      /**
       * @description Specifies the transaction amount, with up to four digits after the decimal point, for payments scheduled according to frequency.
       * @example 10.23
       */
      amount: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
      /**
       * @description Date when regularly scheduled payments end, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-09-13T17:00:00.000Z
       */
      endDate?: string
      /**
       * @description Specifies the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> code for the scheduled frequency of standing order payments occurring between the first and final payments. Options:<ul><li>DAIL - daily/once a day</li><li>WEEK - weekly/once a week</li><li>TOWK - twice weekly/two times a week</li><li>MNTH - monthly/once a month</li><li>TOMN - twice monthly/two times a month</li><li>QUTR - quarterly/once every three months</li><li>SEMI - semi-annually/twice a year</li><li>YEAR - annually/once a year</li></ul>
       * @example WEEK
       */
      frequency?: string
      instructions: components['schemas']['TransferInstructions']
      /**
       * @description Creditor's reference for matching an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system.
       * @example 64vn6aDyMiwBYbPDN:5zKtXEAq
       */
      remittanceReference?: string
      /**
       * Format: boolean
       * @description Requests that a refund account be returned in the response of `GET transfers` for any amounts refunded.
       * @default false
       * @example false
       */
      returnRefundAccount?: boolean
      /**
       * @description The date when the regularly scheduled payments will start; uses YYYY-MM-DD or YYYYMMDD format.
       * @example 2022-09-13T17:00:00.000Z
       */
      startDate?: string
    }
    /** @description Contains the details of each requested token returned according to the request's filtering parameters */
    Token: {
      /**
       * @description Identifies a unique authorization token for a transfer, standing order, or account information access.
       * @example ta:3eYPU1BEKKunfmYgQuSKXFCeo851C5Y3XiZW3XA465TU:5zKtXEAq
       */
      id?: string
      payload?: components['schemas']['TokenPayload']
      payloadSignatures?: components['schemas']['TokenSignature'][]
      /**
       * @description The id of the latest token replacing the original `tokenId`.
       * @example ta:BzFCFwVt5zrt6rdcHJK5imf2HXbGdVdyHKpWQZbgzL5s:qXTkpBAZVbXMxk9vi
       */
      replacedByTokenId?: string
      /**
       * @description Identifies the original token request.
       * @example rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
       */
      tokenRequestId?: string
    }
    /** @description Contains information identifying the requesting Token.io member. */
    TokenMember: {
      alias?: components['schemas']['Alias']
      /**
       * @description The Token.io-assigned `memberId` of the TPP.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      id: string
    }
    /** @description Contains details about the canceled token. */
    TokenOperationResult: {
      status?: components['schemas']['TokenOperationResultStatus']
      token?: components['schemas']['Token']
    }
    /**
     * @description Specifies the success or failure of the cancellation, the condition can be avoided by using a PRIVILEGED signature, rather than LOW or STANDARD.
     * @default INVALID
     * @example SUCCESS
     * @enum {string}
     */
    TokenOperationResultStatus: 'INVALID' | 'SUCCESS' | 'MORE_SIGNATURES_NEEDED'
    /** @description Contains the details about the token specified by id. */
    TokenPayload: OneOf<
      [
        {
          transfer?: components['schemas']['TransferBody']
        },
        {
          standingOrder?: components['schemas']['StandingOrderBody']
        },
        {
          access?: components['schemas']['AccessBody']
        }
      ]
    >
    /** @description Bank-defined additional authorization properties. */
    TokenPayloadAuthorizationMetadataEntry: {
      [key: string]: string | undefined
    }
    /** @description Contains the response to the submitted request. */
    TokenRequest: {
      /**
       * @description Identifies the token request and is used by the TPP as `requestId`. Add to the base URL to define the endpoint for subsequent requests. Note - This is NOT the `tokenId`.
       * @example rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
       */
      id?: string
      requestOptions?: components['schemas']['TokenRequestOptions']
      requestPayload?: components['schemas']['TokenRequestPayload']
      status?: components['schemas']['TokenRequestResultStatus']
      /**
       * @description A human-readable description of the reason behind the status.
       * @example This request is processing.
       */
      statusReasonInformation?: string
    }
    /** @description Specifies optional request parameters. */
    TokenRequestOptions: {
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example goldbank
       */
      bankId?: string
      from?: components['schemas']['TokenMember']
      /**
       * @description The unique identifier for the bank customer (account holder) providing consent to initiate the request.  Recommended to identify group payments initiated by the same user.
       * @example a:TASDo3124fcsmF0vsmdv4mf4mklsdwls3mcixz14fkasdv5
       */
      psuId?: string
      /**
       * Format: boolean
       * @description Requests email confirmation of the token request.
       * @default false
       * @example false
       */
      receiptRequested?: boolean
      tokenInternal?: components['schemas']['TokenRequestOptionsTokenInternal']
    }
    TokenRequestOptionsTokenInternal: {
      /**
       * @description This URL redirects the user after bank authentication.
       * @example http://psu-redirect.com
       */
      redirectUrl?: string
      /**
       * Format: boolean
       * @description If true, this launches the Web App credentials page URL instead of the bank authorization URL.
       * @default false
       * @example false
       */
      usingWebApp?: boolean
    }
    /** @description Contains the details for obtaining the requested token. */
    TokenRequestPayload: OneOf<
      [
        {
          transferBody: components['schemas']['TokenRequestPayloadTransferBody']
        },
        {
          standingOrderBody: components['schemas']['StandingOrderBody']
        },
        {
          accessBody: components['schemas']['TokenRequestPayloadAccessBody']
          /**
           * Format: string
           * @description Sets the requested UTC consent expiration for access requests in qualified basetime. The default is 180 days per PSD2 regulation, for banks in the EU. For UK banks, the tokens are long life with no default expiry date, the TPP must confirm every 90 days with the user to ensure the TPP should still be granted acces. Customising consent expiration/override of the default value is not supported by all banks. This is a particularly important parameter to pass to CMA9 banks to ensure an adequate custom consent expiry period is set for the access token upon successful authorisation.<br>The JSON returned in a successful response payload will look something like this:<br>{"Data:["Permissions":["ReadAccountsDetails","ReadBalances"], "ExpirationsDateTime":"2022-07-04T17:00:00.371+01:00"}, "Risk":{}}
           * @example 1679009247
           */
          tokenExpiration?: string
        }
      ]
    >
    /** @description Contains the request payload for a token representing account information access permissions. */
    TokenRequestPayloadAccessBody: {
      accountResourceList?: components['schemas']['TokenRequestPayloadAccessBodyAccountResourceList']
      resourceTypeList: components['schemas']['TokenRequestPayloadAccessBodyResourceTypeList']
      /**
       * Format: int32
       * @description The number of transaction history days.
       * @example 4
       */
      transactionHistoryDays?: number
    }
    /** @description Specifies requested access to one or more resources for a single account identified in an `accountIdentifier` object. */
    TokenRequestPayloadAccessBodyAccountResourceList: {
      resources?: components['schemas']['TokenRequestPayloadAccessBodyAccountResourceListAccountResource'][]
    }
    /** @description Specifies the account and resource for which access is being requested. */
    TokenRequestPayloadAccessBodyAccountResourceListAccountResource: {
      accountIdentifier?: components['schemas']['AccountIdentifier']
      customerData?: components['schemas']['CustomerData']
      type?: components['schemas']['TokenRequestPayloadAccessBodyAccountResourceType']
    }
    /**
     * @description Specifies the type of account resource requested.<ul><li><b>ACCOUNT_INFO</b> – requests data about the account itself (open, closed, when opened, when closed, <i>etc</i>.)</li><li><b>ACCOUNT_BALANCE</b> – requests the current account balance</li><li><b>ACCOUNT_TRANSACTIONS</b> – requests transaction history of the account</li><li><b>ACCOUNT_TRANSFER_DESTINATIONS<b> – requests transfer destinations for online payments</li><li><b>ACCOUNT_FUNDS_CONFIRMATION</b> – requests confirmation of sufficient funds for a payment amount</li><li><b>ACCOUNT_STANDING_ORDERS</b> – requests scheduling and frequency properties for recurring payments</li></ul>
     * @default ACCOUNT_INVALID
     * @example ACCOUNT_BALANCE
     * @enum {string}
     */
    TokenRequestPayloadAccessBodyAccountResourceType:
      | 'ACCOUNT_INVALID'
      | 'ACCOUNT_INFO'
      | 'ACCOUNT_BALANCE'
      | 'ACCOUNT_TRANSACTIONS'
      | 'ACCOUNT_TRANSFER_DESTINATIONS'
      | 'ACCOUNT_FUNDS_CONFIRMATION'
      | 'ACCOUNT_STANDING_ORDERS'
    /**
     * @description Specifies the account resources included in the request.<ul><li>ACCOUNTS – list of accounts with associated names</li><li>BALANCES – current balance of each requested account</li><li>TRANSACTIONS – recorded account activity in terms of debits and credits</li><li>TRANSFER_DESTINATIONS – account number and sort code, where applicable</li><li>STANDING_ORDERS – recorded account activity for the standing order</li></ul>
     * @default INVALID
     * @example BALANCES
     * @enum {string}
     */
    TokenRequestPayloadAccessBodyResourceType:
      | 'INVALID'
      | 'ACCOUNTS'
      | 'BALANCES'
      | 'TRANSACTIONS'
      | 'TRANSFER_DESTINATIONS'
      | 'STANDING_ORDERS'
    /** @description Contains the account resources being requested for access related to multiple accounts. */
    TokenRequestPayloadAccessBodyResourceTypeList: {
      /** @description Specifies the account resources included in the request. */
      resources: components['schemas']['TokenRequestPayloadAccessBodyResourceType'][]
      source?: components['schemas']['TokenRequestPayloadAccessBodyResourceTypeListSourceAccount']
    }
    TokenRequestPayloadAccessBodyResourceTypeListSourceAccount: {
      accountIdentifier?: components['schemas']['AccountIdentifier']
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
    }
    /** @description Contains the financial details of the transfer. */
    TokenRequestPayloadTransferBody: {
      /**
       * Format: boolean
       * @description If true, sufficient funds available for transfer are confirmed.
       * @default false
       * @example false
       */
      confirmFunds?: boolean
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
      /**
       * @description Specifies the execution date for the transfer (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-02-28
       */
      executionDate?: string
      instructions: components['schemas']['TransferInstructions']
      /**
       * @description The total amount, with up to four digits after the decimal point, transferred over the life of the token.
       * @example 10000.00
       */
      lifetimeAmount: string
      /**
       * @description The creditor's reference for matching an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system.
       * @example MFt6s64vn6aDyMiwBA3
       */
      remittanceReference?: string
      /**
       * Format: boolean
       * @description Requests that a refund account be returned in the response of `GET transfers` for any amounts refunded.
       * @default false
       * @example false
       */
      returnRefundAccount?: boolean
      /** @description destination.url.com */
      setTransferDestinationsUrl?: string
    }
    /**
     * @description The current result of the token request.
     * @default UNKNOWN
     * @example PROCESSED
     * @enum {string}
     */
    TokenRequestResultStatus: 'UNKNOWN' | 'PENDING' | 'PROCESSED' | 'REJECTED' | 'EXPIRED'
    /** @description Contains the respective verified digital signatures for the payload. */
    TokenSignature: {
      action?: components['schemas']['TokenSignatureAction']
      signature?: components['schemas']['Signature']
    }
    /**
     * @description Specifies the signature validation action.
     * @default INVALID
     * @example ENDORSED
     * @enum {string}
     */
    TokenSignatureAction: 'INVALID' | 'ENDORSED' | 'CANCELED'
    /** @description Contains the request payload for a transfer token representing a one-time payment. */
    TransferBody: {
      /**
       * @description The transaction amount with up to four digits after the decimal point.
       * @example 10.23
       */
      amount?: string
      /** @description Contains optional provider blob objects supporting the transfer/transaction. */
      attachments?: components['schemas']['Attachment'][]
      /**
       * Format: boolean
       * @description If true, sufficient funds available for transfer are confirmed.
       * @default false
       * @example false
       */
      confirmFunds?: boolean
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
      /**
       * @description Specifies the execution date for the transfer (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2022-04-29
       */
      executionDate?: string
      instructions: components['schemas']['TransferInstructions']
      /** @description The total amount over the life of the token, with up to four digits after the decimal point. */
      lifetimeAmount: string
      /**
       * @description The creditor's reference for matching an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system.
       * @example r3VsMFt6s64vn64b66asaDyMiwB
       */
      remittanceReference?: string
      /**
       * Format: boolean
       * @description Requests that a refund account be returned in the response of `GET transfers` for any amounts refunded.
       * @default false
       * @example false
       */
      returnRefundAccount?: boolean
    }
    /** @description Relevant information associated with the monetary balance of an individual account. */
    Balance: {
      /**
       * @description The unique identifier for the account.
       * @example a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV4
       */
      accountId?: string
      available?: Record<string, never> & components['schemas']['Money']
      current?: Record<string, never> & components['schemas']['Money']
      /** @description Other bank-defined balances associated with the account, where applicable. */
      otherBalances?: components['schemas']['BalanceTypedBalance'][]
    }
    BalanceTypedBalance: {
      amount?: Record<string, never> & components['schemas']['Money']
      /**
       * @description A bank-defined type of other balance.
       * @example Trial
       */
      type?: string
      /**
       * Format: string
       * @description The last update timestamp in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000
       * @example 581458935
       */
      updatedAtMs?: string
    }
    /** @description The Bank transaction code, created using the sub-elements of the structured code defined by <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a>; it concatenates the three ISO 20022 Codes - Domain Code, Family Code, and SubFamiliy Code by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'; <i>e.g.</i>, "PMNT-RDDT-ESDD". */
    BankTransactionCode: {
      domain?: components['schemas']['BankTransactionCodeDomain']
      proprietary?: components['schemas']['BankTransactionCodeProprietary']
    }
    /** @description Bank transaction code using the sub-elements of the structured code defined by <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a>. It concatenates the three ISO 20022 Codes: Domain Code, Family Code, and SubFamiliy Code with hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'; <i>e.g.</i>, "PMNT-RDDT-ESDD". */
    BankTransactionCodeDomain: {
      /**
       * @description The domain code.
       * @example PMNT
       */
      code?: string
      /**
       * @description The family code.
       * @example RCDT
       */
      familyCode?: string
      /**
       * @description The sub-family code.
       * @example ESCT
       */
      subFamilyCode?: string
    }
    /** @description A bank transaction code used within a community or within a bank; <i>e.g.</i>, for MT94x based transaction reports. */
    BankTransactionCodeProprietary: {
      /**
       * @description The bank code.
       * @example XXXX
       */
      code?: string
      /**
       * @description The issuer code.
       * @example XXXX
       */
      issuer?: string
    }
    /**
     * @description Specifies the status of the request.
     * @default INVALID_REQUEST
     * @example SUCCESSFUL_REQUEST
     * @enum {string}
     */
    RequestStatus: 'INVALID_REQUEST' | 'SUCCESSFUL_REQUEST' | 'MORE_SIGNATURES_NEEDED'
    /** @description Information about the requested transaction. */
    Transaction: {
      amount?: Record<string, never> & components['schemas']['Money']
      bankTransactionCode?: components['schemas']['BankTransactionCode']
      /**
       * @description The bank-assigned unique transaction identifier for the refund.
       * @example 83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
       */
      bankTransactionId?: string
      /**
       * Format: string
       * @description Specifies the time the transfer was created; timestamp (UTC) in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 324754373
       */
      createdAtMs?: string
      creditorEndpoint?: components['schemas']['TransferCreditorEndpoint']
      /**
       * @description The description of the transaction.
       * @example Payment
       */
      description?: string
      /**
       * @description The transaction identifier; transaction id.
       * @example tt:83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
       */
      id?: string
      metadata?: components['schemas']['MetadataEntry']
      providerTransactionDetails?: components['schemas']['ProviderTransactionDetails']
      status?: components['schemas']['TransactionStatus']
      /**
       * @description Identifies the authorization token for the transfer.
       * @example tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
       */
      tokenId?: string
      /**
       * @description The transfer identifier for the payment.
       * @example t:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      tokenTransferId?: string
      type?: components['schemas']['TransactionType']
    }
    /** @description The bank-defined data associated with the account. */
    MetadataEntry: {
      [key: string]: string | undefined
    }
    /**
     * @description Filters by transaction status. <ul> <li><b>SUCCESS</b> – The final status received from the bank indicating a successful payment initiation.</li> <li><b>PENDING_EXTERNAL_AUTHORIZATION</b> – Waiting for user authorization at the bank. This will transition to `FAILURE_EXPIRED` if the user does not authorize within 30 minutes. This is only relevant for 1-step banks.</li> <li><b>FAILURE_CANCELED</b> – This usually indicates a cancelation from the user. It is mapped from the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> status 'CANC'.</li> <li><b>FAILURE_INSUFFICIENT_FUNDS</b> – The final status indicating that the payment initiation request has been rejected due to insufficient funds.</li> <li><b>FAILURE_PERMISSION_DENIED</b> – The user has been denied authorization at the bank. This is only relevant for 2-step banks.</li> <li><b>FAILURE_EXPIRED</b> – A callback has not been received from the bank to confirm that the user has completed authorization during the required timeframe of 30 minutes after the transaction was created. As a result  the transaction has expired. This is only relevant for 1-step banks.</li> <li><b>FAILURE_DECLINED</b> – This usually indicates bank rejection. Mapped from the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> status 'RJCT'.</li> <li><b>FAILURE_GENERIC</b> – This usually a technical failure. Possibly, a failure callback was received from the bank with no transaction status and no further information.</li> <li><b>PROCESSING</b> – The transaction is in process and no final status has been received from the bank yet.</li> <li><b>SENT</b> – The transaction has been sent to the bank, but has not been acknowledged.  This status is similar to `PENDING_EXTERNAL_AUTHORIZATION`. It is generated AFTER the user authenticates if a response is not received when redeeming the token for 2-step transfers.</li> <li><b>INITIATED</b> – The status has automatically been set to INITIATED because the status has remained in `PROCESSING` for 30 days and cannot be otherwise updated.</li> <li><b>SETTLEMENT_IN_PROGRESS</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. Token.io is waiting for the payment to reach the payee bank. No action is required; await the next step, <i>e.g.</i>, Token.io sends a webhook with the status update, or a polling call. The status will change to `SETTLEMENT_IN_PROGRESS` soon after Token.io receives the final status from the debtor bank.</li> <li><b>SETTLEMENT_COMPLETED</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status.The payment has reached the payee bank and Token.io has matched the transaction in the TPP’s settlement account to the initiated payment.For instant payments, `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes from payment initiation, at the latest.For non-instant payments, the time to reach `SETTLEMENT_COMPLETED` will depend on the clearing period for the payment.</li><li><b>SETTLEMENT_INCOMPLETE</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. Reconciliation has failed. This happens when Token.io doesn't find the corresponding transaction in the TPP’s settlement account automatically. This status is returned after 1 day for instant payments and 15 days for non-instant payments, if the payment is not in the pending state. The status will persist for 31 days for instant payments and 45 days for non-instant payments, respectively, after the payment creation date.</li>
     * @example PROCESSING
     * @enum {string}
     */
    TransactionStatus:
      | 'PROCESSING'
      | 'SUCCESS'
      | 'PENDING_EXTERNAL_AUTHORIZATION'
      | 'FAILURE_CANCELED'
      | 'FAILURE_INSUFFICIENT_FUNDS'
      | 'FAILURE_PERMISSION_DENIED'
      | 'FAILURE_EXPIRED'
      | 'FAILURE_DECLINED'
      | 'FAILURE_GENERIC'
      | 'SENT'
      | 'INITIATED'
      | 'SETTLEMENT_IN_PROGRESS'
      | 'SETTLEMENT_COMPLETED'
      | 'SETTLEMENT_INCOMPLETE'
    /**
     * @description Specifies the type of transaction.
     * @default INVALID_TYPE
     * @enum {string}
     */
    TransactionType: 'INVALID_TYPE' | 'DEBIT' | 'CREDIT'
    /** @description Contains details of the refunded amount settled, the transfer balance remaining, and whether initiated. */
    TransferRefund: {
      remainingRefundAmount?: Record<string, never> & components['schemas']['Money']
      settledRefundAmount?: Record<string, never> & components['schemas']['Money']
      transferRefundStatus?: components['schemas']['TransferRefundStatus']
    }
    /**
     * @description Indicates the status of the initiated refund payout.
     * @default UNSET
     * @example PARTIAL
     * @enum {string}
     */
    TransferRefundStatus: 'UNSET' | 'NONE' | 'PARTIAL' | 'FULL'
    /** @description Information about each respective transfer record requested. */
    Transfer: {
      actingAs?: components['schemas']['ActingAs']
      /**
       * Format: boolean
       * @description Indicates whether a transfer is from an auto single immediate payment coinciding with the bank's out-of-operation hours was converted to a future dated payment
       * @default false
       * @example false
       */
      convertedToFutureDatedPayment?: boolean
      /**
       * Format: string
       * @description Specifies the time the transfer was created; timestamp (UTC) in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 8921348754
       */
      createdAtMs?: string
      /**
       * @description Specifies the execution date for the transfer (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-01-28
       */
      executionDate?: string
      /**
       * @description The `transferId` computed as the hash of the transfer payload.
       * @example tt:83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
       */
      id?: string
      method?: components['schemas']['Method']
      /**
       * @description Identifies the foreign exchange order.
       * @example bfeab16d-5d84-46b0-8058-343c160d0e1b
       */
      orderId?: string
      payload?: components['schemas']['TransferPayload']
      payloadSignatures?: components['schemas']['Signature'][]
      providerDetails?: components['schemas']['ProviderTransferDetails']
      refund?: components['schemas']['RefundInfo']
      refundDetails?: components['schemas']['TransferRefund']
      scaStatus?: components['schemas']['TransferScaStatus']
      source?: components['schemas']['TransferCreditorEndpoint']
      status?: components['schemas']['TransactionStatus']
      /**
       * @description The bank's reason for the reported status.
       * @example This transfer is processing.
       */
      statusReasonInformation?: string
      /**
       * @description The unique transaction identifier; the transaction id.
       * @example 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      transactionId?: string
    }
    /**
     * @description The method for the transaction.
     * @default DEFAULT
     * @example INSTANT
     * @enum {string}
     */
    Method: 'DEFAULT' | 'INSTANT'
    /**
     * @description The SCA status for the transaction.
     * @default UNKNOWN
     * @example APPLIED
     * @enum {string}
     */
    TransferScaStatus: 'UNKNOWN' | 'APPLIED' | 'EXEMPTED'
    /** @description Contains the financial details of the transfer. */
    TransferPayload: {
      amount: Record<string, never> & components['schemas']['MoneyRequest']
      /**
       * Format: boolean
       * @description Requests confirmation that sufficient funds are available.
       * @default false
       * @example false
       */
      confirmFunds?: boolean
      /** @description A description of the transfer. */
      description?: string
      metadata?: components['schemas']['Metadata']
      /**
       * @description The TPP-generated reference identifier for the token included in the original request, not to be confused with `requestId`. `RefId` is typically used by the TPP to reconcile transactions against payments received. `RefId` maps to `tppRefId` in the bank's `consentRequest`. It's needed to match/verify the originating token request with the bank's consent request. This value should not exceed 18 characters in length.
       * @example 9htio4a1sp2akdr1aa
       */
      refId: string
      /**
       * @description Identifies the authorization token for the transfer.
       * @example tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
       */
      tokenId: string
      /** @description The beneficiary account specifying the transfer destination; <i>i.e.</i>, TPP/merchant/creditor. */
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      transferDestinations?: components['schemas']['TransferDestination'][]
    }
    /** @description Contains the financial details of the transfer. */
    TransferPayloadRequest: {
      amount?: Record<string, never> & components['schemas']['MoneyRequest']
      /**
       * Format: boolean
       * @description Requests confirmation that sufficient funds are available.
       * @default false
       * @example false
       */
      confirmFunds?: boolean
      /** @description A description of the transfer. */
      description?: string
      metadata?: components['schemas']['Metadata']
      /**
       * @description The TPP-generated reference identifier for the token included in the original request, not to be confused with `requestId`. `RefId` is typically used by the TPP to reconcile transactions against payments received. `RefId` maps to `tppRefId` in the bank's `consentRequest`. It's needed to match/verify the originating token request with the bank's consent request. This value should not exceed 18 characters in length.
       * @example 9htio4a1sp2akdr1aa
       */
      refId?: string
      /**
       * @description Identifies the authorization token for the transfer.
       * @example tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
       */
      tokenId: string
      /** @description The beneficiary account specifying the transfer destination; <i>i.e.</i>, TPP/merchant/creditor. */
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      transferDestinations?: components['schemas']['TransferDestinationRequest'][]
    }
    /**
     * @description The bearer of the charge, if any, for international transfers. CRED - all charges are borne by the creditor. DEBT - all charges are borne by the debtor. SHAR - the parties share the charges. SLEV - each party bears its own charges, recommended on SEPA payments.
     * @default INVALID_CHARGE_BEARER
     * @example CRED
     * @enum {string}
     */
    ChargeBearer: 'INVALID_CHARGE_BEARER' | 'CRED' | 'DEBT' | 'SHAR' | 'SLEV'
    /** @description Specifies the legal identity information for the account. */
    CustomerData: {
      address?: components['schemas']['AddressInfo']
      /**
       * @description The legal owner name for the account.
       * @example Mr John Arthur Smith
       */
      legalNames?: string[]
    }
    /** @description Specifies the legal identity information for the payer/customer. */
    CustomerDataDebtor: {
      address?: components['schemas']['AddressInfo']
      /**
       * @description Legal owner name for the debtor account.
       * @example Mr John Arthur Smith
       */
      legalNames: string[]
    }
    /** @description Specifies the legal identity information for the payee. */
    CustomerDataCreditor: {
      address?: components['schemas']['AddressInfo']
      /**
       * @description The legal owner name for the creditor account.
       * @example Mr John Arthur Smith
       */
      legalNames: string[]
    }
    /** @description The beneficiary account specifying the transfer destination, <i>i.e.</i> TPP/merchant/creditor bank. See <a href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted" target="_blank">Restricting Beneficiary Accounts</a>. */
    TransferDestination: OneOf<
      [
        {
          sepa?: components['schemas']['TransferDestinationSepa']
        },
        {
          sepaInstant?: components['schemas']['TransferDestinationSepaInstant']
        },
        {
          fasterPayments?: components['schemas']['TransferDestinationFasterPayments']
        },
        {
          elixir?: components['schemas']['TransferDestinationElixir']
        },
        {
          euDomesticNonEuro?: components['schemas']['TransferDestinationEuDomesticNonEuro']
        },
        {
          euDomesticNonEuroInstant?: components['schemas']['TransferDestinationEuDomesticNonEuroInstant']
        },
        {
          bankgiro?: components['schemas']['TransferDestinationBankgiro']
        },
        {
          plusgiro?: components['schemas']['TransferDestinationPlusgiro']
        },
        {
          token?: components['schemas']['TransferDestinationToken']
        }
      ]
    >
    /** @description The beneficiary account specifying the transfer destination, <i>i.e.</i> TPP/merchant/creditor bank. See <a href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted" target="_blank">Restricting Beneficiary Accounts</a>. */
    TransferDestinationRequest: OneOf<
      [
        {
          sepa?: components['schemas']['TransferDestinationSepa']
        },
        {
          sepaInstant?: components['schemas']['TransferDestinationSepaInstant']
        },
        {
          fasterPayments?: components['schemas']['TransferDestinationFasterPayments']
        },
        {
          elixir?: components['schemas']['TransferDestinationElixir']
        },
        {
          euDomesticNonEuro?: components['schemas']['TransferDestinationEuDomesticNonEuro']
        },
        {
          euDomesticNonEuroInstant?: components['schemas']['TransferDestinationEuDomesticNonEuroInstant']
        },
        {
          bankgiro?: components['schemas']['TransferDestinationBankgiro']
        },
        {
          plusgiro?: components['schemas']['TransferDestinationPlusgiro']
        },
        {
          token?: components['schemas']['TransferDestinationToken']
        }
      ]
    >
    /** bankgiro */
    TransferDestinationBankgiro: Record<string, never> & components['schemas']['BankGiroAccount']
    /** @description The custom transfer destination. */
    TransferDestinationCustom: {
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example ob-modelo
       */
      bankId?: string
      /**
       * @description The transfer payload.
       * @example sdfjds12-f85-46b0-8058-343dek543grt
       */
      payload?: string
    }
    /**
     * elixir
     * @description The interbank payment system in Poland.
     */
    TransferDestinationElixir: {
      /**
       * @description The payee's Elixir-registered bank account number. You can also enter the iban in this field for iban accounts.
       * @example FRAX82783423
       */
      accountNumber: string
    }
    /**
     * euDomesticNonEuroInstant
     * @description The instant payment system within a country using that country's non-Euro domestic currency. An IBAN account will require an iban and an optional bic, a BBAN account will require a bban and an optional bic, and a Clearing Number account will require a bban and a clearingNumber.
     */
    TransferDestinationEuDomesticNonEuroInstant:
      | components['schemas']['EUIbanAccount']
      | components['schemas']['BbanAccount']
      | components['schemas']['ClearingNumberAccount']
    /**
     * euDomesticNonEuro
     * @description The payment system within a country using that country's non-Euro domestic currency. An IBAN account will require an iban and an optional bic, a BBAN account will require a bban and an optional bic, and a Clearing Number account will require a bban and a clearingNumber.
     */
    TransferDestinationEuDomesticNonEuro:
      | components['schemas']['EUIbanAccount']
      | components['schemas']['BbanAccount']
      | components['schemas']['ClearingNumberAccount']
    /** fasterPayments */
    TransferDestinationFasterPayments: Record<string, never> &
      components['schemas']['FasterPaymentsAccount']
    /** plusgiro */
    TransferDestinationPlusgiro: Record<string, never> & components['schemas']['PlusGiroAccount']
    /** sepa */
    TransferDestinationSepa: Record<string, never> & components['schemas']['SepaAccount']
    /** sepaInstant */
    TransferDestinationSepaInstant: Record<string, never> &
      components['schemas']['SepaInstantAccount']
    /**
     * token
     * @description The primary account number. The cCard identifier found on payment cards, such as credit and debit cards, as well as stored-value cards, gift cards and other similar cards, somtimes referred to as a bank card number.
     */
    TransferDestinationToken: {
      /** @description The bank account identifier for a linked account used by Token.io's Bank Integration Account Linking Service. */
      accountId?: string
      /**
       * @description The Token.io-generated member id for the user/account holder.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      memberId?: string
    }
    /**
     * type
     * @description Specifies the type of transfer destination.
     * @default UNKNOWN
     * @example BUSINESS
     * @enum {string}
     */
    TransferDestinationType: 'UNKNOWN' | 'BUSINESS' | 'PERSONAL'
    /** @description Contains information about the payer account. */
    TransferDebtorEndpoint: {
      accountIdentifier: components['schemas']['AccountIdentifier']
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example ob-iron
       */
      bankId?: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the SWIFT Address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs are often called SWIFT Codes and can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
      customerData?: components['schemas']['CustomerDataDebtor']
    }
    /** @description Contains information about the payee account. */
    TransferCreditorEndpoint: {
      accountIdentifier: components['schemas']['AccountIdentifier']
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example ob-iron
       */
      bankId?: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the SWIFT Address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs are often called SWIFT Codes and can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
      customerData?: components['schemas']['CustomerDataCreditor']
    }
    /** @description Contains the transfer instructions for each payment. */
    TransferInstructions: {
      metadata?: components['schemas']['Metadata']
      source?: components['schemas']['TransferDebtorEndpoint']
      /** @description The beneficiary account specifying the transfer destination, <i>i.e.</i>, TPP/merchant/creditor bank account. See <a href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted" target="_blank"> Restricting Beneficiary Accounts</a> for guidance on adding, modifying, and deleting accounts. */
      transferDestinations: components['schemas']['TransferDestination'][]
    }
    /** @description Information governing or otherwise related to the transfer instructions. */
    Metadata: {
      chargeBearer?: components['schemas']['ChargeBearer']
      providerTransferMetadata?: components['schemas']['ProviderTransferMetadata']
      /**
       * @description The <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> external purpose code. Purpose Codes are four letter codes which are carried across the payment chain, providing information to all users in the payments chain to indicate the reason a payment is being made. Purpose Codes are one of the policy areas of Enhanced Data that can deliver the benefits of the ISO 20022 payment messaging standard.
       * @example CBLK
       */
      purposeCode?: string
      /**
       * @description The ultimate party to which an amount of money is due.
       * @example ACME GmbH
       */
      ultimateCreditor?: string
      /**
       * @description The ultimate party that owes that owes money to the (ultimate) creditor.
       * @example John Smith
       */
      ultimateDebtor?: string
    }
    /**
     * @description Specifies the types of webhook currently configured.
     * @default INVALID
     * @example PAYMENT_STATUS_CHANGED
     * @enum {string}
     */
    EventType:
      | 'INVALID'
      | 'TRANSFER_STATUS_CHANGED'
      | 'BULK_TRANSFER_STATUS_CHANGED'
      | 'STANDING_ORDER_STATUS_CHANGED'
      | 'REFUND_STATUS_CHANGED'
      | 'PAYMENT_STATUS_CHANGED'
      | 'VRP_STATUS_CHANGED'
      | 'VRP_CONSENT_STATUS_CHANGED'
      | 'BANK_AIS_OUTAGE_STATUS_CHANGED'
      | 'BANK_SIP_OUTAGE_STATUS_CHANGED'
    /** @description Specifies the types of webhook currently configured. */
    Config: {
      type: components['schemas']['EventType'][]
      /**
       * @description Specifies the webhook URL that receives the status updates.
       * @example your-webhook-url.com
       */
      url: string
    }
    CancelTokenResponse: {
      result?: components['schemas']['TokenOperationResult']
    }
    /** @description Requests confirmation of sufficient funds available. */
    ConfirmFundsRequest: {
      amount?: Record<string, never> & components['schemas']['Money']
    }
    /** @description If true, sufficient funds available for transfer are confirmed */
    ConfirmFundsResponse: {
      /**
       * Format: boolean
       * @description True indicates funds available. False indicates funds not available
       * @default false
       * @example false
       */
      fundsAvailable?: boolean
    }
    CreateSubTppRequest: {
      /**
       * @description The fully qualified domain name of the sub-TPP, also referred to as an absolute domain name. This specifies an exact location in the tree hierarchy of the Domain Name System (DNS). It must include all domain levels, including the top-level domain and the root zone.
       * @example somehost.example.com
       */
      domain?: string
      /**
       * Format: byte
       * @description Specifies the image file containing the sub-TPP's logo as a byte array (click <a href="https://thewebdev.info/2021/08/01/how-to-convert-a-file-input-value-to-a-byte-array-with-javascript" target="_blank">here</a> for the JavaScript FileReader instance needed to convert the selected file into a byte array).
       * @example b0Y5cVl6aDc3RkE5blZyQ24yamlh
       */
      logo?: string
      merchant: components['schemas']['member.Merchant']
      /**
       * @description The recognised business name or DBA of the sub-TPP.
       * @example Sub-TPP Business Ltd
       */
      name: string
      /**
       * @description The Token.io-generated identifier for the parent sub-TPP.
       * @example 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
       */
      parentSubTppId?: string
      /**
       * @description Specifies the URL of Sub-Tpp.
       * @example sub-tpp-url.com
       */
      url: string
    }
    CreateSubTppResponse: {
      /**
       * @description The Token.io-generated identifier for the sub-TPP used by the reseller as the `actingAs.refId` in token requests.
       * @example 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
       */
      subTppId?: string
    }
    /** Contains the request payload for a new one-time payment based on the response to a `POST /token-requests` call. */
    CreateTransferRequest: {
      payload: components['schemas']['TransferPayloadRequest']
    }
    CreateTransferResponse: {
      authorizationDetails?: components['schemas']['ExternalAuthorizationDetails']
      transfer?: components['schemas']['Transfer']
    }
    /** @description Contains information used in embedded authentication flows. */
    CredentialFields: {
      /** @description Defines the credential properties. */
      fields?: components['schemas']['CredentialField'][]
    }
    /** @description No data returned in the successful response. */
    DeleteSubTppResponse: Record<string, never>
    /** @description No data returned in the successful response. */
    DeleteWebhookConfigResponse: Record<string, never>
    /** @description Operation completed successfully. */
    GetAccountResponse: {
      account?: components['schemas']['Account']
    }
    /** @description Each object represents a unique bank account. */
    GetAccountsResponse: {
      accounts?: components['schemas']['Account'][]
    }
    GetBalanceResponse: {
      balance?: components['schemas']['Balance']
      status?: components['schemas']['RequestStatus']
    }
    GetBalancesResponse: {
      /** @description An array of objects containing balance information for each account requested. */
      response?: components['schemas']['GetBalanceResponse'][]
    }
    GetBankStatusResponse: {
      bankStatus?: components['schemas']['GetBankStatusResponseBankStatus']
    }
    /** @description Contains information on the current status of the Token.io-connected bank. */
    GetBankStatusResponseBankStatus: {
      /** @description Current state of this bank's AIS support:<ul><li>LIVE – accepting calls</li><li>DOWN – connection interrupted, not accepting calls</li><li>NO CALLS – bank does not support AIS</li></ul> */
      aisStatus?: string
      /**
       * @description The unique bank identifier
       * @example ob-hsbc
       */
      bankid?: string
      /**
       * @description Time since the latest status reported in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 27811843
       */
      lastUpdatedAt?: string
      /** @description Current state of this bank's PIS support:<ul><li>LIVE – accepting calls</li><li>DOWN – connection interrupted, not accepting calls</li><li>NO CALLS – bank does not support PIS</li></ul> */
      pisStatus?: string
      /**
       * @description Current status of the bank server:<ul><li>AVAILABLE (up)</li><li>UNAVAILABLE (down)</li><li>UNKNOWN</li></ul>
       * @example AVAILABLE
       */
      serverStatus?: string
    }
    GetBanksResponse: {
      /** @description Contains information for each bank matching the request criteria. */
      banks?: components['schemas']['BankwithGroup'][]
      paging?: components['schemas']['Paging']
      /**
       * @description Sort banks by the value of rank.
       * @example [
       *   1,
       *   2,
       *   100
       * ]
       */
      rank?: number
      /**
       * @description Filters for banks that are part of the bank sub-group specified.
       * @example [
       *   "CMM Grand",
       *   "Banque Populaire",
       *   "La Banque"
       * ]
       */
      bankSubGroup?: string
    }
    GetBanksCountriesResponse: {
      /** @description The list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case. */
      countries?: string[]
    }
    /** @description Contains information on the current status of the Token.io-connected bank. */
    GetBanksStatusResponse: {
      banksStatus?: components['schemas']['GetBanksStatusResponseBankStatus'][]
    }
    BankwithGroup: {
      /**
       * @description The name of the banking group in which this bank holds membership.
       * @example XYZ-Bank-Group
       */
      bankGroup?: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the SWIFT Address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs are often called SWIFT Codes and can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
      /**
       * @description A list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case, in which this bank operates.
       * @example [
       *   "DE",
       *   "IT",
       *   "GB"
       * ]
       */
      countries?: string[]
      /** @description Contains information used in embedded authentication flows. */
      credentialFields?: components['schemas']['CredentialField'][]
      /** @description Contains bank-dependent formatting constraints indicating allowable characters, if any. */
      fieldsFormatInformation?: components['schemas']['FieldFormatInformation'][]
      /**
       * @description The URI of the location of the full size bank icon.
       * @example https://s3-us-west-2.amazonaws.com/tokenio-assets/1.0.0/logos/gold/gold_full.png
       */
      fullLogoUri?: string
      /**
       * @description The Token.io bank identifier.
       * @example ob-modelo
       */
      id?: string
      /**
       * @description The optional identifier for the bank. This is not guaranteed to be unique across all banks.
       * @example BLZ
       */
      identifier?: string
      /**
       * @description The URI of the location of the square bank avatar icon.
       * @example https://s3-us-west-2.amazonaws.com/tokenio-assets/1.0.0/logos/gold/gold_square.png
       */
      logoUri?: string
      mandatoryFields?: components['schemas']['MandatoryFields']
      maintenanceWindow?: components['schemas']['MaintenanceWindow']
      /**
       * @description The commonly recognised name of the bank.
       * @example Gold Bank
       */
      name?: string
      openBankingStandard?: components['schemas']['OpenBankingStandard']
      /**
       * @description Specifies the bank’s days and hours of operation in a normal week. Does not take into account bank-specific public holidays, which may or may not be considered out-of-operation time.
       * @example MON to FRI, 00:00 to 24:00 GMT+1
       */
      operationalTime?: string
      /**
       * @description Open Banking SaaS adapter or provider.
       * @example Token.io
       */
      provider?: string
      /**
       * Format: boolean
       * @description The bank connection requires external authorization for creating transfers.
       * @default false
       * @example false
       */
      requiresExternalAuth?: boolean
      /**
       * Format: boolean
       * @description The bank connection only supports immediate redemption of transfer tokens.
       * @default false
       * @example false
       */
      requiresOneStepPayment?: boolean
      /**
       * @description Payment methods/rails supported by the bank.
       * @example [
       *   "SWIFT",
       *   "FASTER_PAYMENTS",
       *   "SEPA"
       * ]
       */
      supportedTransferDestinationTypes?: (
        | components['schemas']['TransferDestinationBankgiro']
        | components['schemas']['TransferDestinationCustom']
        | components['schemas']['TransferDestinationElixir']
        | components['schemas']['TransferDestinationEuDomesticNonEuro']
        | components['schemas']['TransferDestinationEuDomesticNonEuroInstant']
        | components['schemas']['TransferDestinationFasterPayments']
        | components['schemas']['TransferDestinationPlusgiro']
        | components['schemas']['TransferDestinationSepa']
        | components['schemas']['TransferDestinationSepaInstant']
        | components['schemas']['TransferDestinationToken']
        | components['schemas']['TransferDestinationType']
      )[]
      /**
       * Format: boolean
       * @description The bank connection supports AIS (Account Information Services) guest checkout
       * @default false
       * @example false
       */
      supportsAisGuestCheckout?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports the retrieval of balances.
       * @default false
       * @example false
       */
      supportsBalance?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports checkout flow v2.
       * @default false
       * @example false
       */
      supportsCheckoutFlowV2?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports confirmation of available funds.
       * @default false
       * @example false
       */
      supportsFundsConfirmation?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports retrieving user consent.
       * @default false
       * @example false
       */
      supportsGetConsent?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports guest checkout.
       * @default false
       * @example false
       */
      supportsGuestCheckout?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports retrieval of information through Account Information Services (AIS).
       * @default false
       * @example false
       */
      supportsInformation?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports linking with a bank linking URI.
       * @default false
       * @example false
       */
      supportsLinkingUri?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports the receipt of payments.
       * @default false
       * @example false
       */
      supportsReceivePayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports the return of refunds.
       * @default false
       * @example false
       */
      supportsReturnRefundAccount?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports future dated payments.
       * @default false
       * @example false
       */
      supportsScheduledPayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports payment initiation.
       * @default false
       * @example false
       */
      supportsSendPayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports scheduled recurring payments.
       * @default false
       * @example false
       */
      supportsStandingOrder?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports specifying startDate and endDate for filtering transaction lookups.
       * @default false
       * @example false
       */
      supportsTransactionsDateFilter?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports variable recurring payments.
       * @default false
       * @example false
       */
      supportsVariableRecurringPayment?: boolean
      /**
       * Format: int32
       * @description Defines the number of transaction history records allowed per page, -1 (unlimited) or a positive integer (record limit).
       * @default -1
       * @example 65
       */
      transactionHistoryLimit?: number
    }
    /** @description Contains information on the current status of each Token.io-connected bank. */
    GetBanksStatusResponseBankStatus: {
      /**
       * @description Current state of this bank's AIS support:<ul><li>LIVE – accepting calls</li><li>DOWN – connection interrupted, not accepting calls</li><li>NO CALLS – bank does not support AIS</li></ul>
       * @example LIVE
       */
      aisStatus?: string
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example goldbank
       */
      bankId?: string
      /**
       * @description Time since the latest status reported in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 13593742
       */
      lastUpdatedAt?: string
      /**
       * @description Current status of the bank's PIS service:<ul><li>LIVE – accepting calls</li><li>DOWN – connection interrupted, not accepting calls</li><li>NO CALLS – bank does not support PIS</li></ul>
       * @example LIVE
       */
      pisStatus?: string
      /**
       * @description Current status of the bank server:<ul><li>AVAILABLE (up)</li><li>UNAVAILABLE (down)</li><li>UNKNOWN</li></ul>
       * @example AVAILABLE
       */
      serverStatus?: string
    }
    GetTokenRequestResultWithStatusResponse: {
      signature?: components['schemas']['Signature']
      /**
       * @description The unique id of the standing order submission.
       * @example so:89DSFAkvdfgreJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczfjkewrbniu5667
       */
      standingOrderSubmissionId?: string
      status?: components['schemas']['TokenRequestResultStatus']
      /**
       * @description The bank's reason for the reported status of the token request.
       * @example The token request is processing.
       */
      statusReasonInformation?: string
      /**
       * @description Identifies a unique authorization token for a transfer, standing order or account information access.
       * @example tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
       */
      tokenId?: string
      /**
       * @description The id of the transfer sent in the `POST /transfers` response and/or included in a respective `GET /transfers` response.
       * @example t:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      transferId?: string
    }
    GetTokenResponse: {
      token?: components['schemas']['Token']
    }
    GetTokensResponse: {
      /**
       * @description The offset of the first item returned in the collection.
       * @example LerV6Jmex
       */
      offset?: string
      /** @description Contains the details of each requested token returned according to the request's filtering parameters. */
      tokens?: components['schemas']['Token'][]
    }
    GetTransactionResponse: {
      status?: components['schemas']['RequestStatus']
      transaction?: components['schemas']['Transaction']
    }
    GetTransactionsResponse: {
      /**
       * @description The offset of the first item returned in the collection.
       * @example LerV6Jmex
       */
      offset?: string
      status?: components['schemas']['RequestStatus']
      transactions?: components['schemas']['Transaction'][]
    }
    GetTransferResponse: {
      transfer?: components['schemas']['Transfer']
    }
    GetTransfersResponse: {
      /**
       * @description The offset of the first item returned in the collection.
       * @example LerV6Jmex
       */
      offset?: string
      transfers?: components['schemas']['Transfer'][]
    }
    /** @description Specifies details of the webhook. */
    GetWebhookConfigResponse: {
      config?: components['schemas']['Config']
    }
    /** @description Contains the consent information for the original request. */
    InitiateBankAuthorizationRequest: {
      /**
       * Format: boolean
       * @description This flags whether the user's consent for the original token request was accepted by the bank.
       * @default false
       * @example false
       */
      consentAccepted?: boolean
      credentials?: components['schemas']['InitiateBankAuthorizationRequestCredentialsEntry']
      /**
       * Format: boolean
       * @description If true, this triggers the credential flow. The credentials map must be populated if required by the bank (see `credentialFields` in the response to `GET /banks`). Otherwise, empty credentials are used.
       * @default false
       * @example false
       */
      useCredentialFlow?: boolean
      /**
       * Format: boolean
       * @description If true, this launches the Web App credentials page URL instead of the bank authorization URL.
       * @default false
       * @example false
       */
      useWebappCredentialsFlow?: boolean
    }
    /** @description Maps a bank-defined credential id string to a value. */
    InitiateBankAuthorizationRequestCredentialsEntry: {
      [key: string]: string | undefined
    }
    InitiateBankAuthorizationResponse: OneOf<
      [
        {
          fields?: components['schemas']['CredentialFields']
        },
        {
          /**
           * @description This URL redirects the user after bank authentication.
           * @example http://psu-redirect.com
           */
          redirectUrl?: string
        },
        {
          status?: components['schemas']['ScaStatus']
        }
      ]
    >
    /** @description Contains the callback query parameters. */
    OnBankAuthCallbackRequest: {
      /**
       * @description The URL-encoded string of all query parameters returned by the bank in the callback received by the client.
       * @example param1=value1&param2=value2
       */
      query?: string
    }
    OnBankAuthCallbackResponse: {
      fields?: components['schemas']['CredentialFields']
    }
    /** @description Contains each sub-TPP member onboarded by the reseller. */
    RetrieveSubTppChildrenResponse: {
      subTpps?: components['schemas']['member.SubTpp'][]
    }
    'member.Merchant': {
      /**
       * @description The 'merchantJurisdiction' field specifies the jurisdiction in which the merchant operates. Previously, this field was referred to as the 'domicile country'.
       * @example DE
       */
      merchantJurisdiction: string
      /**
       * @description Full name of the merchant legal entity.
       * @example Test Merchant Entity Name
       */
      legalEntityName: string
      /**
       * @description Company registration number of merchant legal entity.
       * @example 123456789
       */
      companyRegistrationNumber: string
      /**
       * @description Merchant primary use case. Possible values include: AIS: Accounting package integration, AIS: Cash flow management, AIS: Credit risk analysis, AIS: Customer onboarding / verification, AIS: Personal finance management, PIS: eCommerce merchant payment, PIS: Funding an account, PIS: In store merchant payment, PIS: Paying a bill, PIS: Paying off debt
       * @example AIS: Accounting package integration
       */
      primaryUseCase: string
      /**
       * @description IBAN of merchant’s recipient bank account.
       * @example DE0000000000000000000
       */
      iban: string
      /**
       * @description BIC of merchant’s recipient bank account.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** @description Contains the sub-TPP details. */
    'member.SubTpp': {
      /** @description The list of sub-TPP ids returned. */
      childSubTppIds?: string[]
      /**
       * Format: string
       * @description Represents the creation date for the sub-TPP, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-09-22T17:00:00.000Z
       */
      createdAt?: string
      /**
       * @description The fully qualified domain name of the sub-TPP, also referred to as an absolute domain name. This specifies an exact location in the tree hierarchy of the Domain Name System (DNS). It must include all domain levels, including the top-level domain and the root zone.
       * @example somehost.example.com
       */
      domain?: string
      /**
       * @description The Token.io-generated `subTPPId` used by the reseller as `actingAs.refId` in token requests to identify the sub-TPP.
       * @example 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
       */
      id?: string
      /**
       * Format: byte
       * @description Specifies the image file containing the sub-TPP's logo as a byte array. Click <a href="https://gist.github.com/taterbase/2784890" target="_blank">here</a> for the JavaScript `fromCharCode` function needed to convert the byte array to a UTF-8 string.
       */
      logo?: string
      /**
       * @description The Token.io-generated member id for the reseller.
       * @example m:213xyzabc3453434
       */
      memberId?: string
      merchant?: components['schemas']['member.Merchant']
      /**
       * @description The recognised business name or DBA of the sub-TPP.
       * @example Sub-TPP Business Ltd
       */
      name?: string
      /**
       * @description The Token.io-generated unique identifier for the parent sub-TPP.
       * @example 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
       */
      parentSubTppId?: string
      /**
       * @description A list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case, in which this bank operates.
       * @example [
       *   "DE",
       *   "FR",
       *   "GB"
       * ]
       */
      restrictedCountries?: string[]
      status?: components['schemas']['member.SubTpp.Status']
      /**
       * @description A human-readable description of the reason behind the status.
       * @example This sub-TPP has been activated.
       */
      statusReasonInformation?: string
      /**
       * Format: string
       * @description The string representing the last update for the sub-TPP details, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.
       * @example 2022-09-22T17:00:00.000Z
       */
      updatedAt?: string
    }
    /**
     * @default INVALID_STATUS
     * @example ACTIVATED
     * @enum {string}
     */
    'member.SubTpp.Status':
      | 'INVALID_STATUS'
      | 'ACTIVATED'
      | 'REJECTED'
      | 'AWAITING_APPROVAL'
      | 'DEACTIVATED'
    RetrieveSubTppResponse: {
      subTpp?: components['schemas']['member.SubTpp']
    }
    RetrieveSubTppsResponse: {
      /**
       * @description The offset of the first item returned in the collection.
       * @example LerV6Jmex
       */
      offset?: string
      /** @description Contains each sub-TPP member onboarded by the reseller. */
      subTpps?: components['schemas']['member.SubTpp'][]
    }
    SetWebhookConfigRequest: {
      config?: components['schemas']['Config']
    }
    /** @description No data included or required in the response. */
    SetWebhookConfigResponse: Record<string, never>
    /** @description Specifies the information needed to request a transfer, standing order or access token. */
    StoreTokenRequestRequest: {
      requestOptions?: components['schemas']['TokenRequestOptions']
      requestPayload: components['schemas']['TokenRequestPayload']
    }
    StoreTokenRequestResponse: {
      tokenRequest?: components['schemas']['TokenRequest']
    }
    RefundResponse: {
      refund?: components['schemas']['Refund']
    }
    RefundsResponse: {
      refunds?: components['schemas']['Refund'][]
      paging?: components['schemas']['PagingInfo']
    }
    PayoutResponse: {
      payout?: components['schemas']['Payout']
    }
    PayoutsResponse: {
      payouts?: components['schemas']['Payout'][]
      paging?: components['schemas']['PagingInfo']
    }
    UploadKeyAndCertificateResponse: {
      /**
       * @description The unique identifier for the key.
       * @example XXXXXXX
       */
      keyId?: string
    }
    PagingInfo: {
      /**
       * Format: int32
       * @description The limit (maximum number of records to return) that was sent in the request. If the actual number of returned records is less then the limit, there are no more records left to fetch. <br>The maximum allowed limit is 200. If the passed limit is bigger than this, it will be set to 200.
       */
      limit?: number
      /**
       * @description Offset for the next page.
       * @example LerV6Jmex
       */
      offset?: string
    }
    /** @description The transaction amount and currency. */
    Amount: {
      /**
       * @description The transaction amount with up to four digits after the decimal point.
       * @example 10.23
       */
      value: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
    }
    /** @description The debtor information. Account information (one of) is required. */
    RefundDebtorInformation: (
      | components['schemas']['SepaAccount']
      | components['schemas']['FasterPaymentsAccount']
    ) & {
      /**
       * @description The owner name for the debtor account.
       * @example John Smith
       */
      name?: string
      /**
       * @description The ultimate debtor name.
       * @example John Smith
       */
      ultimateDebtorName?: string
      address?: components['schemas']['Address']
    }
    /** @description Address */
    Address: {
      addressLine?: string[]
      /**
       * @description Street number
       * @example 221B
       */
      streetName?: string
      /**
       * @description Building number
       * @example 2C
       */
      buildingNumber?: string
      /**
       * @description Post Code
       * @example E1 6AN
       */
      postCode?: string
      /**
       * @description Town name
       * @example Saint Ives
       */
      townName?: string
      countrySubDivision?: string[]
      /**
       * @description Country
       * @example United Kingdom
       */
      country?: string
    }
    /** SepaAccount */
    SepaAccount: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** SepaInstantAccount */
    SepaInstantAccount: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** FasterPaymentsAccount */
    FasterPaymentsAccount: {
      /**
       * @description The unique identifier for the bank account in the UK.
       * @example 12345678
       */
      accountNumber: string
      /**
       * @description The domestic bank code used to route money transfers between financial institutions in the UK.
       * @example 123456
       */
      sortCode: string
    }
    /** ElixirAccount */
    ElixirAccount: components['schemas']['PLAccount'] | components['schemas']['PLIbanAccount']
    /** PLAccount */
    PLAccount: {
      /**
       * @description The payee's Elixir-registered bank account number.
       * @example FRAX82783423
       */
      accountNumber: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** PLIbanAccount */
    PLIbanAccount: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** EUDomesticNonEuroAccount */
    EUDomesticNonEuroAccount:
      | components['schemas']['EUIbanAccount']
      | components['schemas']['BbanAccount']
      | components['schemas']['ClearingNumberAccount']
    /** EUDomesticNonEuroInstantAccount */
    EUDomesticNonEuroInstantAccount:
      | components['schemas']['EUIbanAccount']
      | components['schemas']['BbanAccount']
      | components['schemas']['ClearingNumberAccount']
    /** EUIbanAccount */
    EUIbanAccount: {
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** BbanAccount */
    BbanAccount: {
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** ClearingNumberAccount */
    ClearingNumberAccount: {
      /**
       * @description Represents a country-specific bank account number. The BBAN is the last part of the IBAN when used for international funds transfers. Every country has its own specific BBAN format and length. At present, there is no common EU or other standard unifying the BBAN. This is why IBAN was introduced to standardise international bank transfers.
       * @example NWBK60161331926819
       */
      bban: string
      /**
       * @description The bank clearing number or BC number is a number used for the identification of financial institutions in Switzerland and Liechtenstein. Bank clearing numbers are connected to the Swiss Interbank Clearing and the EuroSIC system.
       * @example 87654321
       */
      clearingNumber?: string
    }
    /** BankGiroAccount */
    BankGiroAccount: {
      /**
       * @description The unique identifier for the bank account in Sweden (known in Swedish as Bankgironummer), it consists of 7 or 8 digits.
       * @example 56781234
       */
      bankgiroNumber: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** PlusGiroAccount */
    PlusGiroAccount: {
      /**
       * @description The unique identifier for the Swedish money transaction system owned by <a href="https://www.nordea.com" target="blank">Nordea</a>.
       * @example 67812345
       */
      plusgiroNumber: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
    }
    /** @description The debtor information. */
    CorporateApiDebtorInformation: {
      /**
       * @description The ID for the debtor virtual account.
       * @example a12345
       */
      accountId: string
    }
    /** @description The Initiation payload for the refund. */
    RefundInitiation: {
      /**
       * @description The description of the refund.
       * @example refund for some reason
       */
      description?: string
      /**
       * @description The reference id from the customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      amount: components['schemas']['Amount']
      /**
       * @description The original payment id from Token.io's payments/transfers. This is required to initiate a refund. Token.io will check the original payment for the refund validation.
       * @example t:sdsds:sdsd
       */
      originalPaymentId: string
      /**
       * @description The registration id.
       * @example regId
       */
      registrationId?: string
      /**
       * @description The bank's payment service to be used for making a payment.
       * @example SEPA_INSTANT
       * @enum {string}
       */
      localInstrument: 'SEPA' | 'SEPA_INSTANT' | 'FASTER_PAYMENT'
      /**
       * @description The optional OnBehalfOfId is validated against sub-tpp ID of the member before initiating the refund.
       * @example [
       *   "c5a863bc-86f2-4418-a26f-25b24c7983c7",
       *   "6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s"
       * ]
       */
      onBehalfOfId?: string
      corporateApiDebtor?: components['schemas']['CorporateApiDebtorInformation']
    }
    /** @description The Initiation payload for the refund. */
    ResolvedRefundInitiation: {
      /**
       * @description The description for the refund.
       * @example refund for some reason
       */
      description?: string
      /**
       * @description The reference id from the customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      amount: components['schemas']['Amount']
      /**
       * @description The original payment id from Token payments/transfers. This is required to initiate a refund. Token.io will check the original payment for the refund validation.
       * @example t:sdsds:sdsd
       */
      originalPaymentId: string
      /**
       * @description The registraion id.
       * @example regId
       */
      registrationId?: string
      /**
       * @description The bank's payment service to be used for making a payment.
       * @example SEPA_INSTANT
       * @enum {string}
       */
      localInstrument: 'SEPA' | 'SEPA_INSTANT' | 'FASTER_PAYMENT'
      debtor: components['schemas']['RefundDebtorInformation']
      creditor: components['schemas']['CreditorInformation']
    }
    /** @description The refund object. */
    Refund: {
      /**
       * @description Token.io-generated refund id.
       * @example rf:12345abcd:abcd
       */
      id: string
      /**
       * @description The transaction id from the bank side. This can be empty if it is not available from the bank.
       * @example 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      bankTransactionId?: string
      /**
       * @description The Token.io member id of the TPP initiating this refund.
       * @example m:123456abcd:abcd
       */
      memberId: string
      /**
       * @description The date and time this refund object was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:43:07.000+00:00
       */
      createdDateTime: string
      /**
       * @description The date and time the current status, sub status, status reason information and authentication were last updated (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:45:07.000+00:00
       */
      updatedDateTime: string
      status: components['schemas']['RefundStatus']
      /**
       * @description The raw bank status. This field could be empty if no payment status is available on bank side.
       * @example ACPC
       */
      bankPaymentStatus?: string
      /**
       * @description A human-readable description of the reason behind the status.
       * @example The payment is settled on debtor side.
       */
      statusReasonInformation?: string
      initiation?: components['schemas']['ResolvedRefundInitiation']
    }
    /**
     * @description The Token.io Refund Initiation Status. <br/><br/> INITIATION_PENDING - Token.io has received the refund initiation and the initiation passed Token.io validation. <br/><br/> INITIATION_PROCESSING - the refund is processing on the bank side. Status can be updated to one of INITIATION_COMPLETED, INITIATION_REJECTED or INITIATION_FAILED.<br/>If the status is never updated by the bank within certain period of time, the status will stay INITIATION_PROCESSING forever and the corresponding status reason information field will reflect this fact.<br/><br/> INITIATION_COMPLETED - the refund initiation is successful. This does not guarantee the refund is settled.<br/><br/> INITIATION_REJECTED - the refund is rejected by the bank. More details are shared in the corresponding status reason information.  <br/><br/> INITIATION_FAILED - Token.io failed to create the initiation due to failures on the bank side, e.g. the bank is not available at the moment.
     * @default INITIATION_PENDING
     * @example INITIATION_COMPLETED
     * @enum {string}
     */
    RefundStatus:
      | 'INITIATION_PENDING'
      | 'INITIATION_PROCESSING'
      | 'INITIATION_COMPLETED'
      | 'INITIATION_REJECTED'
      | 'INITIATION_FAILED'
    /** @description The initiation payload for the payout. */
    PayoutInitiation: {
      /**
       * @description The description of the payout.
       * @example Reason for the payout.
       */
      description?: string
      /**
       * @description The reference id from the customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      /**
       * @description The onBehalfOfId of the payout.
       * @example [
       *   "c5a863bc-86f2-4418-a26f-25b24c7983c7",
       *   "6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s"
       * ]
       */
      onBehalfOfId?: string
      amount: components['schemas']['Amount']
      debtor: components['schemas']['CorporateApiDebtorInformation']
      creditor: components['schemas']['CreditorInformation']
      /**
       * @description the reference of this payment.
       * @example myReference
       */
      reference?: string
    }
    /** @description The Initiation payload for the refund. */
    ResolvedPayoutInitiation: {
      /**
       * @description The description for the payout.
       * @example payout for some reason
       */
      description?: string
      /**
       * @description The reference id from the customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      amount: components['schemas']['Amount']
      debtor: components['schemas']['CorporateApiDebtorInformation']
      creditor: components['schemas']['CreditorInformation']
    }
    /** @description The payout object. */
    Payout: {
      /**
       * @description Token.io generated payout id.
       * @example py:12345abcd:abcd
       */
      id: string
      /**
       * @description The transaction id from the bank side. This can be empty if it is not available from the bank.
       * @example 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      bankTransactionId?: string
      /**
       * @description The Token.io member id of the TPP initiating this payout.
       * @example m:123456abcd:abcd
       */
      memberId: string
      /**
       * @description The date and time this payout object was created The time this payment object was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:43:07.000+00:00
       */
      createdDateTime: string
      /**
       * @description The date and time the current status, sub status, status reason information and authentication were last updated (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:45:07.000+00:00
       */
      updatedDateTime: string
      status: components['schemas']['PayoutStatus']
      /**
       * @description The raw bank status. This field could be empty if no payment status is available on bank side.
       * @example ACPC
       */
      bankPaymentStatus?: string
      /**
       * @description A human-readable description of the reason behind the status.
       * @example The payment is settled on debtor side.
       */
      statusReasonInformation?: string
      initiation?: components['schemas']['ResolvedPayoutInitiation']
    }
    /**
     * @description The Token.io Payout Initiation Status. <br/><br/> INITIATION_PENDING - Token.io has received the payout initiation and the initiation passed Token.io validation. <br/><br/> INITIATION_PROCESSING - the payout is processing on the bank side. Status can be updated to one of INITIATION_COMPLETED, INITIATION_REJECTED or INITIATION_FAILED.<br/>If the status is never updated by the bank within certain period of time, the status will stay INITIATION_PROCESSING forever and the corresponding status reason information field will reflect this fact.<br/><br/> INITIATION_COMPLETED - the payout initiation is successful. This does not guarantee the payout is settled.<br/><br/> INITIATION_REJECTED - the payout is rejected by the bank. More details are shared in the corresponding status reason information.  <br/><br/> INITIATION_FAILED - Token.io failed to create the initiation due to failures on the bank side, e.g. the bank is not available at the moment.
     * @default INITIATION_PENDING
     * @example INITIATION_COMPLETED
     * @enum {string}
     */
    PayoutStatus:
      | 'INITIATION_PENDING'
      | 'INITIATION_PROCESSING'
      | 'INITIATION_COMPLETED'
      | 'INITIATION_REJECTED'
      | 'INITIATION_FAILED'
    /** @description Upload a key and certificate. */
    UploadKeyAndCertificate: {
      upload?: components['schemas']['keyAndCertificate'] | components['schemas']['keys']
    }
    /** @description The private key and certificate. */
    keyAndCertificate: {
      keyAndCertificate?: components['schemas']['keyAndCertificate_keyAndCertificate']
    }
    /** @description The private and public keys to be uploaded. */
    keys: {
      keys?: components['schemas']['keys_keys']
    }
    /**
     * @description Maximum total amount of payments in a given period under this VRP consent. If the `periodAlignment` is `CALENDAR`, the limit is pro-rated in the first period to the remaining number of days.
     * @example 20
     */
    PeriodicLimit: {
      /**
       * @description The transaction amount with up to four digits after the decimal point.
       * @example 1000.00
       */
      maximumAmount: string
      /**
       * @example MONTH
       * @enum {string}
       */
      periodType: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR'
      /**
       * @description Specifies whether the period starts on the consent start date or lines up with a calendar. If not specified, the CONSENT alignment is used.<br> The consent start date is defined by the `startDateTime` field of the consent (the time element is disregarded) or the date when consent is created if the startDateTime is not specified.
       * @example CALENDAR
       * @enum {string}
       */
      periodAlignment?: 'CONSENT' | 'CALENDAR'
    }
    /** @description Required authentication operation to proceed with consent creation. It is present only when the consent initiation request is created at the bank, but the consent is not authorised or rejected yet. */
    Authentication: {
      /**
       * @description This URL redirects the user in order to authorize the consent creation.
       * @example http://psu-redirect.com
       */
      redirectUrl: string
    }
    /** @description VRP object */
    Vrp: {
      /**
       * @description Token.io generated VRP id.
       * @example vrp:12345abcd:abcd
       */
      id: string
      /**
       * @description Token.io member id of the TPP initiating the payment.
       * @example m:123456abcd:abcd
       */
      memberId: string
      initiation: components['schemas']['vrpInitiation']
      /**
       * @description The time when this VRP object was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:43:07.123Z
       */
      createdDateTime: string
      /**
       * @description The date and time this VRP object was last updated (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:45:07.123Z
       */
      updatedDateTime: string
      status: components['schemas']['VrpStatus']
      /**
       * @description VRP id from the bank. Can be empty if not available on the bank side.
       * @example 4vn6aDyMiwBYbPDN
       */
      bankVrpId?: string
      /**
       * @description The raw bank status. Can be empty if no payment status is available on bank side.
       * @example AcceptedCreditSettlementCompleted
       */
      bankVrpStatus?: string
      /**
       * @description A human-readable description of the reason behind the status.
       * @example The payment is settled on the debtor's side.
       */
      statusReasonInformation?: string
      refundDetails?: components['schemas']['RefundDetails']
    }
    /** @description VRP initiation object */
    vrpInitiation: {
      /**
       * @description id of the VRP consent
       * @example vc:12345abcd:abcd
       */
      consentId: string
      /**
       * @description The reference id used between Token.io and the direct customer. It is required to be unique per customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      /**
       * @description Primary field for remittance information. Should contain a reference, as assigned by the creditor, to unambiguously refer to the payment transaction. The value of this field should appear on the bank statement and reconciliation file irrespective of the payment network being used. <br/><br/> It must have the same value as specified in the remittanceInformationPrimary field of the consent.
       * @example Sweepco
       */
      remittanceInformationPrimary: string
      /**
       * @description Secondary field for remittance information. Information supplied to enable the reconciliation of an entry in an unstructured form. Depending on the payment network, information from this field might or might not be included in the bank statement and reconciliation file. Should not exceed 140 characters in length.
       * @example Secondary remittance information.
       */
      remittanceInformationSecondary?: string
      amount: components['schemas']['Amount']
      /**
       * @description A flag indicting if the bank should do a funds confirmation check before accepting the payment - if true, the funds will be checked.
       * @default false
       * @example false
       */
      confirmFunds?: boolean
      risk?: components['schemas']['Risk']
    }
    /**
     * @description Token.io VRP Status. <br/><br/> `INITIATION_PENDING` - Token.io has received the payment initiation request and it has passed Token.io's validation. <br/><br/> `INITIATION_PROCESSING` - The VRP request has been aknowledged by the bank and is now being processed. <br/><br/> `INITIATION_COMPLETED` - Payment initiation has been completed. <br/><br/> `INITIATION_REJECTED` - The payment has been rejected. <br/><br/> `INITIATION_REJECTED_INSUFFICIENT_FUND` - The payment has been rejected because the funds check returned a negative result. <br/><br/> `INITIATION_FAILED` - Token.io failed to proceed with the initiation due to problems with reaching the bank. <br/><br/> `INITIATION_NO_FINAL_STATUS_AVAILABLE` - Payment status has not been updated for some time and Token.io has given up polling it. This is a final status, but it does not indicate success or failure. Please contact the bank to check the actual status of the payment.
     * @default INITIATION_PENDING
     * @example INITIATION_COMPLETED
     * @enum {string}
     */
    VrpStatus:
      | 'INITIATION_PENDING'
      | 'INITIATION_PROCESSING'
      | 'INITIATION_COMPLETED'
      | 'INITIATION_REJECTED'
      | 'INITIATION_REJECTED_INSUFFICIENT_FUND'
      | 'INITIATION_FAILED'
      | 'INITIATION_NO_FINAL_STATUS_AVAILABLE'
    VrpConsentResponse: {
      vrpConsent: components['schemas']['VrpConsent']
    }
    VrpConsentsResponse: {
      vrpConsents: components['schemas']['VrpConsent'][]
      pageInfo: components['schemas']['PageInfo']
    }
    VrpsResponse: {
      vrps: components['schemas']['Vrp'][]
      pageInfo: components['schemas']['PageInfo']
    }
    VrpResponse: {
      vrp?: components['schemas']['Vrp']
    }
    /** @description VRP consent object. */
    VrpConsent: {
      /**
       * @description Token.io generated VRP consent id.
       * @example vc:12345abcd:abcde
       */
      id: string
      /**
       * @description Token.io member id of the TPP that created this VRP consent.
       * @example m:123456abcd:abcd
       */
      memberId: string
      initiation: components['schemas']['vrpConsentInitiation']
      /**
       * @description The time this VRP consent object was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:43:07.123Z
       */
      createdDateTime: string
      /**
       * @description The last time this VRP consent object was updatedß (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2017-04-05T10:45:07.123Z
       */
      updatedDateTime: string
      status: components['schemas']['vrpConsentStatus']
      /**
       * @description VRP consent id from the bank. Can be empty if not available on the bank side.
       * @example 4jq34dwjgi9MCK2MXB9f7v
       */
      bankVrpConsentId?: string
      /**
       * @description The raw bank status. Can be empty if no consent status is available on the bank side.
       * @example AwaitingAuthorization
       */
      bankVrpConsentStatus?: string
      /**
       * @description A human-readable description of the reason behind the status.
       * @example The consent resource is awaiting user authorization.
       */
      statusReasonInformation?: string
      authentication?: components['schemas']['Authentication']
    }
    /**
     * @description Token.io VRP Consent Status. <br/><br/> `PENDING` - Token.io has received the request to create a VRP consent and it has passed Token.io's validation <br/><br/> `PENDING_MORE_INFO` - the initiaion lacks mandatory fields (<i>e.g.</i>, bankId) that have to be collected before connecting to the bank <br/><br/> `PENDING_REDIRECT_AUTH` - the consent request has been acknowledged by the bank and Token.io is awaiting user confirmation at the bank's page <br/><br/> `PENDING_REDIRECT_AUTH_VERIFICATION` - Token.io has received the callback information from the bank and is currently verifying it with the bank <br/><br/> `AUTHORIZED` - the VRP consent has been successfully authorized <br/><br/> `REJECTED` - the VRP consent has been rejected. More details are shared in the corresponding status reason information. <br/><br/> `REVOKED` - the VRP consent has been revoked by the user <br/><br/> `FAILED` - Token.io failed to proceed with the consent due to problems with reaching the bank or the user abandoning the flow (all `PENDING` statuses are turned into `FAILED` in 30 minutes after consent creation).
     * @default PENDING
     * @example AUTHORIZED
     * @enum {string}
     */
    vrpConsentStatus:
      | 'PENDING'
      | 'PENDING_MORE_INFO'
      | 'PENDING_REDIRECT_AUTH'
      | 'PENDING_REDIRECT_AUTH_VERIFICATION'
      | 'AUTHORIZED'
      | 'REJECTED'
      | 'REVOKED'
      | 'FAILED'
    /** @description The initiation payload for the VRP consent. */
    vrpConsentInitiation: {
      /**
       * @description Token.io id of the bank at which the consent should be created. Required if the custoner is not using Token.io Web App for the bank selection.
       * @example ob-modelo
       */
      bankId?: string
      /**
       * @description The reference id set by the customer creating the consent. This must be unique per customer. This value should not exceed 18 characters in length.
       * @example myRefId
       */
      refId: string
      /**
       * @description Primary field for remittance information. Should contain a reference, as assigned by the creditor, to unambiguously refer to the payment transactions under this consent. The value of this field should appear on the bank statement and reconciliation file irrespective of the payment network being used. This value should not exceed 35 characters in length.
       * @example Sweepco
       */
      remittanceInformationPrimary: string
      /**
       * @description Secondary field for remittance information. Information supplied to enable the reconciliation of an entry in an unstructured form. Depending on the payment network, information from this field will or will not be included in the bank statement and reconciliation file. Should not exceed 140 characters in length.
       * @example Additional remittance information.
       */
      remittanceInformationSecondary?: string
      /**
       * @description The date and time from which payments can be made (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format). Payments initiated before this time will be rejected. If not provided, the time of consent creation is used as a default. Cannot be earlier than today.
       * @example 2017-04-05T10:43:07.123+01:00
       */
      startDateTime?: string
      /**
       * @description The date and time before which payments can be made (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format). Payments initiated after this time will be rejected.
       * @example 2017-04-05T10:43:07.132+01:00
       */
      endDateTime?: string
      /**
       * @description An id of the ultimate client on whose behalf the consent should be created. If the consent is created on behalf of a sub-TPP, this field should contain the sub-TPP `referenceId`.
       * @example 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
       */
      onBehalfOfId?: string
      /**
       * @description The types of payments that can be made under this VRP consent.
       * @example SWEEPING
       * @enum {string}
       */
      vrpType: 'SWEEPING' | 'OTHER'
      /**
       * @description The bank's payment service to be used for making a payment.
       * @example SEPA_INSTANT
       * @enum {string}
       */
      localInstrument: 'SEPA' | 'SEPA_INSTANT' | 'FASTER_PAYMENTS'
      debtor?: components['schemas']['DebtorInformation']
      creditor: components['schemas']['CreditorInformation']
      /**
       * Format: The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @description Currency used for this VRP consent. All amounts specified in this consent are in this currency. All payments created under this consent should use this currency.
       * @example EUR
       */
      currency: string
      /**
       * @description The minimum amount allowed for individual payments made under this consent, with up to four digits after the decimal point It should not exceed the `maximumIndividualAmount` or any of the periodic limits `maximumAmount`.
       * @example 5.0
       */
      minimumIndividualAmount?: string
      /**
       * @description The maximum amount allowed for individual payments made under this consent, with up to four digits after the decimal point.
       * @example 10000.0
       */
      maximumIndividualAmount: string
      /** @description A list of periodic limits that are applied together as an intersection. At least one should be specified. */
      periodicLimits: components['schemas']['PeriodicLimit'][]
      /**
       * @description The total number of payments that can be done under this consent. Any new payments will be rejected if the consent is over this limit. Cannot be negative, 0 value is considered as not set.
       * @example 3
       */
      maximumOccurrences?: number
      /**
       * @description The TPP's URL where bank/Token.io should be calling back to. Note, the URL should not be under token.io domain.
       * @example https://www.myApp.com
       */
      callbackUrl: string
      /**
       * @description Specify a state for bank callbacks. If you don't specify a callback state, it will be generated by Token.io. If you specify a callback state, please ensure that it's globally unique. We recommend that you use globally unique identifiers (<i>e.g.</i>, UUID). ****The callback state should not exceed 256 characters, and can only contain alpha-numeric characters and the following characters: -_.~****
       * @example c070b02c-4cca-4ee1-9c1a-537c98ad162e
       */
      callbackState: string
      /**
       * @description The category code conforming to <a href="https://www.iso.org/standard/33365.html" target="_blank">ISO 18245</a>, relating to the type of services or goods provided by the merchant. A list of codes can be purchased <a href="https://www.iso.org/standard/79450.html" target="_blank">here</a>.
       * @example 5699-V
       */
      merchantCategoryCode?: string
      /**
       * @description Indicates whether the RefundAccount object should be included in the VRP created under this consent.
       * @default false
       * @example true
       */
      returnRefundAccount?: boolean
      risk?: components['schemas']['Risk']
    }
    /** @description Information about the current page, also provides indication if the next page exists. */
    PageInfo: {
      /**
       * Format: int32
       * @description The limit (maximum number of objects to return) applied to this page. <br>The default and maximum allowed limit is 200. If the passed limit was bigger than this or was not set/set to 0, it will be set to 200.
       * @default 200
       * @example 20
       */
      limit: number
      /**
       * @description Offset for the current page. If the offset has been provided in the request, this offset will be equal to the provided one. But if no offset was provided in the request (i.e. this is the first page) and the page is not empty, this field will be populated with a non-empty string. This may be helpful for loading the same page again, which might not always be possible with an empty offset due to a dynamic nature of the data. <br><br> The offset is opaque to a user and should not be parsed and/or understood in any way.
       * @example LerV6Jmex
       */
      offset?: string
      /**
       * @description Offset for the next page. If the page is empty, it is equal to this page offset. If the page is not empty, but there are no more objects to load (haveMore = false), it will be empty. <br><br>The offset is opaque to a user and should not be parsed and/or understood in any way.
       * @example KgwG8Qkat
       */
      nextOffset?: string
      /**
       * @description A boolean indicating if there are more objects to load, <i>i.e.</i> if the next page exists.
       * @default false
       * @example false
       */
      haveMore?: boolean
    }
    /** @description Debtor information. Account identifier is required. */
    DebtorInformation: (
      | components['schemas']['SepaAccount']
      | components['schemas']['SepaInstantAccount']
      | components['schemas']['FasterPaymentsAccount']
      | components['schemas']['ElixirAccount']
      | components['schemas']['EUDomesticNonEuroAccount']
      | components['schemas']['EUDomesticNonEuroInstantAccount']
      | components['schemas']['BankGiroAccount']
      | components['schemas']['PlusGiroAccount']
    ) & {
      /**
       * @description owner name for the debtor account
       * @example John Smith
       */
      name?: string
      /**
       * @description ultimate debtor name
       * @example John Smith
       */
      ultimateDebtorName?: string
      address?: components['schemas']['Address']
    }
    /** @description Creditor information. Account account information (one of) is required. */
    CreditorInformation: (
      | components['schemas']['SepaAccount']
      | components['schemas']['SepaInstantAccount']
      | components['schemas']['FasterPaymentsAccount']
      | components['schemas']['ElixirAccount']
      | components['schemas']['EUDomesticNonEuroAccount']
      | components['schemas']['EUDomesticNonEuroInstantAccount']
      | components['schemas']['BankGiroAccount']
      | components['schemas']['PlusGiroAccount']
    ) &
      Record<string, never> & {
        /**
         * @description The owner name for the creditor account.
         * @example Customer Inc.
         */
        name: string
        /**
         * @description The ultimate creditor name.
         * @example Customer Inc.
         */
        ultimateCreditorName?: string
        address?: components['schemas']['Address']
        /** @description The creditor's bank name. */
        bankName?: string
      }
    /** @description The refund-related information for this payment. This requires specific permission and is only available if `paymentInitiation.returnRefundAccount` is set to true. */
    RefundDetails: {
      refundAccount: components['schemas']['RefundAccount']
      /**
       * @description refund status for this payment
       * @example NONE
       * @enum {string}
       */
      paymentRefundStatus?: 'NONE' | 'PARTIAL' | 'FULL'
      settledRefundAmount?: Record<string, never> & components['schemas']['Amount']
      remainingRefundAmount?: Record<string, never> & components['schemas']['Amount']
    }
    GetBanksV2Response: {
      /** @description Contains information for each bank matching the request criteria. */
      banks?: components['schemas']['Bank'][]
      paging?: components['schemas']['Paging']
      /**
       * @description Sort banks by the value of rank.
       * @example [
       *   1,
       *   2,
       *   100
       * ]
       */
      rank?: number
      /**
       * @description Filters for banks that are part of the bank sub-group specified.
       * @example [
       *   "CMM Grand",
       *   "Banque Populaire",
       *   "La Banque"
       * ]
       */
      bankSubGroup?: string
    }
    PaymentResponse: {
      payment?: components['schemas']['Payment']
    }
    PaymentsResponse: {
      payments: components['schemas']['Payment'][]
      pageInfo: components['schemas']['PageInfo']
    }
    /**
     * @description This field provides a map of all fields requested for embedded authentication, with their values. The key is the id of the field from the authentication payload, for which this value is submitted.
     * @example {
     *   "123": "SMS message"
     * }
     */
    EmbeddedAuthFields: {
      [key: string]: string | undefined
    }
    Bank: {
      /**
       * @description The Token.io bank identifier.
       * @example ob-modelo
       */
      id?: string
      /**
       * @description The Business Identifier Code (BIC), <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a>, is the address assigned to a bank in order to send automated payments quickly and accurately to the banks concerned. It uniquely identifies the name and country, (and sometimes the branch) of the bank involved. BICs can be either 8 or 11 characters long.
       * @example BOFIIE2D
       */
      bic?: string
      /**
       * @description The commonly recognised name of the bank.
       * @example GoldBank
       */
      name?: string
      /**
       * @description The URI of the location of the square bank avatar icon.
       * @example https://example.com/path/full.png
       */
      logoUri?: string
      /** @description The name of the banking group in which this bank holds membership. */
      bankGroup?: string
      /** @description A list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case, in which this bank operates. */
      countries?: string[]
      openBankingStandard?: components['schemas']['OpenBankingStandard']
      /** @description Contains information used in embedded authentication flows. */
      credentialFields?: components['schemas']['CredentialField'][]
      mandatoryFields?: components['schemas']['MandatoryFieldsv2']
      maintenanceWindow?: components['schemas']['MaintenanceWindow']
      /** @description Contains bank-dependent formatting constraints indicating allowable characters, if any. */
      fieldsFormatInformation?: components['schemas']['FieldFormatInformation'][]
      /**
       * @description Payment methods/rails supported by the bank.
       * @example [
       *   "SEPA_INSTANT",
       *   "FASTER_PAYMENTS",
       *   "SEPA"
       * ]
       */
      supportedLocalInstruments?: string[]
      /**
       * @description Specifies the bank’s days and hours of operation in a normal week. Does not take into account bank-specific public holidays, which may or may not be considered out-of-operation time.
       * @example MON to FRI, 00:00 to 24:00 GMT+1
       */
      operationalTime?: string
      /**
       * Format: int32
       * @description Defines the number of transaction history records allowed per page, -1 (unlimited) or a positive integer (record limit).
       * @default -1
       * @example 65
       */
      transactionHistoryLimit?: number
      /**
       * Format: boolean
       * @description The bank connection supports fetching accounts.
       * @example true
       */
      supportsAccountList?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports fetching account details.
       * @example true
       */
      supportsAccountDetails?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports fetching account balances.
       * @example true
       */
      supportsAccountBalance?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports fetching transactions.
       * @example true
       */
      supportsTransactionList?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports fetching transaction details.
       * @example true
       */
      supportsTransactionDetails?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports the fetching standing orders.
       * @example true
       */
      supportsStandingOrderList?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports feting transactions using a date filter.
       * @example true
       */
      supportsTransactionsDateFilter?: boolean
      /**
       * Format: boolean
       * @description The bank connection only supports immediate redemption of transfers.
       * @example true
       */
      requiresOneStepPayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports single immediate payments.
       * @example true
       */
      supportsSinglePayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports future dated scheduled payments.
       * @example true
       */
      supportsScheduledPayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports recurring payments/standing orders.
       * @example true
       */
      supportsStandingOrder?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports requesting of refund accounts.
       * @example true
       */
      supportsReturnRefundAccount?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports returning the refund account holder name.
       * @example true
       */
      supportsReturnRefundAccountHolderName?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports confirmation of available funds.
       * @example true
       */
      supportsFundsConfirmation?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports variable recurring payments.
       * @example true
       */
      supportsVariableRecurringPayment?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports app-to-app on IOS devices.
       * @example true
       */
      supportsAppToAppOnIos?: boolean
      /**
       * Format: boolean
       * @description The bank connection supports app-to-app on Android devices.
       * @example true
       */
      supportsAppToAppOnAndroid?: boolean
    }
    /** @description Contains the fields required by the bank, which the TPP must populate in the token request, where applicable. */
    MandatoryFieldsv2: components['schemas']['MandatoryFieldsv2_inner'][]
    /** IbanAccount */
    IbanAccount: {
      /**
       * @description The International Bank Account Number.
       * @example GB29NWBK60161331926819
       */
      iban: string
      /**
       * @description The Business Identifier Code, ISO standard <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a>."
       * @example BUKBGB22
       */
      bic?: string
    }
    /** BankgiroAccount */
    BankgiroAccount: {
      /**
       * @description The unique identifier for the bank account in Sweden (known in Swedish as Bankgironummer).
       * @example 56781234
       */
      bankgiroNumber: string
      /**
       * @description The Business Identifier Code, ISO standard <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a>.
       * @example AAFCSEMMXXX
       */
      bic?: string
    }
    /** PlusgiroAccount */
    PlusgiroAccount: {
      /**
       * @description The unique identifier for the Swedish money transaction system owned by <a href="https://www.nordea.com" target="blank">Nordea</a>.
       * @example 67812345
       */
      plusgiroNumber: string
      /**
       * @description The Business Identifier Code, ISO standard <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a>.
       * @example AAFCSEMMXXX
       */
      bic?: string
    }
    /** UKDomesticAccount */
    UKDomesticAccount: {
      /**
       * @description The unique identifier for the bank account in the UK.
       * @example 12345678
       */
      accountNumber: string
      /**
       * @description The domestic bank code used to route money transfers between financial institutions in the UK.
       * @example 123456
       */
      sortCode: string
    }
    /** PLDomesticAccount */
    PLDomesticAccount: {
      /**
       * @description The unique identifier for a bank account in Poland.
       * @example 61109010140000071219812874
       */
      accountNumber: string
      /**
       * @description The Business Identifier Code, ISO standard <a href="https://www.iso.org/standard/84108.html"  target="_blank">ISO 9362</a>.
       * @example WBKPPLPP
       */
      bic?: string
    }
    /** @description The initiation payload for the payment. */
    PaymentInitiation: {
      /**
       * @description The Token.io id of the bank the creates the consent. ****This field is required if the customer is not using the Token.io Web App for bank selection, <i>i.e.</i>, API only.****
       * @example ob-modelo
       */
      bankId?: string
      /**
       * @description The reference id set by the TPP creating the consent. This must be unique to the TPP and should not exceed 18 characters in length.
       * @example uniqueid
       */
      refId: string
      /**
       * @description The primary field for remittance information. It should contain a reference, as assigned by the creditor, to unambiguously refer to the payment transactions under this consent. The value of this field should appear on the bank statement and reconciliation file irrespective of the payment network being used. This value should not exceed 35 characters in length.
       * @example RemittancePrimary
       */
      remittanceInformationPrimary: string
      /**
       * @description The secondary field for remittance information: information supplied to enable the reconciliation of an entry in an unstructured form. Depending on the payment network, information from this field may or may not be included in the bank statement and reconciliation file. It should not exceed 140 characters in length.
       * @example RemittanceSecondary
       */
      remittanceInformationSecondary?: string
      /**
       * @description The id of the ultimate client on whose behalf the consent is created. If the consent is created on behalf of a sub-TPP, this field should contain the sub-TPP referenceId. This should be in UUID format.
       * @example c5a863bc-86f2-4418-a26f-25b24c7983c7
       */
      onBehalfOfId?: string
      amount: components['schemas']['Amount']
      /**
       * @description The bank's payment service used to make the payment.<br/>Depending on the requested local instrument, different account identifiers are required in the debtor and creditor fields.<br/><ul><li><b>FASTER_PAYMENTS</b> require the `sortCode` and `accountNumber` to be populated.<br/></li><li><b>SEPA</b> and <b>SEPA_INSTANT</b> require the `iban`, the `bic` is optional.<br/></li><li><b>ELIXIR</b> requires either the `iban` or the Polish domestic `accountNumber`, the `bic` is optional.<br/></li><li><b>BANKGIRO</b> requires the `bankgiroNumber`, the `bic` is optional.<br/></li><li><b>PLUSGIRO</b> requires the `plusgiroNumber`, the `bic` is optional.<br/></li><li><b>EU_DOMESTIC_NON_EURO</b> and <b>EU_DOMESTIC_NON_EURO_INSTANT</b> require either the `iban` or `bban`, the `bic` is optional, OR the `bban` is required and `clearingNumber` is optional.<br/></li></ul>
       * @example SEPA
       * @enum {string}
       */
      localInstrument:
        | 'SEPA'
        | 'SEPA_INSTANT'
        | 'FASTER_PAYMENTS'
        | 'ELIXIR'
        | 'EU_DOMESTIC_NON_EURO'
        | 'EU_DOMESTIC_NON_EURO_INSTANT'
        | 'BANKGIRO'
        | 'PLUSGIRO'
      debtor?: components['schemas']['DebtorInformation']
      creditor: components['schemas']['CreditorInformation']
      /**
       * @description This field specifies the future date for executing the payment in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format.". ****This field is optional and can only be used if the bank supports scheduled payments and the customer has permission to initiate future dated payments.****
       * @example 2023-04-29
       */
      executionDate?: string
      /**
       * @description This field determines whether the bank will carry out a refund confirmation check before accepting the payment. Default = false.
       * @example false
       */
      confirmFunds?: boolean
      /**
       * @description Supported banks will provide the debtor account details selected by the user during authorization. Default = false.
       * @example false
       */
      returnRefundAccount?: boolean
      /**
       * @description This field determines whether an auto-conversion of a single immediate payment to a future dated payment can be disabled. This may be required if the payment was initiated outside bank working hours. Default = false.
       * @example false
       */
      disableFutureDatedPaymentConversion?: boolean
      /**
       * @description The TPP's url that Token.io calls back to. This url should not be under the token.io domain and must be https/SSL secure.
       * @example https://tpp.com/callback
       */
      callbackUrl: string
      /**
       * @description Specify a state for bank callbacks. If you don't specify a callback state, it will be generated by Token.io. If you specify a callback state, please ensure that it's globally unique. We recommend that you use globally unique identifiers (<i>e.g.</i>, UUID). ****The callback state should not exceed 256 characters, and can only contain alpha-numeric characters and the following characters: -_.~****
       * @example c070b02c-4cca-4ee1-9c1a-537c98ad162e
       */
      callbackState?: string
      /**
       * @description The charge bearer for the transaction. This may be required for international payments. <br/> CRED - all transaction charges are to be borne by the creditor. <br/> DEBT - all transaction charges are to be borne by the debtor. <br/> SHAR - both parties bear their own charges. <br/> SLEV - both parties bear their own charges (recommended for SEPA payments).
       * @example CRED
       * @enum {string}
       */
      chargeBearer?: 'UNKNOWN_CHARGE_BEARER' | 'CRED' | 'DEBT' | 'SHAR' | 'SLEV'
      risk?: components['schemas']['Risk']
    }
    /**
     * @description The Token.io Payment Status: <br/><br/> <b>INITIATION_PENDING</b> - Token.io has received the payment initiation and the initiation has passed Token.io's validation. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PENDING_MORE_INFO</b> - The payment initiation request lacks the required fields (<i>e.g.</i>, bankId) that have to be collected before connecting to the bank. If you're using Token.io's Web App, these fields will be collected from the user by the Web App. Otherwise this is not a recoverable state. You'll need to populate the required information and make the payment initiation call again. Information about the missing data can be found in the `statusReasonInformation` field.<br/><br/> <b>INITIATION_PENDING_REDIRECT_AUTH</b> - The payment request has been acknowledged by the bank and Token.io is awaiting user confirmation on the bank's page. If Token.io's Web App is not in use, you'll need to redirect the user to the url found in the authentication field and await a callback from the bank (if you're handling callbacks) or from Token.io (if Token.io handles the callbacks for you).<br/><br/> <b>INITIATION_PENDING_REDIRECT_AUTH_VERIFICATION</b> - Token.io has received the callback information from the bank and is currently verifying it with the bank. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PENDING_EMBEDDED_AUTH</b> - Token.io is waiting for the requested input from the user. If Token.io's Web App is not in use, you must provide the requested information to process the payment. Required information can be found in the authentication object of the payment.<br/><br/> <b>INITIATION_PENDING_EMBEDDED_AUTH_VERIFICATION</b> - Token.io is waiting for the bank to process the provided information. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PENDING_DECOUPLED_AUTH</b> - Token.io is polling status from the bank while the user authenticates in a decoupled way. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PENDING_REDEMPTION</b> - The payment is ready for a redemption. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PENDING_REDEMPTION_VERIFICATION</b> - Token.io is waiting for the bank to redeem the payment. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or poll the payment.<br/><br/> <b>INITIATION_PROCESSING</b> - The payment initiation request has been acknowledged by the bank and is now being processed. No action is required; await the bank's response for the next step, <i>e.g.</i>, a webhook with the status update, or a polling call. if necessary Wait for additional webhooks to be sent. If a webhook is not received, then use a polling call every 120 min.
     *   The status can be updated to one of `INITIATION_COMPLETED`, `INITIATION_REJECTED` or `INITIATION_NO_FINAL_STATUS_AVAILABLE` (if the status polling period is exhausted).<br/><br/>
     * <b>INITIATION_COMPLETED</b> - The final status (usually) indicating that the payment initiation request has been successfully completed. This doesn't guarantee that the payment is settled. Also it can change to `CANCELED` for future dated payments (see below).<br/><br/> <b>INITIATION_REJECTED</b> - The final status indicating that the payment initiation request has been rejected by the bank. More details are shared in the corresponding `statusReasonInformation` field.<br/><br/> <b>INITIATION_REJECTED_INSUFFICIENT_FUNDS</b> - The final status indicating that the payment  initiation request has been rejected due to insufficient funds.<br/><br/> <b>INITIATION_FAILED</b> - The final status indicating that Token.io failed to proceed with the initiation due to problems with reaching the bank, or because payment authentication has not been completed within the allowed time period. More details are shared in the corresponding `statusReasonInformation` field. <br/><br/> <b>INITIATION_DECLINED</b> - The final status indicating that the payment initiation request has been declined, in most cases actively by the user.<br/><br/> <b>CANCELED</b> - The final status indicating that the payment initiation request has been cancelled before being executed. ****This status is only used for scheduled payments and can even be set after the status has been set to `INITIATION_COMPLETED` before the execution date.****<br/><br/> <b>INITIATION_NO_FINAL_STATUS_AVAILABLE</b> - The payment status has not been updated for some time and Token.io has stopped polling it. The recommended maximum polling time is 30 days. The status will change to `INITIATION_NO_FINAL_STATUS_AVAILABLE` after 30 days if the bank does not update the status. This is a final status, but it does not indicate success or failure. Please contact the bank to check the actual status of the payment.<br/><br/>
     *   <b>SETTLEMENT_IN_PROGRESS</b> - This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status.Token.io is waiting for the payment to reach the payee bank. No action is required; await the next step, <i>e.g.</i>, sends a webhook with the status update, or a polling call. The status will change to `SETTLEMENT_IN_PROGRESS` soon after receives the final status from the debtor bank.<br/><br/>
     *   <b>SETTLEMENT_COMPLETED</b> - This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. The payment has reached the payee bank and Token.io has matched the transaction in the TPP’s settlement account to the initiated payment. For instant payments, `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes from payment initiation, at the latest. For non-instant payments, the time to reach `SETTLEMENT_COMPLETED` will depend on the clearing period for the payment. <br/><br/>
     *   <b>SETTLEMENT_INCOMPLETE</b> - This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. Reconciliation has failed. This happens when Token.io fails to automatically find the corresponding transaction in the TPP’s settlement account. This status is returned after 1 day for instant payments and 15 days for non-instant payments, if the payment is not in the pending state. The status will persist for 31 days for instant payments and 45 days for non-instant payments, respectively, after the payment creation date.<br/><br/>
     * @default INITIATION_PENDING
     * @example INITIATION_COMPLETED
     * @enum {string}
     */
    PaymentStatus:
      | 'INITIATION_PENDING'
      | 'INITIATION_PENDING_MORE_INFO'
      | 'INITIATION_PENDING_REDIRECT_AUTH'
      | 'INITIATION_PENDING_REDIRECT_AUTH_VERIFICATION'
      | 'INITIATION_PENDING_EMBEDDED_AUTH'
      | 'INITIATION_PENDING_EMBEDDED_AUTH_VERIFICATION'
      | 'INITIATION_PENDING_DECOUPLED_AUTH'
      | 'INITIATION_PENDING_REDEMPTION'
      | 'INITIATION_PENDING_REDEMPTION_VERIFICATION'
      | 'INITIATION_PROCESSING'
      | 'INITIATION_COMPLETED'
      | 'INITIATION_REJECTED'
      | 'INITIATION_REJECTED_INSUFFICIENT_FUNDS'
      | 'INITIATION_FAILED'
      | 'INITIATION_EXPIRED'
      | 'INITIATION_DECLINED'
      | 'CANCELED'
      | 'INITIATION_NO_FINAL_STATUS_AVAILABLE'
      | 'SETTLEMENT_IN_PROGRESS'
      | 'SETTLEMENT_COMPLETED'
      | 'SETTLEMENT_INCOMPLETE'
    /**
     * @description The refund status for this payment.
     * @example NONE
     * @enum {string}
     */
    PaymentRefundStatus: 'NONE' | 'PARTIAL' | 'FULL'
    /** @description The payment object. */
    Payment: {
      /**
       * @description The Token.io generated payment id.
       * @example pm:12345abcd:abcd
       */
      id: string
      /**
       * @description The Token.io member id of the TPP that created this payment.
       * @example m:123456abcd:abcd
       */
      memberId: string
      initiation: components['schemas']['PaymentInitiation']
      /**
       * @description This field indicates whether a payment has been converted from a single immediate payment to a future dated payment. This can happen if the payment is initiatied outside bank working hours and `paymentInitiation.disableFutureDatedPaymentConversion` = false.
       * @default false
       * @example false
       */
      convertedToFutureDatedPayment?: boolean
      refund?: components['schemas']['RefundDetails']
      status: components['schemas']['PaymentStatus']
      /**
       * @description A human-readable description of the reason behind the status. This can contain <a href="https://www.iso.org/standards.html" target="_blank">ISO standard codes</a> as well, <i>e.g.</i>, MS01 for the <a href="https://www.stet.eu" target="_blank">STET</a> standard.
       * @example The payment is settled on the debtor side.
       */
      statusReasonInformation?: string
      /**
       * @description The raw bank status. This field can be left empty if information is not available from the bank side. This includes the standard specific status which also follows <a href="https://www.iso.org/standards.html" target="_blank">ISO standards</a>.
       * @example ACPC
       */
      bankPaymentStatus?: string
      /**
       * @description The payment id from the bank. Not all banks provide this. This field can be left empty if information is not available from the bank side.
       * @example 1231423
       */
      bankPaymentId?: string
      /**
       * @description The transaction id from the bank when the transaction is settled. Not all banks provide this. This field can be left empty if information is not available from the bank.
       * @example 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
       */
      bankTransactionId?: string
      authentication?: components['schemas']['Authenticationv2']
      /**
       * @description The date and time this payment object was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-04-05T17:02:11.954Z
       */
      createdDateTime: string
      /**
       * @description The date and time this payment object was last updated (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-04-05T17:02:11.954Z
       */
      updatedDateTime: string
    }
    /** @description This is used to specify additional details for risk scoring for payments. */
    Risk: {
      /**
       * @description The unique customer identifier for the user with the merchant.
       * @example 0000789123
       */
      psuId?: string
      /**
       * @description This field describes the context of the payment context. This field is an <a href="https://www.openbanking.org.uk" target="_blank">OBIE</a> standard and also maps to <a href="https://bankio.at/openbanking/knowledge-base/NextGenPSD2" target="_blank">NextGenPsd2</a>'s `purposeCode` and `categoryPurposeCode` fields. We recommend that the TPP populates this field.
       * @example PISP_PAYEE
       * @enum {string}
       */
      paymentContextCode?:
        | 'BILL_PAYMENT'
        | 'ECOMMERCE_GOODS'
        | 'ECOMMERCE_SERVICES'
        | 'PARTY_TO_PARTY'
        | 'PISP_PAYEE'
        | 'OTHER'
      /**
       * @description The category code conforming to the Recommended UK Purpose Code in the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> Payment Messaging List, related to the type of services or goods corresponding to the underlying purpose of the payment. This also includes the values listed for <a href="https://www.stet.eu" target="_blank">STET</a>’s purpose code and <a href="https://www.openbanking.org.uk" target="_blank">OBIE's </a> standards.
       * @example DVPM
       * @enum {string}
       */
      paymentPurposeCode?: 'CASH' | 'CORT' | 'DVPM' | 'INTC' | 'TREA'
      /**
       * @description The category code conforming to <a href="https://www.iso.org/standard/33365.html" target="_blank">ISO 18245</a>, relating to the type of services or goods provided by the merchant. A list of codes can be purchased <a href="https://www.iso.org/standard/79450.html" target="_blank">here</a>."
       * @example 4812
       */
      merchantCategoryCode?: string
      /**
       * @description To be provided if the AccountType is known.
       * @example BUSINESS
       * @enum {string}
       */
      beneficiaryAccountType?:
        | 'PERSONAL'
        | 'JOINT_PERSONAL'
        | 'PERSONAL_SAVINGS_ACCOUNT'
        | 'BUSINESS'
        | 'BUSINESS_SAVINGS_ACCOUNT'
        | 'CHARITY'
        | 'COLLECTION'
        | 'CORPORATE'
        | 'GOVERNMENT'
        | 'EWALLET'
        | 'INVESTMENT'
        | 'ISA'
        | 'PREMIER'
        | 'WEALTH'
        | 'PENSION'
      /**
       * @description Indicates if Payee has a contractual relationship with the Payment Initiation Service Provider (PISP).
       * @example true
       */
      contractPresentIndicator?: boolean
      /**
       * @description Indicates whether the Payment Initiation Service Provider (PISP) has immutably prepopulated payment details for the user.
       * @example true
       */
      beneficiaryPrepopulatedIndicator?: boolean
    }
    /** @description The account to which the refunds should be sent. */
    RefundAccount: (
      | components['schemas']['IbanAccount']
      | components['schemas']['UKDomesticAccount']
      | components['schemas']['PLDomesticAccount']
      | components['schemas']['BankgiroAccount']
      | components['schemas']['PlusgiroAccount']
      | components['schemas']['SepaAccount']
      | components['schemas']['FasterPaymentsAccount']
    ) & {
      /**
       * @description The name of the account owner.
       * @example John Smith
       */
      name?: string
    }
    /** @description The authentication operation required to proceed with payment creation. This is present when additional steps are required to authorize the payment. */
    Authenticationv2: components['schemas']['RedirectUrl'] | components['schemas']['EmbeddedAuth']
    RedirectUrl: {
      /**
       * @description The url used to redirect the user to in order to authorize the consent creation. This should be populated if the payment status is `INITIATION_PENDING_REDIRECT_AUTH`.<br/> If the status is: INITIATION_PENDING_REDIRECT_AUTH, the authentication object should have the redirectUrl. Redirect the user to this url in order to proceed with the flow.<br/> If the TPP is responsible for handling the callbacks, the bank will callback to the TPP's callbackUrl provided in the payment initiation, after the user finishes authentication at the bank. Send the query of the bank's callback url to Token.io via the POST /callback/initiation endpoint to proceed with the flow.<br/> Otherwise Token.io will receive the callback from the bank and callback the TPP when the bank callback is processed. Fetch the payment object and check its status for further steps, if any.
       * @example http://psu-redirect.com
       */
      redirectUrl: string
    }
    /** @description Information and fields presented to the user in order to collect the requested data. This should be populated if the payment status is `INITIATION_PENDING_EMBEDDED_AUTH`.<br/> If the status is: INITIATION_PENDING_EMBEDDED_AUTH, the authentication object should list the required embedded fields. Collect the data from the user and provide it using POST /v2/payments/{paymentId}/embedded-auth to proceed with the flow. */
    EmbeddedAuth: {
      /**
       * @description The text displayed to a user. This should contain the instructions the user needs to proceed with the authentication.
       * @example Instructions for authentication.
       */
      description?: string
      /**
       * @description A Base64 representation of an image displayed to the user.
       * @example YWJAeXoyWhAeXohteQ
       */
      image?: string
      /**
       * @description The Flicker code displayed to the user.
       * @example FLICKERCODE
       */
      flickerCode?: string
      /** @description The required fields. The values for these are collected from the user. */
      fields: components['schemas']['RequiredField'][]
      /**
       * @description This field indicates whether the previously submitted values are incorrect and whether the user needs to retry. If `isRetry` = true, the values are resubmitted. Default = false.
       * @example false
       */
      isRetry?: boolean
    }
    RequiredField: {
      /**
       * @description The field type that determines how the field is presented to the user. <br/><br/> FIELD - displays a form with a text input field, use `displayName` value to add a label<br/><br/> PASSWORD - displays a form with a password input field, use `displayName` value to add a label<br/><br/> CHOICE_FIELD - displays a form that allows the user to choose one of the provided options, use `displayName` value to add a label<br/><br/> CONFIRMATION - displays the buttons for the provided options, usually the description contains a question that requires confirmation or rejection.
       * @enum {string}
       */
      type: 'FIELD' | 'PASSWORD' | 'CHOICE_FIELD' | 'CONFIRMATION'
      /**
       * @description The ID used when passing the value of this field to Token.io.
       * @example 67891234
       */
      id: string
      /**
       * @description The name of the requested field displayed to the user.
       * @example Password:
       */
      displayName: string
      /** @description A list of options for the user to select from. For example, it can be an SCA method choice (SMS message, phone call <i>etc</i>.), or confirm/decline options for a confirmation page. The customer sends one of the values back to Token.io with the corresponding id. */
      options?: string[]
    }
    /** @description The request does not have valid authentication credentials needed to perform the operation. */
    Error: {
      /**
       * @description A description of the error.
       * @example This is a description of the error.
       */
      message?: string
      /**
       * @description The TPP-provided unique value captured by Token.io and sent across to the bank to be stored with the request throughout its lifecycle as an audit-trail aid.
       * @example 5678912345
       */
      tokenTraceId?: string
    }
    /** @description Error object providing details about the error. */
    ErrorWithCode: {
      /**
       * @description A textual error code categorising the error.
       * @example InternalServerError
       */
      errorCode: string
      /**
       * @description A description of the error that occurred and a possible way to fix it.
       * @example `RefId` should not be longer than 35 symbols.
       */
      message: string
    } & components['schemas']['Error']
    /**
     * FieldError
     * @description An error object providing details about an error caused by a particular field or fields in the request. Possible error code values include: <br/><br/> <b>Field.NotUnique</b> - The field value should be unique, but it isn't.<br/><br/> <b>Field.Expected</b> - A field is expected/required but is missing altogether. <br/><br/> <b>Field.InvalidFormat</b> - A field is present but has an invalid format. This includes invalid value type (<i>e.g.</i>, not a number where a number is expected) and an invalid format (<i>e.g.</i>, a value is too long). <br/><br/> <b>Field.Invalid</b> - A field is present but has an invalid value. This covers all cases, where a field is present and invalid, that are not covered by `Field.InvalidFormat`.
     */
    FieldError: {
      /** @description A list of paths to the problematic fields. */
      paths: string[]
    } & components['schemas']['ErrorWithCode']
    /** @description Error object providing details about an error related to the debtor bank. Possible error code values include: <br/><br/> - `Bank.RegistrationNotFound` - unable to find registration of the calling member with the given bank <br/><br/> - `Bank.FeatureNotSupported` - bank does not support VRP <br/><br/> */
    TokenBankError: {
      /** @example FieldBank.RegistrationNotFound */
      errorCode?: Record<string, never>
      /**
       * @description Token.io bank id.
       * @example ob-modelo
       */
      bankId?: string
    } & components['schemas']['ErrorWithCode']
    /** @description The error object returned when given payment cannot be found: ResourceNotFound. */
    PaymentNotFoundError: {
      /** @example NOT_FOUND */
      errorCode?: Record<string, never>
      /**
       * @description The requested entity, the `paymentID`, was not found.
       * @example pm2:12345abcd:abcde
       */
      paymentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description The error returned when the member is not authorized to perform the given operation: PermissionDenied. <br/>This error message will be accompanied by the reason from the bank. Typically this means the access token has expired and the TPP needs the user to re-authenticate with the bank. */
    PemissionDeniedError: {
      /** @example PermissionDenied */
      errorCode?: Record<string, never>
    } & components['schemas']['ErrorWithCode']
    /** @description Resource exhausted. Too many requests. */
    ResourceExhaustedError: {
      /** @example RESOURCE_EXHAUSTED */
      errorCode?: Record<string, never>
      /**
       * @description The maximum number of requests has been reached.
       * @example Resource exhausted. Check quota.
       */
      paymentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description The operation was not implemented, supported or enabled by the bank. */
    NotImplementedError: {
      /** @example UNIMPLEMENTED */
      errorCode?: Record<string, never>
      /**
       * @description The operation was not implemented,supported or enabled by the bank.
       * @example Not implemented.
       */
      paymentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description Service is unavailable, likely due to a transient condition; this is usually corrected with a retry. */
    ServiceUnavailableError: {
      /** @example UNAVAILABLE */
      errorCode?: Record<string, never>
      /**
       * @description The service is unavailable, likely due to a transient condition; this is usually corrected with a retry.
       * @example Unavailable
       */
      paymentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description The deadline expired before the operation could complete. */
    GatewayTimeoutError: {
      /** @example DEADLINE_EXCEEDED */
      errorCode?: Record<string, never>
      /**
       * @description The deadline expired before the operation could complete.
       * @example Deadline exceeded.
       */
      paymentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description Error object retured when PAN is detected in the submitted initiation payload. The error code value is `PanDetected`. */
    PanDetectedError: {
      /** @example PanDetected */
      errorCode?: Record<string, never>
    } & components['schemas']['ErrorWithCode']
    /** @description Error object returned when given VRP consent cannot be found. The error code value is `Resource.NotFound`. */
    VrpConsentNotFoundError: {
      /** @example Resource.NotFound */
      errorCode?: Record<string, never>
      /**
       * @description VRP consent id.
       * @example vc:12345abcd:abcde
       */
      vrpConsentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description Error object retured when operation requires the VRP consent to be authorized, but it is not. The error code value is `Resource.ConsentNotAuthorized`. */
    VrpConsentNotAuthorizedError: {
      /** @example Resource.ConsentNotAuthorized */
      errorCode?: Record<string, never>
      /**
       * @description VRP consent id.
       * @example vc:12345abcd:abcde
       */
      vrpConsentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description Error object returned in the case of a control parameter violation or a field mismatch with what is requested in the consent. The error code value is Rules.VrpConsentViolation. */
    VrpConsentViolationError: {
      /** @example Rules.VrpConsentViolation */
      errorCode?: Record<string, never>
      /**
       * @description VRP consent id.
       * @example vc:12345abcd:abcde
       */
      vrpConsentId: string
    } & components['schemas']['ErrorWithCode']
    /** @description Error object returned when the given VRP cannot be found. The error code value is `Resource.NotFound`. */
    VrpNotFoundError: {
      /** @example Resource.NotFound */
      errorCode?: Record<string, never>
      /**
       * @description VRP id.
       * @example vrp:12345abcd:abcde
       */
      vrpId: string
    } & components['schemas']['ErrorWithCode']
    /** @description This could refer to either an error on Token.io’s end or an error on the bank side. When the bank reports a 5xx error, Token.io sets `"token-external-error": "true"` as a header in the HTTP response, indicating that the "internal" error originates from the  When one of Token.io's internal services fails or when the bank reports a 4xx error, this header is not populated. The absence of this response header should be interpreted as `"token-external-error": "false"`. */
    ServerError: {
      /**
       * @description A description of the error.
       * @example This is a description of the error.
       */
      message?: string
      /**
       * @description The TPP-provided unique value captured by Token.io and sent across to the bank to be stored with the request throughout its lifecycle as an audit-trail aid.
       * @example 5678912345
       */
      tokenTraceId?: string
    }
    inline_response_400: {
      error?: components['schemas']['Error']
    }
    inline_response_403: {
      error: components['schemas']['PemissionDeniedError']
    }
    inline_response_404: {
      error: components['schemas']['PaymentNotFoundError']
    }
    inline_response_429: {
      error: components['schemas']['ResourceExhaustedError']
    }
    inline_response_500: {
      error?: {
        /**
         * @description This is a textual error code categorising the error.
         * @example InternalServerError
         */
        errorCode?: string
      } & components['schemas']['ServerError']
    }
    inline_response_501: {
      error: components['schemas']['NotImplementedError']
    }
    inline_response_503: {
      error: components['schemas']['ServiceUnavailableError']
    }
    inline_response_504: {
      error: components['schemas']['GatewayTimeoutError']
    }
    inline_response_400_1: {
      error: components['schemas']['FieldError']
    }
    vrpconsents_body: {
      initiation: components['schemas']['vrpConsentInitiation']
      /** @description A flag confirming that the user has accepted Payment Initiation Service Provider (PISP) consent. ***Only required for TPPs using Token.io's licence.*** */
      pispConsentAccepted?: boolean
    }
    inline_response_400_2: {
      error:
        | components['schemas']['FieldError']
        | components['schemas']['PanDetectedError']
        | components['schemas']['TokenBankError']
    }
    inline_response_404_1: {
      error: components['schemas']['VrpConsentNotFoundError']
    }
    vrps_body: {
      initiation: components['schemas']['vrpInitiation']
    }
    inline_response_400_3: {
      error:
        | components['schemas']['FieldError']
        | components['schemas']['PanDetectedError']
        | components['schemas']['VrpConsentNotAuthorizedError']
        | components['schemas']['VrpConsentViolationError']
    }
    inline_response_404_2: {
      error: components['schemas']['VrpNotFoundError']
    }
    refunds_body: {
      initiation: components['schemas']['RefundInitiation']
    }
    payouts_body: {
      initiation: components['schemas']['PayoutInitiation']
    }
    v2_payments_body: {
      initiation: components['schemas']['PaymentInitiation']
      /**
       * @description This field confirms whether or not the user has accepted Payment Initiation Service Provider (PISP) consent. ****This is only required for TPPs using Token.io's licence.****
       * @default false
       * @example false
       */
      pispConsentAccepted?: boolean
      /**
       * @description This field provides a map of the initial embedded authentication fields, with their values. The list of the required initial credentials can be found in the bank metadata. Please use the id of each field as a key in the map. <br/><br/> Using this field is optional. Even if a bank requires initial embedded authentication fields, you may choose not to populate the `initialEmbeddedAuth` field. In this case you'll be able to provide these fields later in the flow as part of an embedded authentication step.
       * @example {
       *   "username": "John Smith"
       * }
       */
      initialEmbeddedAuth?: {
        [key: string]: string | undefined
      }
    }
    paymentIdEmbeddedAuthBody: {
      embeddedAuth?: components['schemas']['EmbeddedAuthFields']
    }
    inline_response_400_4: {
      error: components['schemas']['FieldError'] | components['schemas']['TokenBankError']
    }
    keyAndCertificate_keyAndCertificate: {
      /**
       * @description The key used for the refund.
       * @example xxxxxxxx
       */
      privateKey?: string
      /**
       * @description The certificate used for the refund.
       * @example xxxxx
       */
      certificate?: string
      /**
       * @description The name of the certificate used for the refund.
       * @example QWAC_PSDGB-FCA-795904
       */
      certificateName?: string
    }
    keys_keys: {
      /**
       * @description The private key used for the refund.
       * @example xxxxxxxx
       */
      privateKey?: string
      /**
       * @description The public key used for the refund.
       * @example xxxxx
       */
      publicKey?: string
    }
    MandatoryFieldsv2_inner: {
      /** @description The products this mandatory fields entry applies to. */
      products?: string[]
      /** @description The paths to the mandatory fields for this entry. */
      fieldPaths?: string[]
      /** @description The types of payments (International/Domestic) this mandatory fields entry applies to. */
      paymentTypes?: string[]
      /** @description The local instruments this mandatory fields entry applies to. */
      localInstruments?: string[]
    }
    /** @description Contains the request payload to create a virtual account. */
    CreateVirtualAccountRequest: {
      /**
       * @description The alias name that identifies the virtual account.
       * @example Account Alias
       */
      accountNickName?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency: string
      /**
       * @description Specifies another SubTpp or Merchant for whom the account was created 'on behalf of'.
       * @example [
       *   "c5a863bc-86f2-4418-a26f-25b24c7983c7",
       *   "6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s"
       * ]
       */
      onBehalfOfId?: string
      /**
       * @description The product associated with the account. Contact your account manager for the correct code to use.
       * @example O1200001
       */
      productCode: string
    }
    /** @description Contains the response to the submitted request. */
    CreateVirtualAccountResponse: {
      virtualAccount?: components['schemas']['VirtualAccount']
    }
    /** @description Contains the response to the create virtual account request. */
    GetVirtualAccountByIdResponse: {
      virtualAccount?: components['schemas']['VirtualAccount']
    }
    /** @description Contains the response to the get virtual accounts request. */
    GetVirtualAccountsResponse: {
      pageInfo?: components['schemas']['PageInfo']
      virtualAccount?: components['schemas']['VirtualAccount'][]
    }
    /**
     * @default INVALID
     * @example ACTIVE
     * @enum {string}
     */
    'VirtualAccount.Status': 'INVALID' | 'ACTIVE' | 'CLOSED' | 'BLOCKED' | 'CLIENT_BLOCKED'
    VirtualAccount: {
      /**
       * @description The system-generated, unique bank account id, which specifies the account.
       * @example pa:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
       */
      accountId?: string
      /**
       * @description The name of this account.
       * @example Account Name
       */
      accountName?: string
      /**
       * @description The alias name that identifies the virtual account.
       * @example Account Alias
       */
      accountNickName?: string
      /**
       * @description The unique identifier for the bank account in the UK.
       * @example 12345678
       */
      accountNumber?: string
      /**
       * @description The available account balance at the time of the query. For example, the previous day's closing balance +/- transactions during the day, and any overdraft facilities.
       * @example 1572.38
       */
      availableBalance?: string
      /**
       * @description The code allocated to a financial institution by the <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a> Registration Authority as described in <a href="https://www.iso.org/standard/84108.html" target="_blank">ISO 9362</a> "Banking - Banking telecommunication messages - Business identification code (BIC)".
       * @example HBUKGB7F261
       */
      bic?: string
      /**
       * @description The account balance pending clearance, which may include uncleared items and any transactions yet to settle.
       * @example 1282.79
       */
      bookedBalance?: string
      /**
       * @description The cash balance in an account that can be immediately withdrawn or used in financial transactions. Until funds have cleared, they're considered to be pending and customers are unable to use them in transactions.
       * @example 1167.32
       */
      clearedBalance?: string
      /**
       * @description A nation with its own government, occupying a particular territory containing the address.
       * @example UK
       */
      country?: string
      /**
       * Format: string
       * @description The date this account was created (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2021-08-11
       */
      createdDateTime?: string
      /**
       * @description The <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> three letter currency code.
       * @example EUR
       */
      currency?: string
      /**
       * @description The International Bank Account Number, used when sending interbank transfers or wiring money from one bank to another, especially across international borders. It consists of a two-letter country code followed by two check digits and up to thirty-five alphanumeric characters.
       * @example GB29NWBK60161331926819
       */
      iban?: string
      /**
       * @description The number assigned to a branch of a bank, typically containing six digits in the "##-##-##" format and most commonly used in the UK and Ireland.
       * @example 12-34-56
       */
      sortCode?: string
      status?: components['schemas']['VirtualAccount.Status']
      /**
       * Format: string
       * @description The date and time this account was last updated (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       */
      updatedDateTime?: string
    }
    /** @description Details of the bank's planned or unplanned maintenance window. */
    MaintenanceWindow: {
      /**
       * @description The start time of the maintenance window (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-05-03T12:28:20.466Z
       */
      startTime?: string
      /**
       * @description The end time of the maintenance window (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2023-05-03T12:40:25.47Z
       */
      endTime?: string
      /**
       * @description The bank status:<ul><li><b>NO_DOWNTIME_EXPECTED</b> - the bank is currently connected, accepting API calls, and returning appropriate responses</li><li><b>DOWNTIME_EXPECTED</b> - there is a planned outage between the `startTime` and `endTime` specified</li><li><b>OUTAGE</b> - connection interrupted; the bank cannot currently accept API calls for this service between the `startTime` and `endTime` specified</li>
       * @default INVALID
       * @example OUTAGE
       * @enum {string}
       */
      type?: 'INVALID' | 'NO_DOWNTIME_EXPECTED' | 'DOWNTIME_EXPECTED' | 'OUTAGE'
      /**
       * @description The bank product:<ul><li><b>AIS</b> - Account Information Services</li><li><b>SIP</b> - all payment services including Single Immediate Payments, Future Dated Payments, Standing Orders</li>
       * @default INVALID
       * @example SIP
       * @enum {string}
       */
      productType?: 'INVALID' | 'AIS' | 'SIP'
    }
  }
  responses: {
    /** @description The client specified an invalid argument */
    BadResponse: {
      content: {
        'application/json': components['schemas']['inline_response_400']
      }
    }
    /** @description The client specified an invalid argument */
    InvalidArgumentRequest: {
      content: {
        'application/json': components['schemas']['inline_response_400']
      }
    }
    /** @description The authorization information is missing or invalid */
    UnauthenticatedResponse: {
      content: {
        'application/json': components['schemas']['inline_response_400']
      }
    }
    /** @description An unexpected or internal server error */
    UnexpectedErrorResponse: {
      content: {
        'application/json': components['schemas']['inline_response_500']
      }
    }
    /** @description Permission to access this endpoint is denied */
    PermissionDeniedResponse: {
      content: {
        'application/json': components['schemas']['inline_response_403']
      }
    }
    /** @description The requested entity, such as a TPP, was not found */
    CustomerNotFoundResponse: {
      content: {
        'application/json': components['schemas']['inline_response_404']
      }
    }
    /** @description The requested entity, such as a account, was not found */
    AccountNotFoundResponse: {
      content: {
        'application/json': components['schemas']['inline_response_404']
      }
    }
    /** @description Bad request */
    BadRequestResponse: {
      content: {
        'application/json': components['schemas']['inline_response_400_1']
      }
    }
    /** @description The requested entity, such as a payment, was not found */
    PaymentNotFoundResponse: {
      content: {
        'application/json': components['schemas']['inline_response_404']
      }
    }
    /** @description Too many requests */
    TooManyRequestsResponse: {
      content: {
        'application/json': components['schemas']['inline_response_429']
      }
    }
    /** @description The operation was not implemented */
    NotImplementedResponse: {
      content: {
        'application/json': components['schemas']['inline_response_501']
      }
    }
    /** @description Service is unavailable */
    ServiceUnavailableResponse: {
      content: {
        'application/json': components['schemas']['inline_response_503']
      }
    }
    /** @description Gateway has timed out */
    GatewayTimeoutResponse: {
      content: {
        'application/json': components['schemas']['inline_response_504']
      }
    }
    /** @description VRP consent not found */
    VrpConsentNotFoundResponse: {
      content: {
        'application/json': components['schemas']['inline_response_404_1']
      }
    }
  }
  parameters: {
    /**
     * @description The maximum number of records to return.
     * @example 10
     */
    'Paging-Limit': number
    /**
     * @description The offset from the previous page.
     * @example LerV6Jmex
     */
    'Paging-Offset': string
    /**
     * @description Lower bound for a refund creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only refunds created at or after the given date will be returned.
     * @example 2010-01-01
     */
    'FilterRefund-StartDate': string
    /**
     * @description Upper bound for a refund creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only refunds created at or before the given date will be returned.
     * @example 2010-01-01
     */
    'FilterRefund-EndDate': string
    /**
     * @description The associated account info consent id.
     * @example acount-info-consent-1234
     */
    'Consent-Id-Header': string
    /**
     * @description The forwarded IP Address header field consists of the corresponding http request IP Address field between user and TPP. If not available, the TPP shall use the IP Address used by the TPP when submitting this request.
     * @example 192.168.8.78
     */
    'PSU-IP-Address': string
    /** @description The forwarded Agent header field of the HTTP request between user and TPP, if available. */
    'PSU-User-Agent': string
    /**
     * @description The UUID (Universally Unique Identifier) for a user's device, if available. The UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.
     * @example 99435c7e-ad88-49ec-a2ad-99ddcb1f5555
     */
    'PSU-Device-Id': string
    /**
     * @description The forwarded Geo Location of the corresponding http request between user and TPP if available.
     * @example GEO:52.506931;13.144558
     */
    'PSU-Geo-Location': string
    /**
     * @description The account id. Available account ids can be found in the account info consent.
     * @example 1234567890
     */
    'Account-Id': string
    /**
     * @description The account id. Available account ids can be found in the account info consent.
     * @example 1234567890
     */
    'Transaction-Id': string
    /**
     * @description The payment id.
     * @example 1234567890
     */
    'Payment-Id': string
    /**
     * @description The standing order id.
     * @example 1234567890
     */
    'Standing-Order-Id': string
    /**
     * @description The consent id.
     * @example 1234567890
     */
    'Consent-Id': string
    /**
     * @description Optional lower bound for a transaction's booking date as returned by the bank, in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose bank booking date is equal to or later than the given date will be regarded.
     * @example 2020-12-12
     */
    'Start-Date': string
    /**
     * @description Optional upper bound for a transaction's booking date as returned by the bank (= original booking date), in the format 'YYYY-MM-DD' (e.g. '2016-01-01'). If specified, then only transactions whose bank booking date is equal to or earlier than the given date will be regarded.
     * @example 2020-12-24
     */
    'End-Date': string
    /**
     * @description Filters payments by their ids - returns only payments with ids listed in this parameter.
     * @example [
     *   "pm2:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN",
     *   "pm2:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA"
     * ]
     */
    'Filter-Ids': string[]
    /**
     * @description Invert ids query - returns only payments with ids not listed in the ids parameter.
     * @example false
     */
    'Filter-InvertIds': boolean
    /**
     * @description Filters payments by their statuses - returns only payments with statuses listed in this parameter.
     * @example [
     *   "INITIATION_COMPLETED",
     *   "INITIATION_REJECTED"
     * ]
     */
    'Filter-Statuses': components['schemas']['PaymentStatus'][]
    /**
     * @description Invert statuses query - returns only payments with statuses not listed in the statuses parameter.
     * @example true
     */
    'Filter-InvertStatuses': boolean
    /**
     * @description Returns only payments created after this time (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
     * @example 2022-04-05T17:00:00.000Z
     */
    'Filter-CreatedAfter': string
    /**
     * @description Returns only payments created before this time (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
     * @example 2022-04-05T17:00:00.000Z
     */
    'Filter-CreatedBefore': string
    /**
     * @description Filters payments by their `refId` values - returns only payments with `refIds` listed in this parameter.
     * @example [
     *   "ShBdcTeqFabqJJhUF",
     *   "N5cJDFsQzVca3Q"
     * ]
     */
    'Filter-RefIds': string[]
    /**
     * @description Filters payments by the `onBehalfOfId` value - returns only payments with `onBehalfOfId` specified in this parameter.
     * @example c5a863bc-86f2-4418-a26f-25b24c7983c7
     */
    'Filter-OnBehalfOfId': string
    /**
     * @description Filters payments by their refund status values - returns only payments with refund statuses listed in this parameter.
     * @example [
     *   "PARTIAL",
     *   "NONE"
     * ]
     */
    'Filter-RefundStatuses': components['schemas']['PaymentRefundStatus'][]
    /**
     * @description Returns payments in a partial format - with only id and status fields populated.
     * @example true
     */
    'Format-Partial': boolean
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  'GatewayService.GetBalances': {
    /**
     * Get account balances
     * @description The `GET /account-balance` endpoint retrieves the balances for multiple bank accounts.
     */
    parameters?: {
      /**
       * @description A comma-separated list of account ids for which you wish to retrieve account balances.
       * @example [
       *   "a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV",
       *   "a:9TFpwkcQmcsMbdjQcpdjfsEBosDw28503fAAGPEMF2MVF19hfk3nc",
       *   "a:rtmv254gaskGLdkadQvdNesk2Y9ferbvpaom5mvepm0mv2nfGnaix"
       * ]
       */
      query?: {
        accountId?: string[]
      }
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBalancesResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetAccounts': {
    /**
     * Get accounts
     * @description The `GET /accounts` endpoint retrieves information for all bank accounts.
     */
    parameters?: {
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetAccountsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetAccount': {
    /**
     * Get account information
     * @description The `GET /accounts/{accountId}` endpoint retrieves the information for a specific bank account.
     */
    parameters: {
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
      /**
       * @description The system-generated, unique bank account id, which specifies the account for which the information is requested.
       * @example a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
       */
      path: {
        accountId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetAccountResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetBalance': {
    /**
     * Get an account balance
     * @description The `GET /accounts/{accountId}/balance` endpoint retrieves the balance for a given bank account.
     */
    parameters: {
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
      /** @description The unique bank account id, which specifies the account for which the information is requested. */
      path: {
        accountId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBalanceResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.ConfirmFunds': {
    /**
     * Confirm available funds
     * @description The `PUT /accounts/{accountId}/funds-confirmation` endpoint confirms that sufficient funds are available in the account.
     */
    parameters: {
      /**
       * @description The system-generated, unique bank account id, which specifies the account for which the information is requested.
       * @example a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
       */
      path: {
        accountId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmFundsRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['ConfirmFundsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTransactions': {
    /**
     * Get account transactions
     * @description The `GET /accounts/{accountId}/transactions` endpoint retrieves information for all transactions in a given account.
     */
    parameters: {
      /**
       * @description The offset for the current page. If the offset has been provided in the request, this offset will be equal to the provided one. But if no offset was provided in the request (<i>i.e.</i> this is the first page) and the page is not empty, this field will be populated with a non-empty string. This may be helpful for loading the same page again, which might not always be possible with an empty offset due to a dynamic nature of the data. <br>The offset is not visible to a user and should not be parsed and/or understood in any way.
       * @example LerV6Jmex
       */
      /** @description The maximum number of records to return. This must be less than 200. */
      /** @description The earliest transaction date requested, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format. */
      /** @description The latest transaction date requested, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format. */
      query: {
        'page.offset'?: string
        'page.limit': number
        startDate?: string
        endDate?: string
      }
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
      /**
       * @description The system-generated unique bank account id, which specifies the account for which the information is requested.
       * @example a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
       */
      path: {
        accountId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTransactionsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTransaction': {
    /**
     * Get transaction information
     * @description The `GET /accounts/{accountId}/transaction/{transactionId}` endpoint retrieves information for a specific transaction in a given account.
     */
    parameters: {
      /**
       * @description The user's IP address if the user is currently logged in with the TPP. If the customer  IP address is supplied (recommended), it is inferred that the user is present during the session (<i>i.e.</i>, the request is user-initiated; adding a `customer-initiated` = `true` header makes this explicit). For AIS calls, if the customer's IP address is not provided in the request, the bank assumes it is a TPP-initiated request and may limit the TPP to 4 TPP-initiated access attempts within a given 24-hour period.
       * @example 172.16.254.1
       */
      header?: {
        'token-customer-ip-address'?: string
      }
      /** @description The unique bank account id, which specifies the account for which the information is requested. */
      /**
       * @description The unique transaction identifier, which specifies the transaction requested.
       * @example 42909b155d4942299c39017686b5dc36
       */
      path: {
        accountId: string
        transactionId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTransactionResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetBanks': {
    /**
     * Get banks v1
     * @description The `GET /banks` endpoint retrieves a list of Token.io-integrated banks matching the parameters specified.
     */
    parameters?: {
      /**
       * @description The index of the page currently being retrieved.
       * @example 1
       */
      /** @description The number of records per page. */
      /** @description The key to sort the result. This can be `name` (<i>i.e.</i>, bank name), `provider`, or `country`. */
      /**
       * @description The Token.io-assigned member id of the TPP.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      /** @description Filters for banks with a `bankId` (case-insensitive) matching any of the ids listed, up to a maximum of 1000. Only exact (full string) matches are returned. */
      /** @description Filters for banks with a name or identifiers containing this search string. */
      /**
       * @description Filters for banks for which the TPP represented by this `tppId` has access.
       * @example 4h27g823-g73s-07v3-l49s-prte94bf21v
       */
      /** @description Filters for banks that are accessed through any of the listed providers. */
      /**
       * @description Filters for banks with a BIC (or BLZ, if German) that matches this `bankCode`. The BIC must have a string length of 8 or 11. The BLZ must have a string length of 8.
       * @example NBAGDE3E
       */
      /** @description Filters for banks that are located in the countries specified by this list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case. */
      /** @description Filters for banks that support payment initiation. */
      /** @description Filters for banks that support receiving payments. */
      /** @description Filters for the banks that support retrieving balances */
      /** @description Filters for banks that support future dated scheduled payments. */
      /** @description Filters for banks that support recurring payments/standing orders. */
      /** @description Filters for banks that only support immediate redemption of transfers. */
      /** @description Filters for the banks that support confirmation of available funds. */
      /** @description Filters for the banks that support request of refund account. */
      /** @description Filters for banks that support retrieving transactions by date filter. */
      /** @description Filters for banks that support retrieval of account information. */
      /** @description Filters for banks that support single immediate payments. */
      /** @description Filters for banks that support variable recurring payments. */
      /** @description Filters for banks whose BIC matches any of the listed BICs (case-insensitive), up to a maximum of 1000. */
      /** @description Filters for banks that support any of the listed payment networks. */
      /** @description Filters for banks that are part of the bank group specified. */
      /**
       * @description Filters for banks that are part of the bank sub-group specified.
       * @example [
       *   "CMM Grand",
       *   "Banque Populaire",
       *   "La Banque"
       * ]
       */
      query?: {
        page?: number
        perPage?: number
        sort?: string
        memberId?: string
        ids?: string[]
        search?: string
        tppId?: string
        providers?: string[]
        bankCode?: string
        countries?: string[]
        'bankFeatures.supportsSendPayment.value'?: boolean
        'bankFeatures.supportsReceivePayment.value'?: boolean
        'bankFeatures.supportsBalance.value'?: boolean
        'bankFeatures.supportsScheduledPayment.value'?: boolean
        'bankFeatures.supportsStandingOrder.value'?: boolean
        'bankFeatures.requiresOneStepPayment.value'?: boolean
        'bankFeatures.supportsFundsConfirmation.value'?: boolean
        'bankFeatures.supportsReturnRefundAccount.value'?: boolean
        'bankFeatures.supportsTransactionsDateFilter.value'?: boolean
        'bankFeatures.supportsAccountInformation.value'?: boolean
        'bankFeatures.supportsSinglePayment.value'?: boolean
        'bankFeatures.supportsVariableRecurringPayment.value'?: boolean
        bics?: string[]
        supportedPaymentNetworks?: string[]
        bankGroup?: string
        bankSubGroup?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBanksResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetBanksCountries': {
    /**
     * Get bank countries
     * @description The `GET /banks/countries` endpoint retrieves the list of countries that have Token.io-integrated banks which match the parameters specified.
     */
    parameters?: {
      /**
       * @description Filters for banks with bank ids that are represented in this list of ids (case-insensitive), up to a maximum of 1000.
       * @example [
       *   "goldbank",
       *   "opalbank",
       *   "platinumbank"
       * ]
       */
      /** @description Filters for banks with names or identifiers that contain this search string (case sensitive). */
      /** @description Filters for banks to which the TPP with this `tppId` has access. */
      /** @description Filters for banks with a BIC (or BLZ, if German) that matches this `bankCode`. The BIC must have a string length of 8 or 11. The BLZ must have a string length of 8. */
      /** @description Filters for banks that are located in the countries specified by this list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case. */
      /** @description Filters for banks that are accessed through any of this list of providers. */
      /** @description Filters for banks that support payment initiation. */
      /** @description Filters for banks that support the receipt of payments. */
      /** @description Filters for the banks that support retrieving account balances. */
      /** @description Filters for banks that support future dated scheduled payments. */
      /** @description Filters for banks that support standing orders/recurring payments. */
      /** @description Filters for banks that only support immediate redemption of transfer tokens. */
      /** @description Filters for banks that support confirmation of available funds. */
      /** @description Filters for banks that support the request of refund account. */
      /** @description Filters for banks that support retrieving transactions by date filter. */
      /** @description Filters for banks that support retrieving account information using Account Information Services (AIS). */
      /** @description Filters for banks that support single immediate payments. */
      /** @description Filters for banks that support variable recurring payments. */
      /**
       * @description The Token.io-assigned member id of the TPP.
       * @example m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
       */
      /** @description Filters for banks that support any of the listed payment networks. */
      query?: {
        ids?: string[]
        search?: string
        tppId?: string
        bankCode?: string
        countries?: string[]
        providers?: string[]
        'bankFeatures.supportsSendPayment.value'?: boolean
        'bankFeatures.supportsReceivePayment.value'?: boolean
        'bankFeatures.supportsBalance.value'?: boolean
        'bankFeatures.supportsScheduledPayment.value'?: boolean
        'bankFeatures.supportsStandingOrder.value'?: boolean
        'bankFeatures.requiresOneStepPayment.value'?: boolean
        'bankFeatures.supportsFundsConfirmation.value'?: boolean
        'bankFeatures.supportsReturnRefundAccount.value'?: boolean
        'bankFeatures.supportsTransactionsDateFilter.value'?: boolean
        'bankFeatures.supportsAccountInformation.value'?: boolean
        'bankFeatures.supportsSinglePayment.value'?: boolean
        'bankFeatures.supportsVariableRecurringPayment.value'?: boolean
        memberId?: string
        supportedPaymentNetworks?: string[]
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBanksCountriesResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.RetrieveSubTpps': {
    /**
     * Get sub-TPPs
     * @description The `GET /member/sub-tpps` endpoint retrieves a list of all sub-TPPs for a reseller.
     */
    parameters: {
      /**
       * @description The offset for the current page. If the offset has been provided in the request, this offset will be equal to the provided one. But if no offset was provided in the request (<i>i.e.</i> this is the first page) and the page is not empty, this field will be populated with a non-empty string. This may be helpful for loading the same page again, which might not always be possible with an empty offset due to a dynamic nature of the data. <br>The offset is not visible to a user and should not be parsed and/or understood in any way.
       * @example LerV6Jmex
       */
      /** @description The maximum number of records to return. This must be less than 200. */
      /** @description Filters the sub-TPPs by the list of company names submitted. */
      /** @description Filters the sub-TPPs by the list of registration dates submitted. */
      query: {
        'page.offset'?: string
        'page.limit': number
        'filter.byCompanyNames'?: string[]
        'filter.byRegistrationDates'?: string[]
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RetrieveSubTppsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a sub-tpp, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.CreateSubTpp': {
    /**
     * Create a sub-TPP
     * @description The `POST /member/sub-tpps` endpoint creates a new sub-TPP for a reseller.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSubTppRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CreateSubTppResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a sub-tpp, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.RetrieveSubTpp': {
    /**
     * Get sub-TPP information
     * @description The `GET /member/sub-tpps/{subTppId}` endpoint retrieves the details of the specified sub-TPP for a reseller.
     */
    parameters: {
      /** @description This id specifies the sub-TPP to be retrieved. */
      path: {
        subTppId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RetrieveSubTppResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a sub-tpp, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.DeleteSubTpp': {
    /**
     * Delete a sub-TPP
     * @description The `DELETE /member/sub-tpps/{subTppId}` endpoint deletes an existing sub-TPP for a reseller.
     */
    parameters: {
      /**
       * @description Specifies the sub-TPP to delete.
       * @example 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
       */
      path: {
        subTppId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['DeleteSubTppResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a sub-tpp, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.RetrieveSubTppChildren': {
    /**
     * Get sub-TPP children
     * @description The `GET /member/sub-tpps/{subTppId}/children` endpoint retrieves the sub-TPP children for given sub-TPP.
     */
    parameters: {
      /** @description Specifies the sub-TPP for which the children are to be retrieved. */
      path: {
        subTppId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RetrieveSubTppChildrenResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a sub-tpp, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetBanksStatus': {
    /**
     * Get bank statuses
     * @description The `GET /reports/banks/status` endpoint returns the current AIS and PIS service status along with server status for all banks.
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBanksStatusResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetBankStatus': {
    /**
     * Get a bank status
     * @description The `GET /reports/banks/{bankId}/status` endpoint returns the current AIS and PIS service status for a specific bank.
     */
    parameters: {
      /**
       * @description The Token.io bank identifier, identical to the `id` in the repsonse to `GET /banks`.
       * @example goldbank
       */
      path: {
        bankId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBankStatusResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.StoreTokenRequest': {
    /**
     * Initiate a token request
     * @description The `POST /token-requests` endpoint persists the required information used by AIS requests and PIS requests using the API and the Token.io Web App.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['StoreTokenRequestRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['StoreTokenRequestResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTokenRequestResultWithStatus': {
    /**
     * Get a token request
     * @description The `GET /token-requests/{tokenRequestId}/result` endpoint checks whether a token request result is available. This endpoint will return a `PENDING` status while the result is not available. The status will become `PROCESSED` once the result is available. If the request is rejected by the bank, the status will become `REJECTED`. The status will become `EXPIRED` if the request is not processed or rejected before the token request expiration.
     */
    parameters: {
      /** @description The token request id received in response to the original token request. */
      path: {
        tokenRequestId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTokenRequestResultWithStatusResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.OnBankAuthCallback': {
    /**
     * Initiate a callback
     * @description The `POST /callback/initiation` endpoint processes a bank authorization callback notification. If you're responsible for handling callbacks, the bank will callback to your `callbackUrl` provided in the payment initiation, after the user finishes authentication at the bank. Send the query of the bank's callback url to Token.io via the `POST /callback/initiation` endpoint to process the payment.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['OnBankAuthCallbackRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['OnBankAuthCallbackResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTokens': {
    /**
     * Get tokens
     * @description The `GET /tokens` endpoint retrieves a list of all tokens for the authenticated member.
     */
    parameters: {
      /** @description Specifies the type of token returned. */
      /**
       * @description The offset for the current page. If the offset has been provided in the request, this offset will be equal to the provided one. But if no offset was provided in the request (<i>i.e.</i> this is the first page) and the page is not empty, this field will be populated with a non-empty string. This may be helpful for loading the same page again, which might not always be possible with an empty offset due to a dynamic nature of the data. <br>The offset is not visible to a user and should not be parsed and/or understood in any way.
       * @example LerV6Jmex
       */
      /** @description The maximum number of records to return. This must be less than 200. */
      /** @description Identifies the payer's account. */
      /** @description Identifies the payee/beneficiary's account. */
      /**
       * @description The filtered list start timestamp in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 67505
       */
      /**
       * @description The filtered list end timestamp in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 365650
       */
      /** @description Filters by `accountHolder` role. */
      /**
       * @description The TPP's discretionary reference id for the recipient, not visible to Token.io. It can be used by a gateway business member to uniquely define a merchant that is acting through it. The uniqueness of the `refId` should be handled by the gateway member, typically a reseller requiring separate reports for each participating merchant it is representing.
       * @example 4kwl35c9sp3fwp4xq
       */
      query: {
        type?: 'INVALID' | 'ACCESS' | 'TRANSFER'
        'page.offset'?: string
        'page.limit': number
        'filter.sourceAccountId'?: string
        'filter.destinationAccountId'?: string
        'filter.startTimeMs'?: string
        'filter.endTimeMs'?: string
        'filter.role'?: 'ANY' | 'FROM' | 'TO' | 'ISSUER'
        'filter.actingAsRefId'?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTokensResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetToken': {
    /**
     * Get a token
     * @description The `GET /tokens/{tokenId}` endpoint retrieves information about a specific token for the authenticated member.
     */
    parameters: {
      /**
       * @description Identifies a unique authorization token for a transfer, standing order, or account information access.
       * @example tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
       */
      path: {
        tokenId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTokenResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.CancelToken': {
    /**
     * Cancel a token
     * @description The `PUT /tokens/{tokenId}/cancel` endpoint cancels a given token.
     */
    parameters: {
      /**
       * @description Identifies a unique authorization token for a transfer, standing order, or account information access.
       * @example ta:3eYPU1BEKKunfmYgQuSKXFCeo851C5Y3XiZW3XA465TU:5zKtXEAq
       */
      path: {
        tokenId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CancelTokenResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTransfers': {
    /**
     * Get transfers
     * @description The `GET /transfers` endpoint retrieves information for all transfers.
     */
    parameters: {
      /** @description Identifies the authorization token for the request. */
      /**
       * @description The offset for the current page. If the offset has been provided in the request, this offset will be equal to the provided one. But if no offset was provided in the request (<i>i.e.</i> this is the first page) and the page is not empty, this field will be populated with a non-empty string. This may be helpful for loading the same page again, which might not always be possible with an empty offset due to a dynamic nature of the data. <br>The offset is not visible to a user and should not be parsed and/or understood in any way.
       * @example LerV6Jmex
       */
      /** @description The maximum number of records to return. This must be less than 200. */
      /**
       * @description Filters by the token id.
       * @example tt:3kFGtpEKHu8S2fJuEkb6YPnHZ4bJ2oUrYPCsJop68vCH:5zKcENpV
       */
      /**
       * @description Filtered list start time boundary in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 72799
       */
      /**
       * @description Filtered list end time boundary in milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
       * @example 3341983424
       */
      /** @description Filters by transaction status. <ul> <li><b>SUCCESS</b> – The final status received from the bank indicating a successful payment initiation.</li> <li><b>PENDING_EXTERNAL_AUTHORIZATION</b> – Waiting for user authorization at the bank. This will transition to `FAILURE_EXPIRED` if the user does not authorize within 30 minutes. This is only relevant for 1-step banks.</li> <li><b>FAILURE_CANCELED</b> – This usually indicates a cancelation from the user. It is mapped from the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> status 'CANC'.</li> <li><b>FAILURE_INSUFFICIENT_FUNDS</b> – The final status indicating that the payment initiation request has been rejected due to insufficient funds.</li> <li><b>FAILURE_PERMISSION_DENIED</b> – The user has been denied authorization at the bank. This is only relevant for 2-step banks.</li> <li><b>FAILURE_EXPIRED</b> – A callback has not been received from the bank to confirm that the user has completed authorization during the required timeframe of 30 minutes after the transaction was created. As a result  the transaction has expired. This is only relevant for 1-step banks.</li> <li><b>FAILURE_DECLINED</b> – This usually indicates bank rejection. Mapped from the <a href="https://www.iso.org/standard/55005.html" target="_blank">ISO 20022</a> status 'RJCT'.</li> <li><b>FAILURE_GENERIC</b> – This usually a technical failure. Possibly, a failure callback was received from the bank with no transaction status and no further information.</li> <li><b>PROCESSING</b> – The transaction is in process and no final status has been received from the bank yet.</li> <li><b>SENT</b> – The transaction has been sent to the bank, but has not been acknowledged.  This status is similar to `PENDING_EXTERNAL_AUTHORIZATION`. It is generated AFTER the user authenticates if a response is not received when redeeming the token for 2-step transfers.</li> <li><b>INITIATED</b> – The status has automatically been set to INITIATED because the status has remained in `PROCESSING` for 30 days and cannot be otherwise updated.</li> <li><b>SETTLEMENT_IN_PROGRESS</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. Token.io is waiting for the payment to reach the payee bank. No action is required; await the next step, <i>e.g.</i>, Token.io sends a webhook with the status update, or a polling call. The status will change to `SETTLEMENT_IN_PROGRESS` soon after Token.io receives the final status from the debtor bank.</li> <li><b>SETTLEMENT_COMPLETED</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status.The payment has reached the payee bank and Token.io has matched the transaction in the TPP’s settlement account to the initiated payment.For instant payments, `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes from payment initiation, at the latest.For non-instant payments, the time to reach `SETTLEMENT_COMPLETED` will depend on the clearing period for the payment.</li><li><b>SETTLEMENT_INCOMPLETE</b> – This status is provided when a Token.io virtual account is used as the beneficiary for the payment, and replaces the payment initiation status. Reconciliation has failed. This happens when Token.io doesn't find the corresponding transaction in the TPP’s settlement account automatically. This status is returned after 1 day for instant payments and 15 days for non-instant payments, if the payment is not in the pending state. The status will persist for 31 days for instant payments and 45 days for non-instant payments, respectively, after the payment creation date.</li> */
      /** @description Filters list by the account holder role. */
      /** @description Filters list by 'on behalf of', typically the merchant identified in the transfer's `refID`. */
      /** @description Filters list by `refID`. */
      /** @description Filters list by refund status. */
      query: {
        tokenId?: string
        'page.offset'?: string
        'page.limit': number
        'filter.tokenId'?: string
        'filter.startTimeMs'?: string
        'filter.endTimeMs'?: string
        'filter.transactionStatus'?:
          | 'PROCESSING'
          | 'SUCCESS'
          | 'PENDING_EXTERNAL_AUTHORIZATION'
          | 'FAILURE_CANCELED'
          | 'FAILURE_INSUFFICIENT_FUNDS'
          | 'FAILURE_PERMISSION_DENIED'
          | 'FAILURE_EXPIRED'
          | 'FAILURE_DECLINED'
          | 'FAILURE_GENERIC'
          | 'SENT'
          | 'INITIATED'
          | 'SETTLEMENT_IN_PROGRESS'
          | 'SETTLEMENT_COMPLETED'
          | 'SETTLEMENT_INCOMPLETE'
        'filter.role'?: 'ANY' | 'PAYER' | 'PAYEE'
        'filter.actingAsRefId'?: string
        'filter.refId'?: string
        'filter.transferRefundStatus'?: 'UNSET' | 'NONE' | 'PARTIAL' | 'FULL'
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTransfersResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.CreateTransfer': {
    /**
     * Redeem a transfer token
     * @description The `POST /transfers` endpoint creates a request to move money between accounts. This is only required for banks that support 2-step payments.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTransferRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CreateTransferResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.InitiateBankAuthorization': {
    /**
     * Initiate bank authorization
     * @description The `POST /token-requests/{tokenRequestId}/authorization` endpoint initiates the bank authorization process with a given bank id and token request id.
     */
    parameters: {
      /** @description The token request id received in response to the original token request. */
      path: {
        tokenRequestId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InitiateBankAuthorizationRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['InitiateBankAuthorizationResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetTransfer': {
    /**
     * Get a transfer
     * @description The `GET /transfers/{transferId}` endpoint retrieves information about a specific transfer in a given account.
     */
    parameters: {
      /** @description If `skipTransferUpdate` is false, the request will call the bank for a status update. If set to true, the cached result will be returned instead. */
      query?: {
        skipTransferUpdate?: boolean
      }
      /** @description The unique id of the transfer sent in `POST /transfer` response and/or included in a respective `GET /transfers` response. */
      path: {
        transferId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTransferResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.GetWebhookConfig': {
    /**
     * Get webhook config
     * @description The `GET /webhook/config` endpoint retrieves the webhook configuration.
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetWebhookConfigResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.SetWebhookConfig': {
    /**
     * Set webhook config
     * @description The `PUT /webhook/config` endpoint sets the webhook configuration.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['SetWebhookConfigRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['SetWebhookConfigResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  'GatewayService.DeleteWebhookConfig': {
    /**
     * Delete webhook config
     * @description The `GET /webhook/config` endpoint deletes the webhook configuration.
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['DeleteWebhookConfigResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetVrpConsents: {
    /**
     * Get VRP consents
     * @description The `GET /vrp-consents` endpoint retrieves all VRP consents created by the calling member.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      query: {
        limit: number
        offset?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpConsentsResponse']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_1']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  CreateVrpConsent: {
    /**
     * Create a VRP consent
     * @description The `POST /vrp-consents` endpoint creates a new VRP consent.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['vrpconsents_body']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpConsentResponse']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_2']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  GetVrpConsent: {
    /**
     * Get a VRP consent
     * @description The `GET /vrp-consents/{id}` endpoint retrieves the details for an individual VRP consent.
     */
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpConsentResponse']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description VRP consent not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404_1']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  RevokeVrpConsent: {
    /**
     * Revoke a VRP consent
     * @description The `DELETE /vrp-consents/{id}` endpoint revokes an individual VRP consent.
     */
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpConsentResponse']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description VRP consent not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404_1']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  GetVrpConsentPayments: {
    /**
     * Get payments under a VRP consent
     * @description The `GET /vrp-consents/{id}/payments` endpoint retrieves the payments under a given VRP consent.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      query: {
        limit: number
        offset?: string
      }
      /** @description VRP consent id */
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpsResponse']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_1']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  CreateVrp: {
    /**
     * Initiate a VRP payment
     * @description The `POST /vrps` initiates a new VRP payment.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['vrps_body']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpResponse']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_3']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description VRP consent not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404_1']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  GetVrp: {
    /**
     * Get a VRP payment
     * @description The `GET /vrps/{id}` endpoint retrieves the details for an individual VRP payment.
     */
    parameters: {
      /** @description VRP id */
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['VrpResponse']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404_2']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  GetRefunds: {
    /**
     * Get refunds
     * @description The `GET /refunds` endpoint retrieves a complete or filtered list of refunds.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      /**
       * @description Lower bound for a refund creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only refunds created at or after the given date will be returned.
       * @example 2010-01-01
       */
      /**
       * @description Upper bound for a refund creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only refunds created at or before the given date will be returned.
       * @example 2010-01-01
       */
      /**
       * @description Filters refunds by their ids - returns only refunds with ids listed in this parameter.
       * @example [
       *   "rf:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN",
       *   "rf:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA"
       * ]
       */
      /**
       * @description Invert ids query - returns only refunds with ids not listed in the ids parameter.
       * @example false
       */
      /**
       * @description Filters refunds by their statuses - returns only refunds with statuses listed in this parameter.
       * @example [
       *   "INITIATION_COMPLETED",
       *   "INITIATION_REJECTED"
       * ]
       */
      /**
       * @description Invert statuses query - returns only refunds with statuses not listed in the statuses parameter.
       * @example true
       */
      /**
       * @description Filters refunds by their `refId` values - returns only refunds with `refIds` listed in this parameter.
       * @example [
       *   "ShBdcTeqFabqJJhUF",
       *   "N5cJDFsQzVca3Q"
       * ]
       */
      /**
       * @description Returns refunds in a partial format - with only id and status fields populated.
       * @example true
       */
      /**
       * @description The result can be filtered on the basis of multiple OnBehalfOfIds.
       * @example [
       *   "c5a863bc-86f2-4418-a26f-25b24c7983c7",
       *   "6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s"
       * ]
       */
      query: {
        limit: number
        offset?: string
        startDate?: string
        endDate?: string
        ids?: string[]
        invertIds?: boolean
        statuses?: components['schemas']['RefundStatus'][]
        invertStatuses?: boolean
        refIds?: string[]
        partial?: boolean
        onBehalfOfIds?: string[]
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RefundsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  InitiateRefund: {
    /**
     * Initiate a refund
     * @description The `POST /refunds` endpoint initiates a refund. After the refund is settled, the refund status of the original transfer will be updated. <br/> The debtor field can be optional if you're using the debtor in registration. The creditor field can be optional if the information is available in the original payment.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['refunds_body']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RefundResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetRefund: {
    /**
     * Get a refund
     * @description The `GET /refunds/{id}` endpoint retrieves a given refund.
     */
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RefundResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetTransferRefunds: {
    /**
     * Get all refunds by transfer
     * @description The `GET /transfers/{id}/refunds` endpoint retrieves all refunds associated with a given transfer.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      query: {
        limit: number
        offset?: string
      }
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RefundsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetPayouts: {
    /**
     * Get payouts
     * @description The `GET /payouts` endpoint retrieves a complete or filtered list of payouts.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      /**
       * @description Lower bound for a payout creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only payouts created at or after the given date will be returned.
       * @example 2010-01-01
       */
      /**
       * @description Upper bound for a payout creation date in the format 'YYYY-MM-DD' (UTC time zone). If specified, only payouts created at or before the given date will be returned.
       * @example 2010-01-01
       */
      /**
       * @description Filters payouts by their ids - returns only payouts with ids listed in this parameter.
       * @example [
       *   "po:28oivvd3iFhBrcbNj4tmtLEhxRTk:2gFUX1NE1T6",
       *   "po:3ZfdHxbpXmRZ1TVmiYNPgcwEocBy:2gFUX1NDdqr"
       * ]
       */
      /**
       * @description Invert ids query - returns only payouts with ids not listed in the ids parameter.
       * @example false
       */
      /**
       * @description Filters payouts by their statuses - returns only payouts with statuses listed in this parameter.
       * @example [
       *   "INITIATION_COMPLETED",
       *   "INITIATION_REJECTED"
       * ]
       */
      /**
       * @description Invert statuses query - returns only payouts with statuses not listed in the statuses parameter.
       * @example true
       */
      /**
       * @description Filters payouts by their `refId` values - returns only payouts with `refIds` listed in this parameter.
       * @example [
       *   "ShBdcTeqFabqJJhUF",
       *   "N5cJDFsQzVca3Q"
       * ]
       */
      /**
       * @description Filters payouts by their `onBehalfOfId` value - returns only payouts with `onBehalfOfId` listed in this parameter.
       * @example onBahalfOfId001
       */
      query: {
        limit: number
        offset?: string
        startDate?: string
        endDate?: string
        ids?: string[]
        invertIds?: boolean
        statuses?: components['schemas']['PayoutStatus'][]
        invertStatuses?: boolean
        refIds?: string[]
        onBehalfOfId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PayoutsResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  InitiatePayout: {
    /**
     * Initiate a payout
     * @description The `POST /payouts` endpoint initiates a payout.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['payouts_body']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PayoutResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetPayout: {
    /**
     * Get a payout
     * @description The `GET /payouts/{id}` endpoint retrieves a given payout.
     */
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PayoutResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  UploadKeyAndCertificate: {
    /**
     * Upload a private key and certificate
     * @description The `POST /secrets/upload/key-and-certificate` endpoint uploads a private key and certificate.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['UploadKeyAndCertificate']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UploadKeyAndCertificateResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description Too many requests */
      429: {
        content: {
          'application/json': components['schemas']['inline_response_429']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetBanksv2: {
    /**
     * Get banks v2
     * @description The `GET /v2/banks` endpoint retrieves a list of Token.io-integrated banks matching the parameters specified.
     */
    parameters?: {
      /** @description The index of the page currently being retrieved. */
      /** @description The number of records per page. */
      /** @description The key to sort the result. This can be `NAME` (Bank's name), `STANDARD` (OpenBankingStandard), `RANK`, or `COUNTRY`. */
      /** @description The Token.io-assigned member id of the TPP. */
      /** @description Filters for banks for which the TPP represented by this `tppId` has access. */
      /** @description Filters for banks with a `bankId` (case-insensitive) matching any of the ids listed, up to a maximum of 1000. Only exact (full string) matches are returned. */
      /** @description Filters for banks with a name or identifiers containing this search string. */
      /** @description Filters for banks that are members of the bank group specified. */
      /** @description Filters for banks with a BIC (or BLZ, if German) that matches this `bankCode`. The BIC must have a string length of 8 or 11. The BLZ must have a string length of 8. */
      /** @description Filters for banks that are accessed through any of the listed standards. */
      /** @description Filters for banks that are located in the countries specified by this list of <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case. */
      /** @description Filters for banks whose BIC matches any of the listed BICs (case-insensitive), up to a maximum of 1000. */
      /**
       * @description Filters for banks that support any of the listed payment networks.
       * @example [
       *   "SEPA_INSTANT",
       *   "FASTER_PAYMENTS",
       *   "SEPA"
       * ]
       */
      /** @description Filters for banks that support fetching accounts. */
      /** @description Filters for banks that support fetching account details. */
      /** @description Filters for banks that support fetching account balances. */
      /** @description Filters for banks that support fetching transactions. */
      /** @description Filters for banks that support fetching transaction details. */
      /** @description Filters for banks that support the fetching standing orders. */
      /** @description Filters for banks that support feting transactions using a date filter. */
      /** @description Filters for banks that only support immediate redemption of transfers. */
      /** @description Filters for banks that support single immediate payments. */
      /** @description Filters for banks that support future dated scheduled payments. */
      /** @description Filters for banks that support recurring payments/standing orders. */
      /** @description Filters for the banks that support request of refund account. */
      /** @description Filters for banks that support returning the refund account holder name. */
      /** @description Filters for the banks that support confirmation of available funds. */
      /** @description Filters for banks that support variable recurring payments. */
      /** @description Filters for banks that support app-to-app on IOS devices. */
      /** @description Filters for banks that support app-to-app on Android devices. */
      /**
       * @description Filters for banks that are part of the bank sub-group specified.
       * @example [
       *   "CMM Grand",
       *   "Banque Populaire",
       *   "La Banque"
       * ]
       */
      query?: {
        page?: number
        perPage?: number
        sort?: 'COUNTRY' | 'STANDARD' | 'RANK' | 'NAME'
        memberId?: string
        tppId?: string
        ids?: string[]
        search?: string
        bankGroup?: string
        bankCode?: string
        openBankingStandards?: (
          | 'UK_Open_Banking_Standard'
          | 'Starling_Bank_API'
          | 'PolishAPI'
          | 'STET_PSD2_API'
          | 'Citi_Handlowy_PSD2_API'
          | 'NextGenPSD2'
          | 'Slovak_Banking_API_Standard'
          | 'Czech_Open_Banking_Standard'
          | 'American_Express_PSD2_API'
          | 'Budapest_Bank_API'
          | 'Token'
        )[]
        countries?: string[]
        bics?: string[]
        supportedLocalInstruments?: string[]
        supportsAccountList?: boolean
        supportsAccountDetails?: boolean
        supportsAccountBalance?: boolean
        supportsTransactionList?: boolean
        supportsTransactionDetails?: boolean
        supportsStandingOrderList?: boolean
        supportsTransactionsDateFilter?: boolean
        requiresOneStepPayment?: boolean
        supportsSinglePayment?: boolean
        supportsScheduledPayment?: boolean
        supportsStandingOrder?: boolean
        supportsReturnRefundAccount?: boolean
        supportsReturnRefundAccountHolderName?: boolean
        supportsFundsConfirmation?: boolean
        supportsVariableRecurringPayment?: boolean
        supportsAppToAppOnIos?: boolean
        supportsAppToAppOnAndroid?: boolean
        bankSubGroup?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetBanksV2Response']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_2']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
      /** @description The operation was not implemented */
      501: {
        content: {
          'application/json': components['schemas']['inline_response_501']
        }
      }
      /** @description Service is unavailable */
      503: {
        content: {
          'application/json': components['schemas']['inline_response_503']
        }
      }
      /** @description Gateway has timed out */
      504: {
        content: {
          'application/json': components['schemas']['inline_response_504']
        }
      }
    }
  }
  GetPayments: {
    /**
     * Get payments
     * @description The `GET /v2/payments` endpoint provides you with a list of payments and their details.
     */
    parameters: {
      /**
       * @description The maximum number of records to return.
       * @example 10
       */
      /**
       * @description The offset from the previous page.
       * @example LerV6Jmex
       */
      /**
       * @description Filters payments by their ids - returns only payments with ids listed in this parameter.
       * @example [
       *   "pm2:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN",
       *   "pm2:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA"
       * ]
       */
      /**
       * @description Invert ids query - returns only payments with ids not listed in the ids parameter.
       * @example false
       */
      /**
       * @description Filters payments by their statuses - returns only payments with statuses listed in this parameter.
       * @example [
       *   "INITIATION_COMPLETED",
       *   "INITIATION_REJECTED"
       * ]
       */
      /**
       * @description Invert statuses query - returns only payments with statuses not listed in the statuses parameter.
       * @example true
       */
      /**
       * @description Returns only payments created after this time (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2022-04-05T17:00:00.000Z
       */
      /**
       * @description Returns only payments created before this time (in <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank">ISO 8601</a> format).
       * @example 2022-04-05T17:00:00.000Z
       */
      /**
       * @description Filters payments by their `refId` values - returns only payments with `refIds` listed in this parameter.
       * @example [
       *   "ShBdcTeqFabqJJhUF",
       *   "N5cJDFsQzVca3Q"
       * ]
       */
      /**
       * @description Filters payments by the `onBehalfOfId` value - returns only payments with `onBehalfOfId` specified in this parameter.
       * @example c5a863bc-86f2-4418-a26f-25b24c7983c7
       */
      /**
       * @description Filters payments by their refund status values - returns only payments with refund statuses listed in this parameter.
       * @example [
       *   "PARTIAL",
       *   "NONE"
       * ]
       */
      /**
       * @description Returns payments in a partial format - with only id and status fields populated.
       * @example true
       */
      query: {
        limit: number
        offset?: string
        ids?: string[]
        invertIds?: boolean
        statuses?: components['schemas']['PaymentStatus'][]
        invertStatuses?: boolean
        createdAfter?: string
        createdBefore?: string
        refIds?: string[]
        onBehalfOfId?: string
        refundStatuses?: components['schemas']['PaymentRefundStatus'][]
        partial?: boolean
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentsResponse']
        }
      }
      /** @description The client specified an invalid argument. */
      400: {
        content: {
          'application/json': components['schemas']['FieldError']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  InitiatePayment: {
    /**
     * Initiate a payment
     * @description The `POST /v2/payments` endpoint enables you to initiate a payment with a bank.<br/><br/>Once the payment has been initiated, the end user needs to authenticate themselves with their bank.<br/><br/><b>Check payment status:</b><br/><ol><li>If the status in the initiation response is `INITIATION_PENDING_REDIRECT_AUTH`, redirect the user to the redirect url found in the authentication payload of the payment, to authenticate at the bank.</li><br/><li>If the status in the initiation response is `INITIATION_PENDING_EMBEDDED_AUTH`, collect the requested data listed in the authentication payload of the payment and use the `POST /v2/payments/{paymentId}/embedded-auth` endpoint to provide the requested field values.</li><br/><li>If the status in the initiation response is `INITIATION_PENDING`, Token.io needs more time to process this request with the bank. In the case of a successful scenario, the status will be updated to `INITIATION_PENDING_REDIRECT_AUTH`, `INITIATION_PENDING_EMBEDDED_AUTH` or `INITIATION_PENDING_DECOUPLED_AUTH` when the authentication details are ready. The update can be checked by the `GET /v2/payments/{paymentId}` endpoint or received via a webhook (see <a href="https://developer.token.io/token_rest_api_doc/content/e-rest/api-basics.htm#Webhook" target="_blank">Webhooks</a>).</li><br/><li>If the status is `INITIATION_PENDING_DECOUPLED_AUTH`, the bank has requested a decoupled authentication from the user and Token.io is awaiting the result. No further action is required.</li><br/><li>If the status is `PENDING_MORE_INFO` and you're not using Token.io's Web App, you need to populate the required information and make the payment initiation call again. Information about the missing data can be found in the `statusReasonInformation` field. If you're using Token.io's Web App, the required data will be collected from the user. You'll need to redirect the user to the Web App url constructed with the returned payment `id`.</li></ol>
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['v2_payments_body']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      /** @description The client specified an invalid argument */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_2']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  ProvideEmbeddedFields: {
    /**
     * Provide information for embedded authentication
     * @description The `/v2/payments/{paymentId}/embedded-auth` endpoint provides you with the requested information when the payment status is `INITIATION_PENDING_EMBEDDED_AUTH`. The requested information can be found in the authentication field of the payment. <br/> <br/> It's possible that some banks might request the user's input multiple times. In this case you might need to call this endpoint again for a new field set.
     */
    parameters: {
      path: {
        paymentId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['paymentIdEmbeddedAuthBody']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      /** @description The client specified an invalid argument. */
      400: {
        content: {
          'application/json': components['schemas']['inline_response_400_4']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description Permission to access this endpoint is denied */
      403: {
        content: {
          'application/json': components['schemas']['inline_response_403']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  GetPayment: {
    /**
     * Get a payment
     * @description The `GET /v2/payments/{paymentId}` endpoint provides you with details of an individual payment and checks the payment status for the next step, if any.
     */
    parameters: {
      path: {
        paymentId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      /** @description The authorization information is missing or invalid */
      401: {
        content: {
          'application/json': components['schemas']['inline_response_400']
        }
      }
      /** @description The requested entity, such as a payment, was not found */
      404: {
        content: {
          'application/json': components['schemas']['inline_response_404']
        }
      }
      /** @description An unexpected or internal server error */
      500: {
        content: {
          'application/json': components['schemas']['inline_response_500']
        }
      }
    }
  }
  'GatewayService.GetVirtualAccounts': {
    /**
     * Get virtual accounts
     * @description The `GET /virtual-accounts` endpoint retrieves information for all virtual accounts.
     */
    parameters?: {
      query?: {
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetVirtualAccountsResponse']
        }
      }
      400: components['responses']['InvalidArgumentRequest']
      401: components['responses']['UnauthenticatedResponse']
      403: components['responses']['PermissionDeniedResponse']
      404: components['responses']['CustomerNotFoundResponse']
      429: components['responses']['TooManyRequestsResponse']
      500: components['responses']['UnexpectedErrorResponse']
      501: components['responses']['NotImplementedResponse']
      503: components['responses']['ServiceUnavailableResponse']
      504: components['responses']['GatewayTimeoutResponse']
    }
  }
  'GatewayService.CreateVirtualAccount': {
    /**
     * Create a virtual account
     * @description The `POST /virtual-accounts` endpoint creates a virtual account.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVirtualAccountRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CreateVirtualAccountResponse']
        }
      }
      400: components['responses']['InvalidArgumentRequest']
      401: components['responses']['UnauthenticatedResponse']
      403: components['responses']['PermissionDeniedResponse']
      404: components['responses']['CustomerNotFoundResponse']
      429: components['responses']['TooManyRequestsResponse']
      500: components['responses']['UnexpectedErrorResponse']
      501: components['responses']['NotImplementedResponse']
      503: components['responses']['ServiceUnavailableResponse']
      504: components['responses']['GatewayTimeoutResponse']
    }
  }
  'GatewayService.GetVirtualAccountById': {
    /**
     * Get a virtual account
     * @description The `GET /virtual-accounts/{accountId}` endpoint the information for a specific virtual account.
     */
    parameters: {
      path: {
        accountId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetVirtualAccountByIdResponse']
        }
      }
      400: components['responses']['InvalidArgumentRequest']
      401: components['responses']['UnauthenticatedResponse']
      403: components['responses']['PermissionDeniedResponse']
      404: components['responses']['AccountNotFoundResponse']
      429: components['responses']['TooManyRequestsResponse']
      500: components['responses']['UnexpectedErrorResponse']
      501: components['responses']['NotImplementedResponse']
      503: components['responses']['ServiceUnavailableResponse']
      504: components['responses']['GatewayTimeoutResponse']
    }
  }
  'GatewayService.GetVirtualAccountTransactions': {
    /**
     * Get virtual account transactions
     * @description The `GET /virtual-accounts/{accountId}/transactions` endpoint retrieves information for a specific transaction in a given virtual account.
     */
    parameters: {
      path: {
        accountId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['GetTransactionsResponse']
        }
      }
      400: components['responses']['InvalidArgumentRequest']
      401: components['responses']['UnauthenticatedResponse']
      403: components['responses']['PermissionDeniedResponse']
      404: components['responses']['AccountNotFoundResponse']
      429: components['responses']['TooManyRequestsResponse']
      500: components['responses']['UnexpectedErrorResponse']
      501: components['responses']['NotImplementedResponse']
      503: components['responses']['ServiceUnavailableResponse']
      504: components['responses']['GatewayTimeoutResponse']
    }
  }
}
